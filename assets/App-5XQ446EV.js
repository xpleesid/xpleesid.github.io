;(function () {
  function loadScript(url, callback) {
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = url;
    script.onload = callback;
    document.head.appendChild(script);
  }

  function onLoad() {
    if (!window.SockJS || !window.ReactErrorOverlay) return;

    var SockJS = window.SockJS;
    var reo = window.ReactErrorOverlay;
    var launchEditorEndpoint = '/__open-stack-frame-in-editor';

    // enable reporting
    reo.setEditorHandler(function (location) {
      var components = [];
      for (var key in location) components.push(key + '=' + encodeURIComponent(location[key]));
      fetch(launchEditorEndpoint + '?' + components.join('&'));
    });
    reo.startReportingRuntimeErrors({});

    function errorMessage(e, stack) {
      // react-error-overlay assumes relative filenames
      function relativefile(file) {
        return !file.startsWith('./') ? './' + file : file;
      }

      if (!e.location) return 'Error: ' + e.text;
      var pluginText = e.pluginName ? '[plugin: ' + e.pluginName + '] ' : '';
      var message = stack ? '' : relativefile(e.location.file) + '\n';
      message += 'Error: ' + pluginText + e.text + '\n\tat ' + e.location.lineText;
      message += ' (' + (stack ? e.location.file + ':' : '') + e.location.line + ':' + e.location.column + ')';
      return message;
    }

    // listen for build results
    var origin = window.location.origin.replace(/\/+$/, '');
    var connection = new SockJS(origin + '/esbuild');
    connection.onmessage = function (event) {
      var result = JSON.parse(event.data);
      if (result.errors.length) return reo.reportBuildError(errorMessage(result.errors[0]));
      window.location.reload();
    };
  }

  window.process = window.process || {};
  window.process.env = window.process.env || 'development'; // react-error-overlay expects process
  loadScript('https://cdn.jsdelivr.net/npm/sockjs-client@1/dist/sockjs.min.js', onLoad);
  loadScript('https://cdn.jsdelivr.net/npm/react-error-overlay@6.0.9/lib/index.min.js', onLoad);
})();

var yq=Object.create;var ty=Object.defineProperty,gq=Object.defineProperties,Eq=Object.getOwnPropertyDescriptor,Tq=Object.getOwnPropertyDescriptors,_q=Object.getOwnPropertyNames,qf=Object.getOwnPropertySymbols,bq=Object.getPrototypeOf,ry=Object.prototype.hasOwnProperty,oO=Object.prototype.propertyIsEnumerable;var iO=(e,t,r)=>t in e?ty(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,Vi=(e,t)=>{for(var r in t||(t={}))ry.call(t,r)&&iO(e,r,t[r]);if(qf)for(var r of qf(t))oO.call(t,r)&&iO(e,r,t[r]);return e},Uf=(e,t)=>gq(e,Tq(t));var za=(e,t)=>{var r={};for(var n in e)ry.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(e!=null&&qf)for(var n of qf(e))t.indexOf(n)<0&&oO.call(e,n)&&(r[n]=e[n]);return r};var y=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var Sq=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of _q(t))!ry.call(e,i)&&i!==r&&ty(e,i,{get:()=>t[i],enumerable:!(n=Eq(t,i))||n.enumerable});return e};var z=(e,t,r)=>(r=e!=null?yq(bq(e)):{},Sq(t||!e||!e.__esModule?ty(r,"default",{value:e,enumerable:!0}):r,e));var vO=y(re=>{"use strict";var Hu=Symbol.for("react.element"),wq=Symbol.for("react.portal"),Oq=Symbol.for("react.fragment"),Nq=Symbol.for("react.strict_mode"),Iq=Symbol.for("react.profiler"),Rq=Symbol.for("react.provider"),Lq=Symbol.for("react.context"),Pq=Symbol.for("react.forward_ref"),xq=Symbol.for("react.suspense"),Cq=Symbol.for("react.memo"),kq=Symbol.for("react.lazy"),aO=Symbol.iterator;function Dq(e){return e===null||typeof e!="object"?null:(e=aO&&e[aO]||e["@@iterator"],typeof e=="function"?e:null)}var lO={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},cO=Object.assign,fO={};function Wa(e,t,r){this.props=e,this.context=t,this.refs=fO,this.updater=r||lO}Wa.prototype.isReactComponent={};Wa.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")};Wa.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function pO(){}pO.prototype=Wa.prototype;function iy(e,t,r){this.props=e,this.context=t,this.refs=fO,this.updater=r||lO}var oy=iy.prototype=new pO;oy.constructor=iy;cO(oy,Wa.prototype);oy.isPureReactComponent=!0;var sO=Array.isArray,dO=Object.prototype.hasOwnProperty,ay={current:null},hO={key:!0,ref:!0,__self:!0,__source:!0};function mO(e,t,r){var n,i={},o=null,a=null;if(t!=null)for(n in t.ref!==void 0&&(a=t.ref),t.key!==void 0&&(o=""+t.key),t)dO.call(t,n)&&!hO.hasOwnProperty(n)&&(i[n]=t[n]);var s=arguments.length-2;if(s===1)i.children=r;else if(1<s){for(var u=Array(s),l=0;l<s;l++)u[l]=arguments[l+2];i.children=u}if(e&&e.defaultProps)for(n in s=e.defaultProps,s)i[n]===void 0&&(i[n]=s[n]);return{$$typeof:Hu,type:e,key:o,ref:a,props:i,_owner:ay.current}}function Aq(e,t){return{$$typeof:Hu,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function sy(e){return typeof e=="object"&&e!==null&&e.$$typeof===Hu}function jq(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(r){return t[r]})}var uO=/\/+/g;function ny(e,t){return typeof e=="object"&&e!==null&&e.key!=null?jq(""+e.key):t.toString(36)}function Gf(e,t,r,n,i){var o=typeof e;(o==="undefined"||o==="boolean")&&(e=null);var a=!1;if(e===null)a=!0;else switch(o){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case Hu:case wq:a=!0}}if(a)return a=e,i=i(a),e=n===""?"."+ny(a,0):n,sO(i)?(r="",e!=null&&(r=e.replace(uO,"$&/")+"/"),Gf(i,t,r,"",function(l){return l})):i!=null&&(sy(i)&&(i=Aq(i,r+(!i.key||a&&a.key===i.key?"":(""+i.key).replace(uO,"$&/")+"/")+e)),t.push(i)),1;if(a=0,n=n===""?".":n+":",sO(e))for(var s=0;s<e.length;s++){o=e[s];var u=n+ny(o,s);a+=Gf(o,t,r,u,i)}else if(u=Dq(e),typeof u=="function")for(e=u.call(e),s=0;!(o=e.next()).done;)o=o.value,u=n+ny(o,s++),a+=Gf(o,t,r,u,i);else if(o==="object")throw t=String(e),Error("Objects are not valid as a React child (found: "+(t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return a}function Vf(e,t,r){if(e==null)return e;var n=[],i=0;return Gf(e,n,"","",function(o){return t.call(r,o,i++)}),n}function Fq(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(r){(e._status===0||e._status===-1)&&(e._status=1,e._result=r)},function(r){(e._status===0||e._status===-1)&&(e._status=2,e._result=r)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var Kt={current:null},$f={transition:null},Mq={ReactCurrentDispatcher:Kt,ReactCurrentBatchConfig:$f,ReactCurrentOwner:ay};re.Children={map:Vf,forEach:function(e,t,r){Vf(e,function(){t.apply(this,arguments)},r)},count:function(e){var t=0;return Vf(e,function(){t++}),t},toArray:function(e){return Vf(e,function(t){return t})||[]},only:function(e){if(!sy(e))throw Error("React.Children.only expected to receive a single React element child.");return e}};re.Component=Wa;re.Fragment=Oq;re.Profiler=Iq;re.PureComponent=iy;re.StrictMode=Nq;re.Suspense=xq;re.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Mq;re.cloneElement=function(e,t,r){if(e==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var n=cO({},e.props),i=e.key,o=e.ref,a=e._owner;if(t!=null){if(t.ref!==void 0&&(o=t.ref,a=ay.current),t.key!==void 0&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(u in t)dO.call(t,u)&&!hO.hasOwnProperty(u)&&(n[u]=t[u]===void 0&&s!==void 0?s[u]:t[u])}var u=arguments.length-2;if(u===1)n.children=r;else if(1<u){s=Array(u);for(var l=0;l<u;l++)s[l]=arguments[l+2];n.children=s}return{$$typeof:Hu,type:e.type,key:i,ref:o,props:n,_owner:a}};re.createContext=function(e){return e={$$typeof:Lq,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:Rq,_context:e},e.Consumer=e};re.createElement=mO;re.createFactory=function(e){var t=mO.bind(null,e);return t.type=e,t};re.createRef=function(){return{current:null}};re.forwardRef=function(e){return{$$typeof:Pq,render:e}};re.isValidElement=sy;re.lazy=function(e){return{$$typeof:kq,_payload:{_status:-1,_result:e},_init:Fq}};re.memo=function(e,t){return{$$typeof:Cq,type:e,compare:t===void 0?null:t}};re.startTransition=function(e){var t=$f.transition;$f.transition={};try{e()}finally{$f.transition=t}};re.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")};re.useCallback=function(e,t){return Kt.current.useCallback(e,t)};re.useContext=function(e){return Kt.current.useContext(e)};re.useDebugValue=function(){};re.useDeferredValue=function(e){return Kt.current.useDeferredValue(e)};re.useEffect=function(e,t){return Kt.current.useEffect(e,t)};re.useId=function(){return Kt.current.useId()};re.useImperativeHandle=function(e,t,r){return Kt.current.useImperativeHandle(e,t,r)};re.useInsertionEffect=function(e,t){return Kt.current.useInsertionEffect(e,t)};re.useLayoutEffect=function(e,t){return Kt.current.useLayoutEffect(e,t)};re.useMemo=function(e,t){return Kt.current.useMemo(e,t)};re.useReducer=function(e,t,r){return Kt.current.useReducer(e,t,r)};re.useRef=function(e){return Kt.current.useRef(e)};re.useState=function(e){return Kt.current.useState(e)};re.useSyncExternalStore=function(e,t,r){return Kt.current.useSyncExternalStore(e,t,r)};re.useTransition=function(){return Kt.current.useTransition()};re.version="18.2.0"});var ve=y((xee,yO)=>{"use strict";yO.exports=vO()});var uN=y(Ya=>{"use strict";var MO=ve();function Y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var tr=Object.prototype.hasOwnProperty,Gq=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,gO={},EO={};function qO(e){return tr.call(EO,e)?!0:tr.call(gO,e)?!1:Gq.test(e)?EO[e]=!0:(gO[e]=!0,!1)}function Ht(e,t,r,n,i,o,a){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=n,this.attributeNamespace=i,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=a}var _t={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){_t[e]=new Ht(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];_t[t]=new Ht(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){_t[e]=new Ht(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){_t[e]=new Ht(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){_t[e]=new Ht(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){_t[e]=new Ht(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){_t[e]=new Ht(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){_t[e]=new Ht(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){_t[e]=new Ht(e,5,!1,e.toLowerCase(),null,!1,!1)});var yy=/[\-:]([a-z])/g;function gy(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(yy,gy);_t[t]=new Ht(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(yy,gy);_t[t]=new Ht(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(yy,gy);_t[t]=new Ht(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){_t[e]=new Ht(e,1,!1,e.toLowerCase(),null,!1,!1)});_t.xlinkHref=new Ht("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){_t[e]=new Ht(e,1,!1,e.toLowerCase(),null,!0,!0)});var Hf={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},$q=["Webkit","ms","Moz","O"];Object.keys(Hf).forEach(function(e){$q.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Hf[t]=Hf[e]})});var Qq=/["'&<>]/;function Bt(e){if(typeof e=="boolean"||typeof e=="number")return""+e;e=""+e;var t=Qq.exec(e);if(t){var r="",n,i=0;for(n=t.index;n<e.length;n++){switch(e.charCodeAt(n)){case 34:t="&quot;";break;case 38:t="&amp;";break;case 39:t="&#x27;";break;case 60:t="&lt;";break;case 62:t="&gt;";break;default:continue}i!==n&&(r+=e.substring(i,n)),i=n+1,r+=t}e=i!==n?r+e.substring(i,n):r}return e}var Kq=/([A-Z])/g,Bq=/^ms-/,py=Array.isArray;function di(e,t){return{insertionMode:e,selectedValue:t}}function Hq(e,t,r){switch(t){case"select":return di(1,r.value!=null?r.value:r.defaultValue);case"svg":return di(2,null);case"math":return di(3,null);case"foreignObject":return di(1,null);case"table":return di(4,null);case"thead":case"tbody":case"tfoot":return di(5,null);case"colgroup":return di(7,null);case"tr":return di(6,null)}return 4<=e.insertionMode||e.insertionMode===0?di(1,null):e}var TO=new Map;function UO(e,t,r){if(typeof r!="object")throw Error(Y(62));t=!0;for(var n in r)if(tr.call(r,n)){var i=r[n];if(i!=null&&typeof i!="boolean"&&i!==""){if(n.indexOf("--")===0){var o=Bt(n);i=Bt((""+i).trim())}else{o=n;var a=TO.get(o);a!==void 0||(a=Bt(o.replace(Kq,"-$1").toLowerCase().replace(Bq,"-ms-")),TO.set(o,a)),o=a,i=typeof i=="number"?i===0||tr.call(Hf,n)?""+i:i+"px":Bt((""+i).trim())}t?(t=!1,e.push(' style="',o,":",i)):e.push(";",o,":",i)}}t||e.push('"')}function _r(e,t,r,n){switch(r){case"style":UO(e,t,n);return;case"defaultValue":case"defaultChecked":case"innerHTML":case"suppressContentEditableWarning":case"suppressHydrationWarning":return}if(!(2<r.length)||r[0]!=="o"&&r[0]!=="O"||r[1]!=="n"&&r[1]!=="N"){if(t=_t.hasOwnProperty(r)?_t[r]:null,t!==null){switch(typeof n){case"function":case"symbol":return;case"boolean":if(!t.acceptsBooleans)return}switch(r=t.attributeName,t.type){case 3:n&&e.push(" ",r,'=""');break;case 4:n===!0?e.push(" ",r,'=""'):n!==!1&&e.push(" ",r,'="',Bt(n),'"');break;case 5:isNaN(n)||e.push(" ",r,'="',Bt(n),'"');break;case 6:!isNaN(n)&&1<=n&&e.push(" ",r,'="',Bt(n),'"');break;default:t.sanitizeURL&&(n=""+n),e.push(" ",r,'="',Bt(n),'"')}}else if(qO(r)){switch(typeof n){case"function":case"symbol":return;case"boolean":if(t=r.toLowerCase().slice(0,5),t!=="data-"&&t!=="aria-")return}e.push(" ",r,'="',Bt(n),'"')}}}function zf(e,t,r){if(t!=null){if(r!=null)throw Error(Y(60));if(typeof t!="object"||!("__html"in t))throw Error(Y(61));t=t.__html,t!=null&&e.push(""+t)}}function zq(e){var t="";return MO.Children.forEach(e,function(r){r!=null&&(t+=r)}),t}function ly(e,t,r,n){e.push(An(r));var i=r=null,o;for(o in t)if(tr.call(t,o)){var a=t[o];if(a!=null)switch(o){case"children":r=a;break;case"dangerouslySetInnerHTML":i=a;break;default:_r(e,n,o,a)}}return e.push(">"),zf(e,i,r),typeof r=="string"?(e.push(Bt(r)),null):r}var Wq=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,_O=new Map;function An(e){var t=_O.get(e);if(t===void 0){if(!Wq.test(e))throw Error(Y(65,e));t="<"+e,_O.set(e,t)}return t}function Yq(e,t,r,n,i){switch(t){case"select":e.push(An("select"));var o=null,a=null;for(c in r)if(tr.call(r,c)){var s=r[c];if(s!=null)switch(c){case"children":o=s;break;case"dangerouslySetInnerHTML":a=s;break;case"defaultValue":case"value":break;default:_r(e,n,c,s)}}return e.push(">"),zf(e,a,o),o;case"option":a=i.selectedValue,e.push(An("option"));var u=s=null,l=null,c=null;for(o in r)if(tr.call(r,o)){var f=r[o];if(f!=null)switch(o){case"children":s=f;break;case"selected":l=f;break;case"dangerouslySetInnerHTML":c=f;break;case"value":u=f;default:_r(e,n,o,f)}}if(a!=null)if(r=u!==null?""+u:zq(s),py(a)){for(n=0;n<a.length;n++)if(""+a[n]===r){e.push(' selected=""');break}}else""+a===r&&e.push(' selected=""');else l&&e.push(' selected=""');return e.push(">"),zf(e,c,s),s;case"textarea":e.push(An("textarea")),c=a=o=null;for(s in r)if(tr.call(r,s)&&(u=r[s],u!=null))switch(s){case"children":c=u;break;case"value":o=u;break;case"defaultValue":a=u;break;case"dangerouslySetInnerHTML":throw Error(Y(91));default:_r(e,n,s,u)}if(o===null&&a!==null&&(o=a),e.push(">"),c!=null){if(o!=null)throw Error(Y(92));if(py(c)&&1<c.length)throw Error(Y(93));o=""+c}return typeof o=="string"&&o[0]===`
`&&e.push(`
`),o!==null&&e.push(Bt(""+o)),null;case"input":e.push(An("input")),u=c=s=o=null;for(a in r)if(tr.call(r,a)&&(l=r[a],l!=null))switch(a){case"children":case"dangerouslySetInnerHTML":throw Error(Y(399,"input"));case"defaultChecked":u=l;break;case"defaultValue":s=l;break;case"checked":c=l;break;case"value":o=l;break;default:_r(e,n,a,l)}return c!==null?_r(e,n,"checked",c):u!==null&&_r(e,n,"checked",u),o!==null?_r(e,n,"value",o):s!==null&&_r(e,n,"value",s),e.push("/>"),null;case"menuitem":e.push(An("menuitem"));for(var p in r)if(tr.call(r,p)&&(o=r[p],o!=null))switch(p){case"children":case"dangerouslySetInnerHTML":throw Error(Y(400));default:_r(e,n,p,o)}return e.push(">"),null;case"title":e.push(An("title")),o=null;for(f in r)if(tr.call(r,f)&&(a=r[f],a!=null))switch(f){case"children":o=a;break;case"dangerouslySetInnerHTML":throw Error(Y(434));default:_r(e,n,f,a)}return e.push(">"),o;case"listing":case"pre":e.push(An(t)),a=o=null;for(u in r)if(tr.call(r,u)&&(s=r[u],s!=null))switch(u){case"children":o=s;break;case"dangerouslySetInnerHTML":a=s;break;default:_r(e,n,u,s)}if(e.push(">"),a!=null){if(o!=null)throw Error(Y(60));if(typeof a!="object"||!("__html"in a))throw Error(Y(61));r=a.__html,r!=null&&(typeof r=="string"&&0<r.length&&r[0]===`
`?e.push(`
`,r):e.push(""+r))}return typeof o=="string"&&o[0]===`
`&&e.push(`
`),o;case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":e.push(An(t));for(var d in r)if(tr.call(r,d)&&(o=r[d],o!=null))switch(d){case"children":case"dangerouslySetInnerHTML":throw Error(Y(399,t));default:_r(e,n,d,o)}return e.push("/>"),null;case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return ly(e,r,t,n);case"html":return i.insertionMode===0&&e.push("<!DOCTYPE html>"),ly(e,r,t,n);default:if(t.indexOf("-")===-1&&typeof r.is!="string")return ly(e,r,t,n);e.push(An(t)),a=o=null;for(l in r)if(tr.call(r,l)&&(s=r[l],s!=null))switch(l){case"children":o=s;break;case"dangerouslySetInnerHTML":a=s;break;case"style":UO(e,n,s);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":break;default:qO(l)&&typeof s!="function"&&typeof s!="symbol"&&e.push(" ",l,'="',Bt(s),'"')}return e.push(">"),zf(e,a,o),o}}function bO(e,t,r){if(e.push('<!--$?--><template id="'),r===null)throw Error(Y(395));return e.push(r),e.push('"></template>')}function Xq(e,t,r,n){switch(r.insertionMode){case 0:case 1:return e.push('<div hidden id="'),e.push(t.segmentPrefix),t=n.toString(16),e.push(t),e.push('">');case 2:return e.push('<svg aria-hidden="true" style="display:none" id="'),e.push(t.segmentPrefix),t=n.toString(16),e.push(t),e.push('">');case 3:return e.push('<math aria-hidden="true" style="display:none" id="'),e.push(t.segmentPrefix),t=n.toString(16),e.push(t),e.push('">');case 4:return e.push('<table hidden id="'),e.push(t.segmentPrefix),t=n.toString(16),e.push(t),e.push('">');case 5:return e.push('<table hidden><tbody id="'),e.push(t.segmentPrefix),t=n.toString(16),e.push(t),e.push('">');case 6:return e.push('<table hidden><tr id="'),e.push(t.segmentPrefix),t=n.toString(16),e.push(t),e.push('">');case 7:return e.push('<table hidden><colgroup id="'),e.push(t.segmentPrefix),t=n.toString(16),e.push(t),e.push('">');default:throw Error(Y(397))}}function Jq(e,t){switch(t.insertionMode){case 0:case 1:return e.push("</div>");case 2:return e.push("</svg>");case 3:return e.push("</math>");case 4:return e.push("</table>");case 5:return e.push("</tbody></table>");case 6:return e.push("</tr></table>");case 7:return e.push("</colgroup></table>");default:throw Error(Y(397))}}var Zq=/[<\u2028\u2029]/g;function cy(e){return JSON.stringify(e).replace(Zq,function(t){switch(t){case"<":return"\\u003c";case"\u2028":return"\\u2028";case"\u2029":return"\\u2029";default:throw Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React")}})}function eU(e,t){return t=t===void 0?"":t,{bootstrapChunks:[],startInlineScript:"<script>",placeholderPrefix:t+"P:",segmentPrefix:t+"S:",boundaryPrefix:t+"B:",idPrefix:t,nextSuspenseID:0,sentCompleteSegmentFunction:!1,sentCompleteBoundaryFunction:!1,sentClientRenderFunction:!1,generateStaticMarkup:e}}function SO(e,t,r,n){return r.generateStaticMarkup?(e.push(Bt(t)),!1):(t===""?e=n:(n&&e.push("<!-- -->"),e.push(Bt(t)),e=!0),e)}var Yu=Object.assign,tU=Symbol.for("react.element"),VO=Symbol.for("react.portal"),GO=Symbol.for("react.fragment"),$O=Symbol.for("react.strict_mode"),QO=Symbol.for("react.profiler"),KO=Symbol.for("react.provider"),BO=Symbol.for("react.context"),HO=Symbol.for("react.forward_ref"),zO=Symbol.for("react.suspense"),WO=Symbol.for("react.suspense_list"),YO=Symbol.for("react.memo"),Ey=Symbol.for("react.lazy"),rU=Symbol.for("react.scope"),nU=Symbol.for("react.debug_trace_mode"),iU=Symbol.for("react.legacy_hidden"),oU=Symbol.for("react.default_value"),wO=Symbol.iterator;function dy(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case GO:return"Fragment";case VO:return"Portal";case QO:return"Profiler";case $O:return"StrictMode";case zO:return"Suspense";case WO:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case BO:return(e.displayName||"Context")+".Consumer";case KO:return(e._context.displayName||"Context")+".Provider";case HO:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case YO:return t=e.displayName||null,t!==null?t:dy(e.type)||"Memo";case Ey:t=e._payload,e=e._init;try{return dy(e(t))}catch{}}return null}var XO={};function OO(e,t){if(e=e.contextTypes,!e)return XO;var r={},n;for(n in e)r[n]=t[n];return r}var zo=null;function np(e,t){if(e!==t){e.context._currentValue2=e.parentValue,e=e.parent;var r=t.parent;if(e===null){if(r!==null)throw Error(Y(401))}else{if(r===null)throw Error(Y(401));np(e,r)}t.context._currentValue2=t.value}}function JO(e){e.context._currentValue2=e.parentValue,e=e.parent,e!==null&&JO(e)}function ZO(e){var t=e.parent;t!==null&&ZO(t),e.context._currentValue2=e.value}function eN(e,t){if(e.context._currentValue2=e.parentValue,e=e.parent,e===null)throw Error(Y(402));e.depth===t.depth?np(e,t):eN(e,t)}function tN(e,t){var r=t.parent;if(r===null)throw Error(Y(402));e.depth===r.depth?np(e,r):tN(e,r),t.context._currentValue2=t.value}function Jf(e){var t=zo;t!==e&&(t===null?ZO(e):e===null?JO(t):t.depth===e.depth?np(t,e):t.depth>e.depth?eN(t,e):tN(t,e),zo=e)}var NO={isMounted:function(){return!1},enqueueSetState:function(e,t){e=e._reactInternals,e.queue!==null&&e.queue.push(t)},enqueueReplaceState:function(e,t){e=e._reactInternals,e.replace=!0,e.queue=[t]},enqueueForceUpdate:function(){}};function IO(e,t,r,n){var i=e.state!==void 0?e.state:null;e.updater=NO,e.props=r,e.state=i;var o={queue:[],replace:!1};e._reactInternals=o;var a=t.contextType;if(e.context=typeof a=="object"&&a!==null?a._currentValue2:n,a=t.getDerivedStateFromProps,typeof a=="function"&&(a=a(r,i),i=a==null?i:Yu({},i,a),e.state=i),typeof t.getDerivedStateFromProps!="function"&&typeof e.getSnapshotBeforeUpdate!="function"&&(typeof e.UNSAFE_componentWillMount=="function"||typeof e.componentWillMount=="function"))if(t=e.state,typeof e.componentWillMount=="function"&&e.componentWillMount(),typeof e.UNSAFE_componentWillMount=="function"&&e.UNSAFE_componentWillMount(),t!==e.state&&NO.enqueueReplaceState(e,e.state,null),o.queue!==null&&0<o.queue.length)if(t=o.queue,a=o.replace,o.queue=null,o.replace=!1,a&&t.length===1)e.state=t[0];else{for(o=a?t[0]:e.state,i=!0,a=a?1:0;a<t.length;a++){var s=t[a];s=typeof s=="function"?s.call(e,o,r,n):s,s!=null&&(i?(i=!1,o=Yu({},o,s)):Yu(o,s))}e.state=o}else o.queue=null}var aU={id:1,overflow:""};function hy(e,t,r){var n=e.id;e=e.overflow;var i=32-Wf(n)-1;n&=~(1<<i),r+=1;var o=32-Wf(t)+i;if(30<o){var a=i-i%5;return o=(n&(1<<a)-1).toString(32),n>>=a,i-=a,{id:1<<32-Wf(t)+i|r<<i|n,overflow:o+e}}return{id:1<<o|r<<i|n,overflow:e}}var Wf=Math.clz32?Math.clz32:lU,sU=Math.log,uU=Math.LN2;function lU(e){return e>>>=0,e===0?32:31-(sU(e)/uU|0)|0}function cU(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var fU=typeof Object.is=="function"?Object.is:cU,hi=null,Ty=null,Yf=null,Re=null,zu=!1,Zf=!1,Xu=0,$i=null,ip=0;function Ho(){if(hi===null)throw Error(Y(321));return hi}function RO(){if(0<ip)throw Error(Y(312));return{memoizedState:null,queue:null,next:null}}function _y(){return Re===null?Yf===null?(zu=!1,Yf=Re=RO()):(zu=!0,Re=Yf):Re.next===null?(zu=!1,Re=Re.next=RO()):(zu=!0,Re=Re.next),Re}function by(){Ty=hi=null,Zf=!1,Yf=null,ip=0,Re=$i=null}function rN(e,t){return typeof t=="function"?t(e):t}function LO(e,t,r){if(hi=Ho(),Re=_y(),zu){var n=Re.queue;if(t=n.dispatch,$i!==null&&(r=$i.get(n),r!==void 0)){$i.delete(n),n=Re.memoizedState;do n=e(n,r.action),r=r.next;while(r!==null);return Re.memoizedState=n,[n,t]}return[Re.memoizedState,t]}return e=e===rN?typeof t=="function"?t():t:r!==void 0?r(t):t,Re.memoizedState=e,e=Re.queue={last:null,dispatch:null},e=e.dispatch=pU.bind(null,hi,e),[Re.memoizedState,e]}function PO(e,t){if(hi=Ho(),Re=_y(),t=t===void 0?null:t,Re!==null){var r=Re.memoizedState;if(r!==null&&t!==null){var n=r[1];e:if(n===null)n=!1;else{for(var i=0;i<n.length&&i<t.length;i++)if(!fU(t[i],n[i])){n=!1;break e}n=!0}if(n)return r[0]}}return e=e(),Re.memoizedState=[e,t],e}function pU(e,t,r){if(25<=ip)throw Error(Y(301));if(e===hi)if(Zf=!0,e={action:r,next:null},$i===null&&($i=new Map),r=$i.get(t),r===void 0)$i.set(t,e);else{for(t=r;t.next!==null;)t=t.next;t.next=e}}function dU(){throw Error(Y(394))}function Kf(){}var xO={readContext:function(e){return e._currentValue2},useContext:function(e){return Ho(),e._currentValue2},useMemo:PO,useReducer:LO,useRef:function(e){hi=Ho(),Re=_y();var t=Re.memoizedState;return t===null?(e={current:e},Re.memoizedState=e):t},useState:function(e){return LO(rN,e)},useInsertionEffect:Kf,useLayoutEffect:function(){},useCallback:function(e,t){return PO(function(){return e},t)},useImperativeHandle:Kf,useEffect:Kf,useDebugValue:Kf,useDeferredValue:function(e){return Ho(),e},useTransition:function(){return Ho(),[!1,dU]},useId:function(){var e=Ty.treeContext,t=e.overflow;e=e.id,e=(e&~(1<<32-Wf(e)-1)).toString(32)+t;var r=Xf;if(r===null)throw Error(Y(404));return t=Xu++,e=":"+r.idPrefix+"R"+e,0<t&&(e+="H"+t.toString(32)),e+":"},useMutableSource:function(e,t){return Ho(),t(e._source)},useSyncExternalStore:function(e,t,r){if(r===void 0)throw Error(Y(407));return r()}},Xf=null,fy=MO.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentDispatcher;function hU(e){return console.error(e),null}function Wu(){}function mU(e,t,r,n,i,o,a,s,u){var l=[],c=new Set;return t={destination:null,responseState:t,progressiveChunkSize:n===void 0?12800:n,status:0,fatalError:null,nextSegmentId:0,allPendingTasks:0,pendingRootTasks:0,completedRootSegment:null,abortableTasks:c,pingedTasks:l,clientRenderedBoundaries:[],completedBoundaries:[],partialBoundaries:[],onError:i===void 0?hU:i,onAllReady:o===void 0?Wu:o,onShellReady:a===void 0?Wu:a,onShellError:s===void 0?Wu:s,onFatalError:u===void 0?Wu:u},r=ep(t,0,null,r,!1,!1),r.parentFlushed=!0,e=Sy(t,e,null,r,c,XO,null,aU),l.push(e),t}function Sy(e,t,r,n,i,o,a,s){e.allPendingTasks++,r===null?e.pendingRootTasks++:r.pendingTasks++;var u={node:t,ping:function(){var l=e.pingedTasks;l.push(u),l.length===1&&oN(e)},blockedBoundary:r,blockedSegment:n,abortSet:i,legacyContext:o,context:a,treeContext:s};return i.add(u),u}function ep(e,t,r,n,i,o){return{status:0,id:-1,index:t,parentFlushed:!1,chunks:[],children:[],formatContext:n,boundary:r,lastPushedText:i,textEmbedded:o}}function Ju(e,t){if(e=e.onError(t),e!=null&&typeof e!="string")throw Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "'+typeof e+'" instead');return e}function tp(e,t){var r=e.onShellError;r(t),r=e.onFatalError,r(t),e.destination!==null?(e.status=2,e.destination.destroy(t)):(e.status=1,e.fatalError=t)}function CO(e,t,r,n,i){for(hi={},Ty=t,Xu=0,e=r(n,i);Zf;)Zf=!1,Xu=0,ip+=1,Re=null,e=r(n,i);return by(),e}function kO(e,t,r,n){var i=r.render(),o=n.childContextTypes;if(o!=null){var a=t.legacyContext;if(typeof r.getChildContext!="function")n=a;else{r=r.getChildContext();for(var s in r)if(!(s in o))throw Error(Y(108,dy(n)||"Unknown",s));n=Yu({},a,r)}t.legacyContext=n,br(e,t,i),t.legacyContext=a}else br(e,t,i)}function DO(e,t){if(e&&e.defaultProps){t=Yu({},t),e=e.defaultProps;for(var r in e)t[r]===void 0&&(t[r]=e[r]);return t}return t}function my(e,t,r,n,i){if(typeof r=="function")if(r.prototype&&r.prototype.isReactComponent){i=OO(r,t.legacyContext);var o=r.contextType;o=new r(n,typeof o=="object"&&o!==null?o._currentValue2:i),IO(o,r,n,i),kO(e,t,o,r)}else{o=OO(r,t.legacyContext),i=CO(e,t,r,n,o);var a=Xu!==0;if(typeof i=="object"&&i!==null&&typeof i.render=="function"&&i.$$typeof===void 0)IO(i,r,n,o),kO(e,t,i,r);else if(a){n=t.treeContext,t.treeContext=hy(n,1,0);try{br(e,t,i)}finally{t.treeContext=n}}else br(e,t,i)}else if(typeof r=="string"){switch(i=t.blockedSegment,o=Yq(i.chunks,r,n,e.responseState,i.formatContext),i.lastPushedText=!1,a=i.formatContext,i.formatContext=Hq(a,r,n),vy(e,t,o),i.formatContext=a,r){case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"input":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":break;default:i.chunks.push("</",r,">")}i.lastPushedText=!1}else{switch(r){case iU:case nU:case $O:case QO:case GO:br(e,t,n.children);return;case WO:br(e,t,n.children);return;case rU:throw Error(Y(343));case zO:e:{r=t.blockedBoundary,i=t.blockedSegment,o=n.fallback,n=n.children,a=new Set;var s={id:null,rootSegmentID:-1,parentFlushed:!1,pendingTasks:0,forceClientRender:!1,completedSegments:[],byteSize:0,fallbackAbortableTasks:a,errorDigest:null},u=ep(e,i.chunks.length,s,i.formatContext,!1,!1);i.children.push(u),i.lastPushedText=!1;var l=ep(e,0,null,i.formatContext,!1,!1);l.parentFlushed=!0,t.blockedBoundary=s,t.blockedSegment=l;try{if(vy(e,t,n),e.responseState.generateStaticMarkup||l.lastPushedText&&l.textEmbedded&&l.chunks.push("<!-- -->"),l.status=1,rp(s,l),s.pendingTasks===0)break e}catch(c){l.status=4,s.forceClientRender=!0,s.errorDigest=Ju(e,c)}finally{t.blockedBoundary=r,t.blockedSegment=i}t=Sy(e,o,r,u,a,t.legacyContext,t.context,t.treeContext),e.pingedTasks.push(t)}return}if(typeof r=="object"&&r!==null)switch(r.$$typeof){case HO:if(n=CO(e,t,r.render,n,i),Xu!==0){r=t.treeContext,t.treeContext=hy(r,1,0);try{br(e,t,n)}finally{t.treeContext=r}}else br(e,t,n);return;case YO:r=r.type,n=DO(r,n),my(e,t,r,n,i);return;case KO:if(i=n.children,r=r._context,n=n.value,o=r._currentValue2,r._currentValue2=n,a=zo,zo=n={parent:a,depth:a===null?0:a.depth+1,context:r,parentValue:o,value:n},t.context=n,br(e,t,i),e=zo,e===null)throw Error(Y(403));n=e.parentValue,e.context._currentValue2=n===oU?e.context._defaultValue:n,e=zo=e.parent,t.context=e;return;case BO:n=n.children,n=n(r._currentValue2),br(e,t,n);return;case Ey:i=r._init,r=i(r._payload),n=DO(r,n),my(e,t,r,n,void 0);return}throw Error(Y(130,r==null?r:typeof r,""))}}function br(e,t,r){if(t.node=r,typeof r=="object"&&r!==null){switch(r.$$typeof){case tU:my(e,t,r.type,r.props,r.ref);return;case VO:throw Error(Y(257));case Ey:var n=r._init;r=n(r._payload),br(e,t,r);return}if(py(r)){AO(e,t,r);return}if(r===null||typeof r!="object"?n=null:(n=wO&&r[wO]||r["@@iterator"],n=typeof n=="function"?n:null),n&&(n=n.call(r))){if(r=n.next(),!r.done){var i=[];do i.push(r.value),r=n.next();while(!r.done);AO(e,t,i)}return}throw e=Object.prototype.toString.call(r),Error(Y(31,e==="[object Object]"?"object with keys {"+Object.keys(r).join(", ")+"}":e))}typeof r=="string"?(n=t.blockedSegment,n.lastPushedText=SO(t.blockedSegment.chunks,r,e.responseState,n.lastPushedText)):typeof r=="number"&&(n=t.blockedSegment,n.lastPushedText=SO(t.blockedSegment.chunks,""+r,e.responseState,n.lastPushedText))}function AO(e,t,r){for(var n=r.length,i=0;i<n;i++){var o=t.treeContext;t.treeContext=hy(o,n,i);try{vy(e,t,r[i])}finally{t.treeContext=o}}}function vy(e,t,r){var n=t.blockedSegment.formatContext,i=t.legacyContext,o=t.context;try{return br(e,t,r)}catch(u){if(by(),typeof u=="object"&&u!==null&&typeof u.then=="function"){r=u;var a=t.blockedSegment,s=ep(e,a.chunks.length,null,a.formatContext,a.lastPushedText,!0);a.children.push(s),a.lastPushedText=!1,e=Sy(e,t.node,t.blockedBoundary,s,t.abortSet,t.legacyContext,t.context,t.treeContext).ping,r.then(e,e),t.blockedSegment.formatContext=n,t.legacyContext=i,t.context=o,Jf(o)}else throw t.blockedSegment.formatContext=n,t.legacyContext=i,t.context=o,Jf(o),u}}function vU(e){var t=e.blockedBoundary;e=e.blockedSegment,e.status=3,iN(this,t,e)}function nN(e,t,r){var n=e.blockedBoundary;e.blockedSegment.status=3,n===null?(t.allPendingTasks--,t.status!==2&&(t.status=2,t.destination!==null&&t.destination.push(null))):(n.pendingTasks--,n.forceClientRender||(n.forceClientRender=!0,e=r===void 0?Error(Y(432)):r,n.errorDigest=t.onError(e),n.parentFlushed&&t.clientRenderedBoundaries.push(n)),n.fallbackAbortableTasks.forEach(function(i){return nN(i,t,r)}),n.fallbackAbortableTasks.clear(),t.allPendingTasks--,t.allPendingTasks===0&&(n=t.onAllReady,n()))}function rp(e,t){if(t.chunks.length===0&&t.children.length===1&&t.children[0].boundary===null){var r=t.children[0];r.id=t.id,r.parentFlushed=!0,r.status===1&&rp(e,r)}else e.completedSegments.push(t)}function iN(e,t,r){if(t===null){if(r.parentFlushed){if(e.completedRootSegment!==null)throw Error(Y(389));e.completedRootSegment=r}e.pendingRootTasks--,e.pendingRootTasks===0&&(e.onShellError=Wu,t=e.onShellReady,t())}else t.pendingTasks--,t.forceClientRender||(t.pendingTasks===0?(r.parentFlushed&&r.status===1&&rp(t,r),t.parentFlushed&&e.completedBoundaries.push(t),t.fallbackAbortableTasks.forEach(vU,e),t.fallbackAbortableTasks.clear()):r.parentFlushed&&r.status===1&&(rp(t,r),t.completedSegments.length===1&&t.parentFlushed&&e.partialBoundaries.push(t)));e.allPendingTasks--,e.allPendingTasks===0&&(e=e.onAllReady,e())}function oN(e){if(e.status!==2){var t=zo,r=fy.current;fy.current=xO;var n=Xf;Xf=e.responseState;try{var i=e.pingedTasks,o;for(o=0;o<i.length;o++){var a=i[o],s=e,u=a.blockedSegment;if(u.status===0){Jf(a.context);try{br(s,a,a.node),s.responseState.generateStaticMarkup||u.lastPushedText&&u.textEmbedded&&u.chunks.push("<!-- -->"),a.abortSet.delete(a),u.status=1,iN(s,a.blockedBoundary,u)}catch(m){if(by(),typeof m=="object"&&m!==null&&typeof m.then=="function"){var l=a.ping;m.then(l,l)}else{a.abortSet.delete(a),u.status=4;var c=a.blockedBoundary,f=m,p=Ju(s,f);if(c===null?tp(s,f):(c.pendingTasks--,c.forceClientRender||(c.forceClientRender=!0,c.errorDigest=p,c.parentFlushed&&s.clientRenderedBoundaries.push(c))),s.allPendingTasks--,s.allPendingTasks===0){var d=s.onAllReady;d()}}}finally{}}}i.splice(0,o),e.destination!==null&&wy(e,e.destination)}catch(m){Ju(e,m),tp(e,m)}finally{Xf=n,fy.current=r,r===xO&&Jf(t)}}}function Bf(e,t,r){switch(r.parentFlushed=!0,r.status){case 0:var n=r.id=e.nextSegmentId++;return r.lastPushedText=!1,r.textEmbedded=!1,e=e.responseState,t.push('<template id="'),t.push(e.placeholderPrefix),e=n.toString(16),t.push(e),t.push('"></template>');case 1:r.status=2;var i=!0;n=r.chunks;var o=0;r=r.children;for(var a=0;a<r.length;a++){for(i=r[a];o<i.index;o++)t.push(n[o]);i=op(e,t,i)}for(;o<n.length-1;o++)t.push(n[o]);return o<n.length&&(i=t.push(n[o])),i;default:throw Error(Y(390))}}function op(e,t,r){var n=r.boundary;if(n===null)return Bf(e,t,r);if(n.parentFlushed=!0,n.forceClientRender)return e.responseState.generateStaticMarkup||(n=n.errorDigest,t.push("<!--$!-->"),t.push("<template"),n&&(t.push(' data-dgst="'),n=Bt(n),t.push(n),t.push('"')),t.push("></template>")),Bf(e,t,r),e=e.responseState.generateStaticMarkup?!0:t.push("<!--/$-->"),e;if(0<n.pendingTasks){n.rootSegmentID=e.nextSegmentId++,0<n.completedSegments.length&&e.partialBoundaries.push(n);var i=e.responseState,o=i.nextSuspenseID++;return i=i.boundaryPrefix+o.toString(16),n=n.id=i,bO(t,e.responseState,n),Bf(e,t,r),t.push("<!--/$-->")}if(n.byteSize>e.progressiveChunkSize)return n.rootSegmentID=e.nextSegmentId++,e.completedBoundaries.push(n),bO(t,e.responseState,n.id),Bf(e,t,r),t.push("<!--/$-->");if(e.responseState.generateStaticMarkup||t.push("<!--$-->"),r=n.completedSegments,r.length!==1)throw Error(Y(391));return op(e,t,r[0]),e=e.responseState.generateStaticMarkup?!0:t.push("<!--/$-->"),e}function jO(e,t,r){return Xq(t,e.responseState,r.formatContext,r.id),op(e,t,r),Jq(t,r.formatContext)}function FO(e,t,r){for(var n=r.completedSegments,i=0;i<n.length;i++)aN(e,t,r,n[i]);if(n.length=0,e=e.responseState,n=r.id,r=r.rootSegmentID,t.push(e.startInlineScript),e.sentCompleteBoundaryFunction?t.push('$RC("'):(e.sentCompleteBoundaryFunction=!0,t.push('function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}};$RC("')),n===null)throw Error(Y(395));return r=r.toString(16),t.push(n),t.push('","'),t.push(e.segmentPrefix),t.push(r),t.push('")<\/script>')}function aN(e,t,r,n){if(n.status===2)return!0;var i=n.id;if(i===-1){if((n.id=r.rootSegmentID)===-1)throw Error(Y(392));return jO(e,t,n)}return jO(e,t,n),e=e.responseState,t.push(e.startInlineScript),e.sentCompleteSegmentFunction?t.push('$RS("'):(e.sentCompleteSegmentFunction=!0,t.push('function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};$RS("')),t.push(e.segmentPrefix),i=i.toString(16),t.push(i),t.push('","'),t.push(e.placeholderPrefix),t.push(i),t.push('")<\/script>')}function wy(e,t){try{var r=e.completedRootSegment;if(r!==null&&e.pendingRootTasks===0){op(e,t,r),e.completedRootSegment=null;var n=e.responseState.bootstrapChunks;for(r=0;r<n.length-1;r++)t.push(n[r]);r<n.length&&t.push(n[r])}var i=e.clientRenderedBoundaries,o;for(o=0;o<i.length;o++){var a=i[o];n=t;var s=e.responseState,u=a.id,l=a.errorDigest,c=a.errorMessage,f=a.errorComponentStack;if(n.push(s.startInlineScript),s.sentClientRenderFunction?n.push('$RX("'):(s.sentClientRenderFunction=!0,n.push('function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};$RX("')),u===null)throw Error(Y(395));if(n.push(u),n.push('"'),l||c||f){n.push(",");var p=cy(l||"");n.push(p)}if(c||f){n.push(",");var d=cy(c||"");n.push(d)}if(f){n.push(",");var m=cy(f);n.push(m)}if(!n.push(")<\/script>")){e.destination=null,o++,i.splice(0,o);return}}i.splice(0,o);var E=e.completedBoundaries;for(o=0;o<E.length;o++)if(!FO(e,t,E[o])){e.destination=null,o++,E.splice(0,o);return}E.splice(0,o);var b=e.partialBoundaries;for(o=0;o<b.length;o++){var h=b[o];e:{i=e,a=t;var v=h.completedSegments;for(s=0;s<v.length;s++)if(!aN(i,a,h,v[s])){s++,v.splice(0,s);var g=!1;break e}v.splice(0,s),g=!0}if(!g){e.destination=null,o++,b.splice(0,o);return}}b.splice(0,o);var _=e.completedBoundaries;for(o=0;o<_.length;o++)if(!FO(e,t,_[o])){e.destination=null,o++,_.splice(0,o);return}_.splice(0,o)}finally{e.allPendingTasks===0&&e.pingedTasks.length===0&&e.clientRenderedBoundaries.length===0&&e.completedBoundaries.length===0&&t.push(null)}}function yU(e,t){try{var r=e.abortableTasks;r.forEach(function(n){return nN(n,e,t)}),r.clear(),e.destination!==null&&wy(e,e.destination)}catch(n){Ju(e,n),tp(e,n)}}function gU(){}function sN(e,t,r,n){var i=!1,o=null,a="",s={push:function(l){return l!==null&&(a+=l),!0},destroy:function(l){i=!0,o=l}},u=!1;if(e=mU(e,eU(r,t?t.identifierPrefix:void 0),{insertionMode:1,selectedValue:null},1/0,gU,void 0,function(){u=!0},void 0,void 0),oN(e),yU(e,n),e.status===1)e.status=2,s.destroy(e.fatalError);else if(e.status!==2&&e.destination===null){e.destination=s;try{wy(e,s)}catch(l){Ju(e,l),tp(e,l)}}if(i)throw o;if(!u)throw Error(Y(426));return a}Ya.renderToNodeStream=function(){throw Error(Y(207))};Ya.renderToStaticMarkup=function(e,t){return sN(e,t,!0,'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server')};Ya.renderToStaticNodeStream=function(){throw Error(Y(208))};Ya.renderToString=function(e,t){return sN(e,t,!1,'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server')};Ya.version="18.2.0"});var a1=y(Ky=>{"use strict";var AN=ve();function J(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var wr=null,Or=0;function V(e,t){if(t.length!==0)if(512<t.length)0<Or&&(e.enqueue(new Uint8Array(wr.buffer,0,Or)),wr=new Uint8Array(512),Or=0),e.enqueue(t);else{var r=wr.length-Or;r<t.length&&(r===0?e.enqueue(wr):(wr.set(t.subarray(0,r),Or),e.enqueue(wr),t=t.subarray(r)),wr=new Uint8Array(512),Or=0),wr.set(t,Or),Or+=t.length}}function De(e,t){return V(e,t),!0}function lN(e){wr&&0<Or&&(e.enqueue(new Uint8Array(wr.buffer,0,Or)),wr=null,Or=0)}var jN=new TextEncoder;function te(e){return jN.encode(e)}function D(e){return jN.encode(e)}function FN(e,t){typeof e.error=="function"?e.error(t):e.close()}var rr=Object.prototype.hasOwnProperty,EU=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,cN={},fN={};function MN(e){return rr.call(fN,e)?!0:rr.call(cN,e)?!1:EU.test(e)?fN[e]=!0:(cN[e]=!0,!1)}function zt(e,t,r,n,i,o,a){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=n,this.attributeNamespace=i,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=a}var St={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){St[e]=new zt(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];St[t]=new zt(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){St[e]=new zt(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){St[e]=new zt(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){St[e]=new zt(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){St[e]=new zt(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){St[e]=new zt(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){St[e]=new zt(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){St[e]=new zt(e,5,!1,e.toLowerCase(),null,!1,!1)});var jy=/[\-:]([a-z])/g;function Fy(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(jy,Fy);St[t]=new zt(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(jy,Fy);St[t]=new zt(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(jy,Fy);St[t]=new zt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){St[e]=new zt(e,1,!1,e.toLowerCase(),null,!1,!1)});St.xlinkHref=new zt("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){St[e]=new zt(e,1,!1,e.toLowerCase(),null,!0,!0)});var up={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},TU=["Webkit","ms","Moz","O"];Object.keys(up).forEach(function(e){TU.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),up[t]=up[e]})});var _U=/["'&<>]/;function bt(e){if(typeof e=="boolean"||typeof e=="number")return""+e;e=""+e;var t=_U.exec(e);if(t){var r="",n,i=0;for(n=t.index;n<e.length;n++){switch(e.charCodeAt(n)){case 34:t="&quot;";break;case 38:t="&amp;";break;case 39:t="&#x27;";break;case 60:t="&lt;";break;case 62:t="&gt;";break;default:continue}i!==n&&(r+=e.substring(i,n)),i=n+1,r+=t}e=i!==n?r+e.substring(i,n):r}return e}var bU=/([A-Z])/g,SU=/^ms-/,xy=Array.isArray,wU=D("<script>"),OU=D("<\/script>"),NU=D('<script src="'),IU=D('<script type="module" src="'),pN=D('" async=""><\/script>'),RU=/(<\/|<)(s)(cript)/gi;function LU(e,t,r,n){return""+t+(r==="s"?"\\u0073":"\\u0053")+n}function PU(e,t,r,n,i){e=e===void 0?"":e,t=t===void 0?wU:D('<script nonce="'+bt(t)+'">');var o=[];if(r!==void 0&&o.push(t,te((""+r).replace(RU,LU)),OU),n!==void 0)for(r=0;r<n.length;r++)o.push(NU,te(bt(n[r])),pN);if(i!==void 0)for(n=0;n<i.length;n++)o.push(IU,te(bt(i[n])),pN);return{bootstrapChunks:o,startInlineScript:t,placeholderPrefix:D(e+"P:"),segmentPrefix:D(e+"S:"),boundaryPrefix:e+"B:",idPrefix:e,nextSuspenseID:0,sentCompleteSegmentFunction:!1,sentCompleteBoundaryFunction:!1,sentClientRenderFunction:!1}}function jn(e,t){return{insertionMode:e,selectedValue:t}}function xU(e){return jn(e==="http://www.w3.org/2000/svg"?2:e==="http://www.w3.org/1998/Math/MathML"?3:0,null)}function CU(e,t,r){switch(t){case"select":return jn(1,r.value!=null?r.value:r.defaultValue);case"svg":return jn(2,null);case"math":return jn(3,null);case"foreignObject":return jn(1,null);case"table":return jn(4,null);case"thead":case"tbody":case"tfoot":return jn(5,null);case"colgroup":return jn(7,null);case"tr":return jn(6,null)}return 4<=e.insertionMode||e.insertionMode===0?jn(1,null):e}var My=D("<!-- -->");function dN(e,t,r,n){return t===""?n:(n&&e.push(My),e.push(te(bt(t))),!0)}var hN=new Map,kU=D(' style="'),mN=D(":"),DU=D(";");function qN(e,t,r){if(typeof r!="object")throw Error(J(62));t=!0;for(var n in r)if(rr.call(r,n)){var i=r[n];if(i!=null&&typeof i!="boolean"&&i!==""){if(n.indexOf("--")===0){var o=te(bt(n));i=te(bt((""+i).trim()))}else{o=n;var a=hN.get(o);a!==void 0||(a=D(bt(o.replace(bU,"-$1").toLowerCase().replace(SU,"-ms-"))),hN.set(o,a)),o=a,i=typeof i=="number"?i===0||rr.call(up,n)?te(""+i):te(i+"px"):te(bt((""+i).trim()))}t?(t=!1,e.push(kU,o,mN,i)):e.push(DU,o,mN,i)}}t||e.push(Wo)}var Qi=D(" "),Xa=D('="'),Wo=D('"'),vN=D('=""');function Sr(e,t,r,n){switch(r){case"style":qN(e,t,n);return;case"defaultValue":case"defaultChecked":case"innerHTML":case"suppressContentEditableWarning":case"suppressHydrationWarning":return}if(!(2<r.length)||r[0]!=="o"&&r[0]!=="O"||r[1]!=="n"&&r[1]!=="N"){if(t=St.hasOwnProperty(r)?St[r]:null,t!==null){switch(typeof n){case"function":case"symbol":return;case"boolean":if(!t.acceptsBooleans)return}switch(r=te(t.attributeName),t.type){case 3:n&&e.push(Qi,r,vN);break;case 4:n===!0?e.push(Qi,r,vN):n!==!1&&e.push(Qi,r,Xa,te(bt(n)),Wo);break;case 5:isNaN(n)||e.push(Qi,r,Xa,te(bt(n)),Wo);break;case 6:!isNaN(n)&&1<=n&&e.push(Qi,r,Xa,te(bt(n)),Wo);break;default:t.sanitizeURL&&(n=""+n),e.push(Qi,r,Xa,te(bt(n)),Wo)}}else if(MN(r)){switch(typeof n){case"function":case"symbol":return;case"boolean":if(t=r.toLowerCase().slice(0,5),t!=="data-"&&t!=="aria-")return}e.push(Qi,te(r),Xa,te(bt(n)),Wo)}}}var Ki=D(">"),yN=D("/>");function lp(e,t,r){if(t!=null){if(r!=null)throw Error(J(60));if(typeof t!="object"||!("__html"in t))throw Error(J(61));t=t.__html,t!=null&&e.push(te(""+t))}}function AU(e){var t="";return AN.Children.forEach(e,function(r){r!=null&&(t+=r)}),t}var Oy=D(' selected=""');function Ny(e,t,r,n){e.push(Fn(r));var i=r=null,o;for(o in t)if(rr.call(t,o)){var a=t[o];if(a!=null)switch(o){case"children":r=a;break;case"dangerouslySetInnerHTML":i=a;break;default:Sr(e,n,o,a)}}return e.push(Ki),lp(e,i,r),typeof r=="string"?(e.push(te(bt(r))),null):r}var Iy=D(`
`),jU=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,gN=new Map;function Fn(e){var t=gN.get(e);if(t===void 0){if(!jU.test(e))throw Error(J(65,e));t=D("<"+e),gN.set(e,t)}return t}var FU=D("<!DOCTYPE html>");function MU(e,t,r,n,i){switch(t){case"select":e.push(Fn("select"));var o=null,a=null;for(c in r)if(rr.call(r,c)){var s=r[c];if(s!=null)switch(c){case"children":o=s;break;case"dangerouslySetInnerHTML":a=s;break;case"defaultValue":case"value":break;default:Sr(e,n,c,s)}}return e.push(Ki),lp(e,a,o),o;case"option":a=i.selectedValue,e.push(Fn("option"));var u=s=null,l=null,c=null;for(o in r)if(rr.call(r,o)){var f=r[o];if(f!=null)switch(o){case"children":s=f;break;case"selected":l=f;break;case"dangerouslySetInnerHTML":c=f;break;case"value":u=f;default:Sr(e,n,o,f)}}if(a!=null)if(r=u!==null?""+u:AU(s),xy(a)){for(n=0;n<a.length;n++)if(""+a[n]===r){e.push(Oy);break}}else""+a===r&&e.push(Oy);else l&&e.push(Oy);return e.push(Ki),lp(e,c,s),s;case"textarea":e.push(Fn("textarea")),c=a=o=null;for(s in r)if(rr.call(r,s)&&(u=r[s],u!=null))switch(s){case"children":c=u;break;case"value":o=u;break;case"defaultValue":a=u;break;case"dangerouslySetInnerHTML":throw Error(J(91));default:Sr(e,n,s,u)}if(o===null&&a!==null&&(o=a),e.push(Ki),c!=null){if(o!=null)throw Error(J(92));if(xy(c)&&1<c.length)throw Error(J(93));o=""+c}return typeof o=="string"&&o[0]===`
`&&e.push(Iy),o!==null&&e.push(te(bt(""+o))),null;case"input":e.push(Fn("input")),u=c=s=o=null;for(a in r)if(rr.call(r,a)&&(l=r[a],l!=null))switch(a){case"children":case"dangerouslySetInnerHTML":throw Error(J(399,"input"));case"defaultChecked":u=l;break;case"defaultValue":s=l;break;case"checked":c=l;break;case"value":o=l;break;default:Sr(e,n,a,l)}return c!==null?Sr(e,n,"checked",c):u!==null&&Sr(e,n,"checked",u),o!==null?Sr(e,n,"value",o):s!==null&&Sr(e,n,"value",s),e.push(yN),null;case"menuitem":e.push(Fn("menuitem"));for(var p in r)if(rr.call(r,p)&&(o=r[p],o!=null))switch(p){case"children":case"dangerouslySetInnerHTML":throw Error(J(400));default:Sr(e,n,p,o)}return e.push(Ki),null;case"title":e.push(Fn("title")),o=null;for(f in r)if(rr.call(r,f)&&(a=r[f],a!=null))switch(f){case"children":o=a;break;case"dangerouslySetInnerHTML":throw Error(J(434));default:Sr(e,n,f,a)}return e.push(Ki),o;case"listing":case"pre":e.push(Fn(t)),a=o=null;for(u in r)if(rr.call(r,u)&&(s=r[u],s!=null))switch(u){case"children":o=s;break;case"dangerouslySetInnerHTML":a=s;break;default:Sr(e,n,u,s)}if(e.push(Ki),a!=null){if(o!=null)throw Error(J(60));if(typeof a!="object"||!("__html"in a))throw Error(J(61));r=a.__html,r!=null&&(typeof r=="string"&&0<r.length&&r[0]===`
`?e.push(Iy,te(r)):e.push(te(""+r)))}return typeof o=="string"&&o[0]===`
`&&e.push(Iy),o;case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":e.push(Fn(t));for(var d in r)if(rr.call(r,d)&&(o=r[d],o!=null))switch(d){case"children":case"dangerouslySetInnerHTML":throw Error(J(399,t));default:Sr(e,n,d,o)}return e.push(yN),null;case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return Ny(e,r,t,n);case"html":return i.insertionMode===0&&e.push(FU),Ny(e,r,t,n);default:if(t.indexOf("-")===-1&&typeof r.is!="string")return Ny(e,r,t,n);e.push(Fn(t)),a=o=null;for(l in r)if(rr.call(r,l)&&(s=r[l],s!=null))switch(l){case"children":o=s;break;case"dangerouslySetInnerHTML":a=s;break;case"style":qN(e,n,s);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":break;default:MN(l)&&typeof s!="function"&&typeof s!="symbol"&&e.push(Qi,te(l),Xa,te(bt(s)),Wo)}return e.push(Ki),lp(e,a,o),o}}var qU=D("</"),UU=D(">"),VU=D('<template id="'),GU=D('"></template>'),$U=D("<!--$-->"),QU=D('<!--$?--><template id="'),KU=D('"></template>'),BU=D("<!--$!-->"),HU=D("<!--/$-->"),zU=D("<template"),WU=D('"'),YU=D(' data-dgst="');D(' data-msg="');D(' data-stck="');var XU=D("></template>");function EN(e,t,r){if(V(e,QU),r===null)throw Error(J(395));return V(e,r),De(e,KU)}var JU=D('<div hidden id="'),ZU=D('">'),e2=D("</div>"),t2=D('<svg aria-hidden="true" style="display:none" id="'),r2=D('">'),n2=D("</svg>"),i2=D('<math aria-hidden="true" style="display:none" id="'),o2=D('">'),a2=D("</math>"),s2=D('<table hidden id="'),u2=D('">'),l2=D("</table>"),c2=D('<table hidden><tbody id="'),f2=D('">'),p2=D("</tbody></table>"),d2=D('<table hidden><tr id="'),h2=D('">'),m2=D("</tr></table>"),v2=D('<table hidden><colgroup id="'),y2=D('">'),g2=D("</colgroup></table>");function E2(e,t,r,n){switch(r.insertionMode){case 0:case 1:return V(e,JU),V(e,t.segmentPrefix),V(e,te(n.toString(16))),De(e,ZU);case 2:return V(e,t2),V(e,t.segmentPrefix),V(e,te(n.toString(16))),De(e,r2);case 3:return V(e,i2),V(e,t.segmentPrefix),V(e,te(n.toString(16))),De(e,o2);case 4:return V(e,s2),V(e,t.segmentPrefix),V(e,te(n.toString(16))),De(e,u2);case 5:return V(e,c2),V(e,t.segmentPrefix),V(e,te(n.toString(16))),De(e,f2);case 6:return V(e,d2),V(e,t.segmentPrefix),V(e,te(n.toString(16))),De(e,h2);case 7:return V(e,v2),V(e,t.segmentPrefix),V(e,te(n.toString(16))),De(e,y2);default:throw Error(J(397))}}function T2(e,t){switch(t.insertionMode){case 0:case 1:return De(e,e2);case 2:return De(e,n2);case 3:return De(e,a2);case 4:return De(e,l2);case 5:return De(e,p2);case 6:return De(e,m2);case 7:return De(e,g2);default:throw Error(J(397))}}var _2=D('function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};$RS("'),b2=D('$RS("'),S2=D('","'),w2=D('")<\/script>'),O2=D('function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}};$RC("'),N2=D('$RC("'),I2=D('","'),R2=D('")<\/script>'),L2=D('function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};$RX("'),P2=D('$RX("'),x2=D('"'),C2=D(")<\/script>"),Ry=D(","),k2=/[<\u2028\u2029]/g;function Ly(e){return JSON.stringify(e).replace(k2,function(t){switch(t){case"<":return"\\u003c";case"\u2028":return"\\u2028";case"\u2029":return"\\u2029";default:throw Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React")}})}var tl=Object.assign,D2=Symbol.for("react.element"),UN=Symbol.for("react.portal"),VN=Symbol.for("react.fragment"),GN=Symbol.for("react.strict_mode"),$N=Symbol.for("react.profiler"),QN=Symbol.for("react.provider"),KN=Symbol.for("react.context"),BN=Symbol.for("react.forward_ref"),HN=Symbol.for("react.suspense"),zN=Symbol.for("react.suspense_list"),WN=Symbol.for("react.memo"),qy=Symbol.for("react.lazy"),A2=Symbol.for("react.scope"),j2=Symbol.for("react.debug_trace_mode"),F2=Symbol.for("react.legacy_hidden"),M2=Symbol.for("react.default_value"),TN=Symbol.iterator;function Cy(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case VN:return"Fragment";case UN:return"Portal";case $N:return"Profiler";case GN:return"StrictMode";case HN:return"Suspense";case zN:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case KN:return(e.displayName||"Context")+".Consumer";case QN:return(e._context.displayName||"Context")+".Provider";case BN:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case WN:return t=e.displayName||null,t!==null?t:Cy(e.type)||"Memo";case qy:t=e._payload,e=e._init;try{return Cy(e(t))}catch{}}return null}var YN={};function _N(e,t){if(e=e.contextTypes,!e)return YN;var r={},n;for(n in e)r[n]=t[n];return r}var Xo=null;function gp(e,t){if(e!==t){e.context._currentValue=e.parentValue,e=e.parent;var r=t.parent;if(e===null){if(r!==null)throw Error(J(401))}else{if(r===null)throw Error(J(401));gp(e,r)}t.context._currentValue=t.value}}function XN(e){e.context._currentValue=e.parentValue,e=e.parent,e!==null&&XN(e)}function JN(e){var t=e.parent;t!==null&&JN(t),e.context._currentValue=e.value}function ZN(e,t){if(e.context._currentValue=e.parentValue,e=e.parent,e===null)throw Error(J(402));e.depth===t.depth?gp(e,t):ZN(e,t)}function e1(e,t){var r=t.parent;if(r===null)throw Error(J(402));e.depth===r.depth?gp(e,r):e1(e,r),t.context._currentValue=t.value}function dp(e){var t=Xo;t!==e&&(t===null?JN(e):e===null?XN(t):t.depth===e.depth?gp(t,e):t.depth>e.depth?ZN(t,e):e1(t,e),Xo=e)}var bN={isMounted:function(){return!1},enqueueSetState:function(e,t){e=e._reactInternals,e.queue!==null&&e.queue.push(t)},enqueueReplaceState:function(e,t){e=e._reactInternals,e.replace=!0,e.queue=[t]},enqueueForceUpdate:function(){}};function SN(e,t,r,n){var i=e.state!==void 0?e.state:null;e.updater=bN,e.props=r,e.state=i;var o={queue:[],replace:!1};e._reactInternals=o;var a=t.contextType;if(e.context=typeof a=="object"&&a!==null?a._currentValue:n,a=t.getDerivedStateFromProps,typeof a=="function"&&(a=a(r,i),i=a==null?i:tl({},i,a),e.state=i),typeof t.getDerivedStateFromProps!="function"&&typeof e.getSnapshotBeforeUpdate!="function"&&(typeof e.UNSAFE_componentWillMount=="function"||typeof e.componentWillMount=="function"))if(t=e.state,typeof e.componentWillMount=="function"&&e.componentWillMount(),typeof e.UNSAFE_componentWillMount=="function"&&e.UNSAFE_componentWillMount(),t!==e.state&&bN.enqueueReplaceState(e,e.state,null),o.queue!==null&&0<o.queue.length)if(t=o.queue,a=o.replace,o.queue=null,o.replace=!1,a&&t.length===1)e.state=t[0];else{for(o=a?t[0]:e.state,i=!0,a=a?1:0;a<t.length;a++){var s=t[a];s=typeof s=="function"?s.call(e,o,r,n):s,s!=null&&(i?(i=!1,o=tl({},o,s)):tl(o,s))}e.state=o}else o.queue=null}var q2={id:1,overflow:""};function ky(e,t,r){var n=e.id;e=e.overflow;var i=32-cp(n)-1;n&=~(1<<i),r+=1;var o=32-cp(t)+i;if(30<o){var a=i-i%5;return o=(n&(1<<a)-1).toString(32),n>>=a,i-=a,{id:1<<32-cp(t)+i|r<<i|n,overflow:o+e}}return{id:1<<o|r<<i|n,overflow:e}}var cp=Math.clz32?Math.clz32:G2,U2=Math.log,V2=Math.LN2;function G2(e){return e>>>=0,e===0?32:31-(U2(e)/V2|0)|0}function $2(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var Q2=typeof Object.is=="function"?Object.is:$2,mi=null,Uy=null,fp=null,Le=null,Zu=!1,hp=!1,rl=0,Bi=null,Ep=0;function Yo(){if(mi===null)throw Error(J(321));return mi}function wN(){if(0<Ep)throw Error(J(312));return{memoizedState:null,queue:null,next:null}}function Vy(){return Le===null?fp===null?(Zu=!1,fp=Le=wN()):(Zu=!0,Le=fp):Le.next===null?(Zu=!1,Le=Le.next=wN()):(Zu=!0,Le=Le.next),Le}function Gy(){Uy=mi=null,hp=!1,fp=null,Ep=0,Le=Bi=null}function t1(e,t){return typeof t=="function"?t(e):t}function ON(e,t,r){if(mi=Yo(),Le=Vy(),Zu){var n=Le.queue;if(t=n.dispatch,Bi!==null&&(r=Bi.get(n),r!==void 0)){Bi.delete(n),n=Le.memoizedState;do n=e(n,r.action),r=r.next;while(r!==null);return Le.memoizedState=n,[n,t]}return[Le.memoizedState,t]}return e=e===t1?typeof t=="function"?t():t:r!==void 0?r(t):t,Le.memoizedState=e,e=Le.queue={last:null,dispatch:null},e=e.dispatch=K2.bind(null,mi,e),[Le.memoizedState,e]}function NN(e,t){if(mi=Yo(),Le=Vy(),t=t===void 0?null:t,Le!==null){var r=Le.memoizedState;if(r!==null&&t!==null){var n=r[1];e:if(n===null)n=!1;else{for(var i=0;i<n.length&&i<t.length;i++)if(!Q2(t[i],n[i])){n=!1;break e}n=!0}if(n)return r[0]}}return e=e(),Le.memoizedState=[e,t],e}function K2(e,t,r){if(25<=Ep)throw Error(J(301));if(e===mi)if(hp=!0,e={action:r,next:null},Bi===null&&(Bi=new Map),r=Bi.get(t),r===void 0)Bi.set(t,e);else{for(t=r;t.next!==null;)t=t.next;t.next=e}}function B2(){throw Error(J(394))}function ap(){}var IN={readContext:function(e){return e._currentValue},useContext:function(e){return Yo(),e._currentValue},useMemo:NN,useReducer:ON,useRef:function(e){mi=Yo(),Le=Vy();var t=Le.memoizedState;return t===null?(e={current:e},Le.memoizedState=e):t},useState:function(e){return ON(t1,e)},useInsertionEffect:ap,useLayoutEffect:function(){},useCallback:function(e,t){return NN(function(){return e},t)},useImperativeHandle:ap,useEffect:ap,useDebugValue:ap,useDeferredValue:function(e){return Yo(),e},useTransition:function(){return Yo(),[!1,B2]},useId:function(){var e=Uy.treeContext,t=e.overflow;e=e.id,e=(e&~(1<<32-cp(e)-1)).toString(32)+t;var r=pp;if(r===null)throw Error(J(404));return t=rl++,e=":"+r.idPrefix+"R"+e,0<t&&(e+="H"+t.toString(32)),e+":"},useMutableSource:function(e,t){return Yo(),t(e._source)},useSyncExternalStore:function(e,t,r){if(r===void 0)throw Error(J(407));return r()}},pp=null,Py=AN.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentDispatcher;function H2(e){return console.error(e),null}function el(){}function z2(e,t,r,n,i,o,a,s,u){var l=[],c=new Set;return t={destination:null,responseState:t,progressiveChunkSize:n===void 0?12800:n,status:0,fatalError:null,nextSegmentId:0,allPendingTasks:0,pendingRootTasks:0,completedRootSegment:null,abortableTasks:c,pingedTasks:l,clientRenderedBoundaries:[],completedBoundaries:[],partialBoundaries:[],onError:i===void 0?H2:i,onAllReady:o===void 0?el:o,onShellReady:a===void 0?el:a,onShellError:s===void 0?el:s,onFatalError:u===void 0?el:u},r=mp(t,0,null,r,!1,!1),r.parentFlushed=!0,e=$y(t,e,null,r,c,YN,null,q2),l.push(e),t}function $y(e,t,r,n,i,o,a,s){e.allPendingTasks++,r===null?e.pendingRootTasks++:r.pendingTasks++;var u={node:t,ping:function(){var l=e.pingedTasks;l.push(u),l.length===1&&i1(e)},blockedBoundary:r,blockedSegment:n,abortSet:i,legacyContext:o,context:a,treeContext:s};return i.add(u),u}function mp(e,t,r,n,i,o){return{status:0,id:-1,index:t,parentFlushed:!1,chunks:[],children:[],formatContext:n,boundary:r,lastPushedText:i,textEmbedded:o}}function nl(e,t){if(e=e.onError(t),e!=null&&typeof e!="string")throw Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "'+typeof e+'" instead');return e}function vp(e,t){var r=e.onShellError;r(t),r=e.onFatalError,r(t),e.destination!==null?(e.status=2,FN(e.destination,t)):(e.status=1,e.fatalError=t)}function RN(e,t,r,n,i){for(mi={},Uy=t,rl=0,e=r(n,i);hp;)hp=!1,rl=0,Ep+=1,Le=null,e=r(n,i);return Gy(),e}function LN(e,t,r,n){var i=r.render(),o=n.childContextTypes;if(o!=null){var a=t.legacyContext;if(typeof r.getChildContext!="function")n=a;else{r=r.getChildContext();for(var s in r)if(!(s in o))throw Error(J(108,Cy(n)||"Unknown",s));n=tl({},a,r)}t.legacyContext=n,Nr(e,t,i),t.legacyContext=a}else Nr(e,t,i)}function PN(e,t){if(e&&e.defaultProps){t=tl({},t),e=e.defaultProps;for(var r in e)t[r]===void 0&&(t[r]=e[r]);return t}return t}function Dy(e,t,r,n,i){if(typeof r=="function")if(r.prototype&&r.prototype.isReactComponent){i=_N(r,t.legacyContext);var o=r.contextType;o=new r(n,typeof o=="object"&&o!==null?o._currentValue:i),SN(o,r,n,i),LN(e,t,o,r)}else{o=_N(r,t.legacyContext),i=RN(e,t,r,n,o);var a=rl!==0;if(typeof i=="object"&&i!==null&&typeof i.render=="function"&&i.$$typeof===void 0)SN(i,r,n,o),LN(e,t,i,r);else if(a){n=t.treeContext,t.treeContext=ky(n,1,0);try{Nr(e,t,i)}finally{t.treeContext=n}}else Nr(e,t,i)}else if(typeof r=="string"){switch(i=t.blockedSegment,o=MU(i.chunks,r,n,e.responseState,i.formatContext),i.lastPushedText=!1,a=i.formatContext,i.formatContext=CU(a,r,n),Ay(e,t,o),i.formatContext=a,r){case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"input":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":break;default:i.chunks.push(qU,te(r),UU)}i.lastPushedText=!1}else{switch(r){case F2:case j2:case GN:case $N:case VN:Nr(e,t,n.children);return;case zN:Nr(e,t,n.children);return;case A2:throw Error(J(343));case HN:e:{r=t.blockedBoundary,i=t.blockedSegment,o=n.fallback,n=n.children,a=new Set;var s={id:null,rootSegmentID:-1,parentFlushed:!1,pendingTasks:0,forceClientRender:!1,completedSegments:[],byteSize:0,fallbackAbortableTasks:a,errorDigest:null},u=mp(e,i.chunks.length,s,i.formatContext,!1,!1);i.children.push(u),i.lastPushedText=!1;var l=mp(e,0,null,i.formatContext,!1,!1);l.parentFlushed=!0,t.blockedBoundary=s,t.blockedSegment=l;try{if(Ay(e,t,n),l.lastPushedText&&l.textEmbedded&&l.chunks.push(My),l.status=1,yp(s,l),s.pendingTasks===0)break e}catch(c){l.status=4,s.forceClientRender=!0,s.errorDigest=nl(e,c)}finally{t.blockedBoundary=r,t.blockedSegment=i}t=$y(e,o,r,u,a,t.legacyContext,t.context,t.treeContext),e.pingedTasks.push(t)}return}if(typeof r=="object"&&r!==null)switch(r.$$typeof){case BN:if(n=RN(e,t,r.render,n,i),rl!==0){r=t.treeContext,t.treeContext=ky(r,1,0);try{Nr(e,t,n)}finally{t.treeContext=r}}else Nr(e,t,n);return;case WN:r=r.type,n=PN(r,n),Dy(e,t,r,n,i);return;case QN:if(i=n.children,r=r._context,n=n.value,o=r._currentValue,r._currentValue=n,a=Xo,Xo=n={parent:a,depth:a===null?0:a.depth+1,context:r,parentValue:o,value:n},t.context=n,Nr(e,t,i),e=Xo,e===null)throw Error(J(403));n=e.parentValue,e.context._currentValue=n===M2?e.context._defaultValue:n,e=Xo=e.parent,t.context=e;return;case KN:n=n.children,n=n(r._currentValue),Nr(e,t,n);return;case qy:i=r._init,r=i(r._payload),n=PN(r,n),Dy(e,t,r,n,void 0);return}throw Error(J(130,r==null?r:typeof r,""))}}function Nr(e,t,r){if(t.node=r,typeof r=="object"&&r!==null){switch(r.$$typeof){case D2:Dy(e,t,r.type,r.props,r.ref);return;case UN:throw Error(J(257));case qy:var n=r._init;r=n(r._payload),Nr(e,t,r);return}if(xy(r)){xN(e,t,r);return}if(r===null||typeof r!="object"?n=null:(n=TN&&r[TN]||r["@@iterator"],n=typeof n=="function"?n:null),n&&(n=n.call(r))){if(r=n.next(),!r.done){var i=[];do i.push(r.value),r=n.next();while(!r.done);xN(e,t,i)}return}throw e=Object.prototype.toString.call(r),Error(J(31,e==="[object Object]"?"object with keys {"+Object.keys(r).join(", ")+"}":e))}typeof r=="string"?(n=t.blockedSegment,n.lastPushedText=dN(t.blockedSegment.chunks,r,e.responseState,n.lastPushedText)):typeof r=="number"&&(n=t.blockedSegment,n.lastPushedText=dN(t.blockedSegment.chunks,""+r,e.responseState,n.lastPushedText))}function xN(e,t,r){for(var n=r.length,i=0;i<n;i++){var o=t.treeContext;t.treeContext=ky(o,n,i);try{Ay(e,t,r[i])}finally{t.treeContext=o}}}function Ay(e,t,r){var n=t.blockedSegment.formatContext,i=t.legacyContext,o=t.context;try{return Nr(e,t,r)}catch(u){if(Gy(),typeof u=="object"&&u!==null&&typeof u.then=="function"){r=u;var a=t.blockedSegment,s=mp(e,a.chunks.length,null,a.formatContext,a.lastPushedText,!0);a.children.push(s),a.lastPushedText=!1,e=$y(e,t.node,t.blockedBoundary,s,t.abortSet,t.legacyContext,t.context,t.treeContext).ping,r.then(e,e),t.blockedSegment.formatContext=n,t.legacyContext=i,t.context=o,dp(o)}else throw t.blockedSegment.formatContext=n,t.legacyContext=i,t.context=o,dp(o),u}}function W2(e){var t=e.blockedBoundary;e=e.blockedSegment,e.status=3,n1(this,t,e)}function r1(e,t,r){var n=e.blockedBoundary;e.blockedSegment.status=3,n===null?(t.allPendingTasks--,t.status!==2&&(t.status=2,t.destination!==null&&t.destination.close())):(n.pendingTasks--,n.forceClientRender||(n.forceClientRender=!0,e=r===void 0?Error(J(432)):r,n.errorDigest=t.onError(e),n.parentFlushed&&t.clientRenderedBoundaries.push(n)),n.fallbackAbortableTasks.forEach(function(i){return r1(i,t,r)}),n.fallbackAbortableTasks.clear(),t.allPendingTasks--,t.allPendingTasks===0&&(n=t.onAllReady,n()))}function yp(e,t){if(t.chunks.length===0&&t.children.length===1&&t.children[0].boundary===null){var r=t.children[0];r.id=t.id,r.parentFlushed=!0,r.status===1&&yp(e,r)}else e.completedSegments.push(t)}function n1(e,t,r){if(t===null){if(r.parentFlushed){if(e.completedRootSegment!==null)throw Error(J(389));e.completedRootSegment=r}e.pendingRootTasks--,e.pendingRootTasks===0&&(e.onShellError=el,t=e.onShellReady,t())}else t.pendingTasks--,t.forceClientRender||(t.pendingTasks===0?(r.parentFlushed&&r.status===1&&yp(t,r),t.parentFlushed&&e.completedBoundaries.push(t),t.fallbackAbortableTasks.forEach(W2,e),t.fallbackAbortableTasks.clear()):r.parentFlushed&&r.status===1&&(yp(t,r),t.completedSegments.length===1&&t.parentFlushed&&e.partialBoundaries.push(t)));e.allPendingTasks--,e.allPendingTasks===0&&(e=e.onAllReady,e())}function i1(e){if(e.status!==2){var t=Xo,r=Py.current;Py.current=IN;var n=pp;pp=e.responseState;try{var i=e.pingedTasks,o;for(o=0;o<i.length;o++){var a=i[o],s=e,u=a.blockedSegment;if(u.status===0){dp(a.context);try{Nr(s,a,a.node),u.lastPushedText&&u.textEmbedded&&u.chunks.push(My),a.abortSet.delete(a),u.status=1,n1(s,a.blockedBoundary,u)}catch(m){if(Gy(),typeof m=="object"&&m!==null&&typeof m.then=="function"){var l=a.ping;m.then(l,l)}else{a.abortSet.delete(a),u.status=4;var c=a.blockedBoundary,f=m,p=nl(s,f);if(c===null?vp(s,f):(c.pendingTasks--,c.forceClientRender||(c.forceClientRender=!0,c.errorDigest=p,c.parentFlushed&&s.clientRenderedBoundaries.push(c))),s.allPendingTasks--,s.allPendingTasks===0){var d=s.onAllReady;d()}}}finally{}}}i.splice(0,o),e.destination!==null&&Qy(e,e.destination)}catch(m){nl(e,m),vp(e,m)}finally{pp=n,Py.current=r,r===IN&&dp(t)}}}function sp(e,t,r){switch(r.parentFlushed=!0,r.status){case 0:var n=r.id=e.nextSegmentId++;return r.lastPushedText=!1,r.textEmbedded=!1,e=e.responseState,V(t,VU),V(t,e.placeholderPrefix),e=te(n.toString(16)),V(t,e),De(t,GU);case 1:r.status=2;var i=!0;n=r.chunks;var o=0;r=r.children;for(var a=0;a<r.length;a++){for(i=r[a];o<i.index;o++)V(t,n[o]);i=Tp(e,t,i)}for(;o<n.length-1;o++)V(t,n[o]);return o<n.length&&(i=De(t,n[o])),i;default:throw Error(J(390))}}function Tp(e,t,r){var n=r.boundary;if(n===null)return sp(e,t,r);if(n.parentFlushed=!0,n.forceClientRender)n=n.errorDigest,De(t,BU),V(t,zU),n&&(V(t,YU),V(t,te(bt(n))),V(t,WU)),De(t,XU),sp(e,t,r);else if(0<n.pendingTasks){n.rootSegmentID=e.nextSegmentId++,0<n.completedSegments.length&&e.partialBoundaries.push(n);var i=e.responseState,o=i.nextSuspenseID++;i=D(i.boundaryPrefix+o.toString(16)),n=n.id=i,EN(t,e.responseState,n),sp(e,t,r)}else if(n.byteSize>e.progressiveChunkSize)n.rootSegmentID=e.nextSegmentId++,e.completedBoundaries.push(n),EN(t,e.responseState,n.id),sp(e,t,r);else{if(De(t,$U),r=n.completedSegments,r.length!==1)throw Error(J(391));Tp(e,t,r[0])}return De(t,HU)}function CN(e,t,r){return E2(t,e.responseState,r.formatContext,r.id),Tp(e,t,r),T2(t,r.formatContext)}function kN(e,t,r){for(var n=r.completedSegments,i=0;i<n.length;i++)o1(e,t,r,n[i]);if(n.length=0,e=e.responseState,n=r.id,r=r.rootSegmentID,V(t,e.startInlineScript),e.sentCompleteBoundaryFunction?V(t,N2):(e.sentCompleteBoundaryFunction=!0,V(t,O2)),n===null)throw Error(J(395));return r=te(r.toString(16)),V(t,n),V(t,I2),V(t,e.segmentPrefix),V(t,r),De(t,R2)}function o1(e,t,r,n){if(n.status===2)return!0;var i=n.id;if(i===-1){if((n.id=r.rootSegmentID)===-1)throw Error(J(392));return CN(e,t,n)}return CN(e,t,n),e=e.responseState,V(t,e.startInlineScript),e.sentCompleteSegmentFunction?V(t,b2):(e.sentCompleteSegmentFunction=!0,V(t,_2)),V(t,e.segmentPrefix),i=te(i.toString(16)),V(t,i),V(t,S2),V(t,e.placeholderPrefix),V(t,i),De(t,w2)}function Qy(e,t){wr=new Uint8Array(512),Or=0;try{var r=e.completedRootSegment;if(r!==null&&e.pendingRootTasks===0){Tp(e,t,r),e.completedRootSegment=null;var n=e.responseState.bootstrapChunks;for(r=0;r<n.length-1;r++)V(t,n[r]);r<n.length&&De(t,n[r])}var i=e.clientRenderedBoundaries,o;for(o=0;o<i.length;o++){var a=i[o];n=t;var s=e.responseState,u=a.id,l=a.errorDigest,c=a.errorMessage,f=a.errorComponentStack;if(V(n,s.startInlineScript),s.sentClientRenderFunction?V(n,P2):(s.sentClientRenderFunction=!0,V(n,L2)),u===null)throw Error(J(395));if(V(n,u),V(n,x2),(l||c||f)&&(V(n,Ry),V(n,te(Ly(l||"")))),(c||f)&&(V(n,Ry),V(n,te(Ly(c||"")))),f&&(V(n,Ry),V(n,te(Ly(f)))),!De(n,C2)){e.destination=null,o++,i.splice(0,o);return}}i.splice(0,o);var p=e.completedBoundaries;for(o=0;o<p.length;o++)if(!kN(e,t,p[o])){e.destination=null,o++,p.splice(0,o);return}p.splice(0,o),lN(t),wr=new Uint8Array(512),Or=0;var d=e.partialBoundaries;for(o=0;o<d.length;o++){var m=d[o];e:{i=e,a=t;var E=m.completedSegments;for(s=0;s<E.length;s++)if(!o1(i,a,m,E[s])){s++,E.splice(0,s);var b=!1;break e}E.splice(0,s),b=!0}if(!b){e.destination=null,o++,d.splice(0,o);return}}d.splice(0,o);var h=e.completedBoundaries;for(o=0;o<h.length;o++)if(!kN(e,t,h[o])){e.destination=null,o++,h.splice(0,o);return}h.splice(0,o)}finally{lN(t),e.allPendingTasks===0&&e.pingedTasks.length===0&&e.clientRenderedBoundaries.length===0&&e.completedBoundaries.length===0&&t.close()}}function DN(e,t){try{var r=e.abortableTasks;r.forEach(function(n){return r1(n,e,t)}),r.clear(),e.destination!==null&&Qy(e,e.destination)}catch(n){nl(e,n),vp(e,n)}}Ky.renderToReadableStream=function(e,t){return new Promise(function(r,n){var i,o,a=new Promise(function(c,f){o=c,i=f}),s=z2(e,PU(t?t.identifierPrefix:void 0,t?t.nonce:void 0,t?t.bootstrapScriptContent:void 0,t?t.bootstrapScripts:void 0,t?t.bootstrapModules:void 0),xU(t?t.namespaceURI:void 0),t?t.progressiveChunkSize:void 0,t?t.onError:void 0,o,function(){var c=new ReadableStream({type:"bytes",pull:function(f){if(s.status===1)s.status=2,FN(f,s.fatalError);else if(s.status!==2&&s.destination===null){s.destination=f;try{Qy(s,f)}catch(p){nl(s,p),vp(s,p)}}},cancel:function(){DN(s)}},{highWaterMark:0});c.allReady=a,r(c)},function(c){a.catch(function(){}),n(c)},i);if(t&&t.signal){var u=t.signal,l=function(){DN(s,u.reason),u.removeEventListener("abort",l)};u.addEventListener("abort",l)}i1(s)})};Ky.version="18.2.0"});var u1=y(Jo=>{"use strict";var Ja,s1;Ja=uN(),s1=a1();Jo.version=Ja.version;Jo.renderToString=Ja.renderToString;Jo.renderToStaticMarkup=Ja.renderToStaticMarkup;Jo.renderToNodeStream=Ja.renderToNodeStream;Jo.renderToStaticNodeStream=Ja.renderToStaticNodeStream;Jo.renderToReadableStream=s1.renderToReadableStream});var Za=y((Mee,_p)=>{(function(){"use strict";var e={}.hasOwnProperty;function t(){for(var r=[],n=0;n<arguments.length;n++){var i=arguments[n];if(!!i){var o=typeof i;if(o==="string"||o==="number")r.push(i);else if(Array.isArray(i)){if(i.length){var a=t.apply(null,i);a&&r.push(a)}}else if(o==="object")if(i.toString===Object.prototype.toString)for(var s in i)e.call(i,s)&&i[s]&&r.push(s);else r.push(i.toString())}}return r.join(" ")}typeof _p<"u"&&_p.exports?(t.default=t,_p.exports=t):typeof define=="function"&&typeof define.amd=="object"&&define.amd?define("classnames",[],function(){return t}):window.classNames=t})()});var m1=y(h1=>{"use strict";Object.defineProperty(h1,"__esModule",{value:!0})});var By=y(Sp=>{"use strict";Object.defineProperty(Sp,"__esModule",{value:!0});Sp.Failcode=void 0;Sp.Failcode={TYPE_INCORRECT:"TYPE_INCORRECT",VALUE_INCORRECT:"VALUE_INCORRECT",KEY_INCORRECT:"KEY_INCORRECT",CONTENT_INCORRECT:"CONTENT_INCORRECT",ARGUMENT_INCORRECT:"ARGUMENT_INCORRECT",RETURN_INCORRECT:"RETURN_INCORRECT",CONSTRAINT_FAILED:"CONSTRAINT_FAILED",PROPERTY_MISSING:"PROPERTY_MISSING",PROPERTY_PRESENT:"PROPERTY_PRESENT",NOTHING_EXPECTED:"NOTHING_EXPECTED"}});var ts=y(es=>{"use strict";var X2=es&&es.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(n[o]=i[o])},e(t,r)};return function(t,r){if(typeof r!="function"&&r!==null)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(es,"__esModule",{value:!0});es.ValidationError=void 0;var J2=function(e){X2(t,e);function t(r){var n=e.call(this,r.message)||this;return n.name="ValidationError",n.code=r.code,r.details!==void 0&&(n.details=r.details),Object.setPrototypeOf(n,t.prototype),n}return t}(Error);es.ValidationError=J2});var ol=y(Hy=>{"use strict";Object.defineProperty(Hy,"__esModule",{value:!0});var wp=function(e){return function(t){switch(t.tag){case"literal":return'"'.concat(String(t.value),'"');case"string":return"string";case"brand":return t.brand;case"constraint":return t.name||wp(e)(t.underlying);case"union":return t.alternatives.map(wp(e)).join(" | ");case"intersect":return t.intersectees.map(wp(e)).join(" & ");default:break}return"`${".concat(Ir(!1,e)(t),"}`")}},Op=function(e){return function(t){switch(t.tag){case"literal":return String(t.value);case"brand":return"${".concat(t.brand,"}");case"constraint":return t.name?"${".concat(t.name,"}"):Op(e)(t.underlying);case"union":if(t.alternatives.length===1){var r=t.alternatives[0];return Op(e)(r.reflect)}break;case"intersect":if(t.intersectees.length===1){var r=t.intersectees[0];return Op(e)(r.reflect)}break;default:break}return"${".concat(Ir(!1,e)(t),"}")}},Ir=function(e,t){return function(r){var n=function(l){return e?"(".concat(l,")"):l};if(t.has(r))return n("CIRCULAR ".concat(r.tag));t.add(r);try{switch(r.tag){case"unknown":case"never":case"void":case"boolean":case"number":case"bigint":case"string":case"symbol":case"function":return r.tag;case"literal":{var i=r.value;return typeof i=="string"?'"'.concat(i,'"'):String(i)}case"template":{if(r.strings.length===0)return'""';if(r.strings.length===1)return'"'.concat(r.strings[0],'"');if(r.strings.length===2&&r.strings.every(function(l){return l===""})){var o=r.runtypes[0];return wp(t)(o.reflect)}var a=!1,s=r.strings.reduce(function(l,c,f){var p=l+c,d=r.runtypes[f];if(d){var m=Op(t)(d.reflect);return!a&&m.startsWith("$")&&(a=!0),p+m}else return p},"");return a?"`".concat(s,"`"):'"'.concat(s,'"')}case"array":return"".concat(v1(r)).concat(Ir(!0,t)(r.element),"[]");case"dictionary":return"{ [_: ".concat(r.key,"]: ").concat(Ir(!1,t)(r.value)," }");case"record":{var u=Object.keys(r.fields);return u.length?"{ ".concat(u.map(function(l){return"".concat(v1(r)).concat(l).concat(Z2(r,l),": ").concat(r.fields[l].tag==="optional"?Ir(!1,t)(r.fields[l].underlying):Ir(!1,t)(r.fields[l]),";")}).join(" ")," }"):"{}"}case"tuple":return"[".concat(r.components.map(Ir(!1,t)).join(", "),"]");case"union":return n("".concat(r.alternatives.map(Ir(!0,t)).join(" | ")));case"intersect":return n("".concat(r.intersectees.map(Ir(!0,t)).join(" & ")));case"optional":return Ir(e,t)(r.underlying)+" | undefined";case"constraint":return r.name||Ir(e,t)(r.underlying);case"instanceof":return r.ctor.name;case"brand":return Ir(e,t)(r.entity)}}finally{t.delete(r)}throw Error("impossible")}};Hy.default=Ir(!1,new Set);function Z2(e,t){var r=e.isPartial,n=e.fields;return r||t!==void 0&&n[t].tag==="optional"?"?":""}function v1(e){var t=e.isReadonly;return t?"readonly ":""}});var Ue=y(Te=>{"use strict";var zy=Te&&Te.__assign||function(){return zy=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++){t=arguments[r];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},zy.apply(this,arguments)};Object.defineProperty(Te,"__esModule",{value:!0});Te.FAILURE=Te.SUCCESS=Te.enumerableKeysOf=Te.typeOf=Te.hasKey=void 0;var qn=By(),Zo=ol();function eV(e,t){return typeof t=="object"&&t!==null&&e in t}Te.hasKey=eV;var tV=function(e){var t,r,n;return typeof e=="object"?e===null?"null":Array.isArray(e)?"array":((t=e.constructor)===null||t===void 0?void 0:t.name)==="Object"?"object":(n=(r=e.constructor)===null||r===void 0?void 0:r.name)!==null&&n!==void 0?n:typeof e:typeof e};Te.typeOf=tV;var rV=function(e){return typeof e=="object"&&e!==null?Reflect.ownKeys(e).filter(function(t){var r,n;return(n=(r=e.propertyIsEnumerable)===null||r===void 0?void 0:r.call(e,t))!==null&&n!==void 0?n:!0}):[]};Te.enumerableKeysOf=rV;function nV(e){return{success:!0,value:e}}Te.SUCCESS=nV;Te.FAILURE=Object.assign(function(e,t,r){return zy({success:!1,code:e,message:t},r?{details:r}:{})},{TYPE_INCORRECT:function(e,t){var r="Expected ".concat(e.tag==="template"?"string ".concat((0,Zo.default)(e)):(0,Zo.default)(e),", but was ").concat((0,Te.typeOf)(t));return(0,Te.FAILURE)(qn.Failcode.TYPE_INCORRECT,r)},VALUE_INCORRECT:function(e,t,r){return(0,Te.FAILURE)(qn.Failcode.VALUE_INCORRECT,"Expected ".concat(e," ").concat(String(t),", but was ").concat(String(r)))},KEY_INCORRECT:function(e,t,r){return(0,Te.FAILURE)(qn.Failcode.KEY_INCORRECT,"Expected ".concat((0,Zo.default)(e)," key to be ").concat((0,Zo.default)(t),", but was ").concat((0,Te.typeOf)(r)))},CONTENT_INCORRECT:function(e,t){var r="Expected ".concat((0,Zo.default)(e),", but was incompatible");return(0,Te.FAILURE)(qn.Failcode.CONTENT_INCORRECT,r,t)},ARGUMENT_INCORRECT:function(e){return(0,Te.FAILURE)(qn.Failcode.ARGUMENT_INCORRECT,e)},RETURN_INCORRECT:function(e){return(0,Te.FAILURE)(qn.Failcode.RETURN_INCORRECT,e)},CONSTRAINT_FAILED:function(e,t){var r=t?": ".concat(t):"";return(0,Te.FAILURE)(qn.Failcode.CONSTRAINT_FAILED,"Failed constraint check for ".concat((0,Zo.default)(e)).concat(r))},PROPERTY_MISSING:function(e){var t="Expected ".concat((0,Zo.default)(e),", but was missing");return(0,Te.FAILURE)(qn.Failcode.PROPERTY_MISSING,t)},PROPERTY_PRESENT:function(e){var t="Expected nothing, but was ".concat((0,Te.typeOf)(e));return(0,Te.FAILURE)(qn.Failcode.PROPERTY_PRESENT,t)},NOTHING_EXPECTED:function(e){var t="Expected nothing, but was ".concat((0,Te.typeOf)(e));return(0,Te.FAILURE)(qn.Failcode.NOTHING_EXPECTED,t)}})});var y1=y(Hi=>{"use strict";var iV=Hi&&Hi.__read||function(e,t){var r=typeof Symbol=="function"&&e[Symbol.iterator];if(!r)return e;var n=r.call(e),i,o=[],a;try{for(;(t===void 0||t-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(s){a={error:s}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(a)throw a.error}}return o},oV=Hi&&Hi.__spreadArray||function(e,t,r){if(r||arguments.length===2)for(var n=0,i=t.length,o;n<i;n++)(o||!(n in t))&&(o||(o=Array.prototype.slice.call(t,0,n)),o[n]=t[n]);return e.concat(o||Array.prototype.slice.call(t))};Object.defineProperty(Hi,"__esModule",{value:!0});Hi.Contract=void 0;var aV=ts(),sV=Ue();function uV(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e.length-1,n=e.slice(0,r),i=e[r];return{enforce:function(o){return function(){for(var a=[],s=0;s<arguments.length;s++)a[s]=arguments[s];if(a.length<n.length){var u="Expected ".concat(n.length," arguments but only received ").concat(a.length),l=sV.FAILURE.ARGUMENT_INCORRECT(u);throw new aV.ValidationError(l)}for(var c=0;c<n.length;c++)n[c].check(a[c]);return i.check(o.apply(void 0,oV([],iV(a),!1)))}}}}Hi.Contract=uV});var T1=y(zi=>{"use strict";var lV=zi&&zi.__read||function(e,t){var r=typeof Symbol=="function"&&e[Symbol.iterator];if(!r)return e;var n=r.call(e),i,o=[],a;try{for(;(t===void 0||t-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(s){a={error:s}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(a)throw a.error}}return o},cV=zi&&zi.__spreadArray||function(e,t,r){if(r||arguments.length===2)for(var n=0,i=t.length,o;n<i;n++)(o||!(n in t))&&(o||(o=Array.prototype.slice.call(t,0,n)),o[n]=t[n]);return e.concat(o||Array.prototype.slice.call(t))};Object.defineProperty(zi,"__esModule",{value:!0});zi.AsyncContract=void 0;var g1=ts(),E1=Ue();function fV(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=e.length-1,n=e.slice(0,r),i=e[r];return{enforce:function(o){return function(){for(var a=[],s=0;s<arguments.length;s++)a[s]=arguments[s];if(a.length<n.length){var u="Expected ".concat(n.length," arguments but only received ").concat(a.length),l=E1.FAILURE.ARGUMENT_INCORRECT(u);throw new g1.ValidationError(l)}for(var c=0;c<n.length;c++)n[c].check(a[c]);var f=o.apply(void 0,cV([],lV(a),!1));if(!(f instanceof Promise)){var u="Expected function to return a promise, but instead got ".concat(f),l=E1.FAILURE.RETURN_INCORRECT(u);throw new g1.ValidationError(l)}return f.then(i.check)}}}}zi.AsyncContract=fV});var _1=y(Un=>{"use strict";var pV=Un&&Un.__values||function(e){var t=typeof Symbol=="function"&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&typeof e.length=="number")return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},dV=Un&&Un.__read||function(e,t){var r=typeof Symbol=="function"&&e[Symbol.iterator];if(!r)return e;var n=r.call(e),i,o=[],a;try{for(;(t===void 0||t-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(s){a={error:s}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(a)throw a.error}}return o};Object.defineProperty(Un,"__esModule",{value:!0});Un.when=Un.match=void 0;function hV(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(r){var n,i;try{for(var o=pV(e),a=o.next();!a.done;a=o.next()){var s=dV(a.value,2),u=s[0],l=s[1];if(u.guard(r))return l(r)}}catch(c){n={error:c}}finally{try{a&&!a.done&&(i=o.return)&&i.call(o)}finally{if(n)throw n.error}}throw new Error("No alternatives were matched")}}Un.match=hV;function mV(e,t){return[e,t]}Un.when=mV});var He=y(Yi=>{"use strict";Object.defineProperty(Yi,"__esModule",{value:!0});Yi.innerValidate=Yi.create=Yi.isRuntype=void 0;var Wi=al(),vV=ol(),yV=ts(),b1=Ue(),S1=Symbol(),gV=function(e){return(0,b1.hasKey)(S1,e)};Yi.isRuntype=gV;function EV(e,t){return t[S1]=!0,t.check=r,t.assert=r,t._innerValidate=function(f,p){return p.has(f,t)?(0,b1.SUCCESS)(f):e(f,p)},t.validate=function(f){return t._innerValidate(f,_V())},t.guard=n,t.Or=i,t.And=o,t.optional=a,t.nullable=s,t.withConstraint=u,t.withGuard=l,t.withBrand=c,t.reflect=t,t.toString=function(){return"Runtype<".concat((0,vV.default)(t),">")},t;function r(f){var p=t.validate(f);if(p.success)return p.value;throw new yV.ValidationError(p)}function n(f){return t.validate(f).success}function i(f){return(0,Wi.Union)(t,f)}function o(f){return(0,Wi.Intersect)(t,f)}function a(){return(0,Wi.Optional)(t)}function s(){return(0,Wi.Union)(t,Wi.Null)}function u(f,p){return(0,Wi.Constraint)(t,f,p)}function l(f,p){return(0,Wi.Constraint)(t,f,p)}function c(f){return(0,Wi.Brand)(f,t)}}Yi.create=EV;function TV(e,t,r){return e._innerValidate(t,r)}Yi.innerValidate=TV;function _V(){var e=new WeakMap,t=function(n,i){if(!(n===null||typeof n!="object")){var o=e.get(n);e.set(n,o?o.set(i,!0):new WeakMap().set(i,!0))}},r=function(n,i){var o=e.get(n),a=o&&o.get(i)||!1;return t(n,i),a};return{has:r}}});var Ip=y(Np=>{"use strict";Object.defineProperty(Np,"__esModule",{value:!0});Np.Unknown=void 0;var bV=He(),SV=Ue(),wV={tag:"unknown"};Np.Unknown=(0,bV.create)(function(e){return(0,SV.SUCCESS)(e)},wV)});var w1=y(Rp=>{"use strict";Object.defineProperty(Rp,"__esModule",{value:!0});Rp.Never=void 0;var OV=He(),NV=Ue(),IV={tag:"never"};Rp.Never=(0,OV.create)(NV.FAILURE.NOTHING_EXPECTED,IV)});var O1=y(Lp=>{"use strict";Object.defineProperty(Lp,"__esModule",{value:!0});Lp.Void=void 0;var RV=Ip();Lp.Void=RV.Unknown});var Wy=y(rs=>{"use strict";var Pp=rs&&rs.__values||function(e){var t=typeof Symbol=="function"&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&typeof e.length=="number")return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(rs,"__esModule",{value:!0});rs.Union=void 0;var xp=He(),sl=Ue();function LV(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=function(){for(var i=[],o=0;o<arguments.length;o++)i[o]=arguments[o];return function(a){for(var s=0;s<e.length;s++)if(e[s].guard(a))return i[s](a)}},n={tag:"union",alternatives:e,match:r};return(0,xp.create)(function(i,o){var a,s,u,l,c,f,p,d;if(typeof i!="object"||i===null){try{for(var m=Pp(e),E=m.next();!E.done;E=m.next()){var b=E.value;if((0,xp.innerValidate)(b,i,o).success)return(0,sl.SUCCESS)(i)}}catch(Ie){a={error:Ie}}finally{try{E&&!E.done&&(s=m.return)&&s.call(m)}finally{if(a)throw a.error}}return sl.FAILURE.TYPE_INCORRECT(n,i)}var h={};try{for(var v=Pp(e),g=v.next();!g.done;g=v.next()){var b=g.value;if(b.reflect.tag==="record"){var _=function(Se){var Me=b.reflect.fields[Se];Me.tag==="literal"&&(h[Se]?h[Se].every(function(Tt){return Tt!==Me.value})&&h[Se].push(Me.value):h[Se]=[Me.value])};for(var N in b.reflect.fields)_(N)}}}catch(Ie){u={error:Ie}}finally{try{g&&!g.done&&(l=v.return)&&l.call(v)}finally{if(u)throw u.error}}for(var N in h)if(h[N].length===e.length)try{for(var R=(c=void 0,Pp(e)),O=R.next();!O.done;O=R.next()){var b=O.value;if(b.reflect.tag==="record"){var L=b.reflect.fields[N];if(L.tag==="literal"&&(0,sl.hasKey)(N,i)&&i[N]===L.value)return(0,xp.innerValidate)(b,i,o)}}}catch(Se){c={error:Se}}finally{try{O&&!O.done&&(f=R.return)&&f.call(R)}finally{if(c)throw c.error}}try{for(var S=Pp(e),I=S.next();!I.done;I=S.next()){var $=I.value;if((0,xp.innerValidate)($,i,o).success)return(0,sl.SUCCESS)(i)}}catch(Ie){p={error:Ie}}finally{try{I&&!I.done&&(d=S.return)&&d.call(S)}finally{if(p)throw p.error}}return sl.FAILURE.TYPE_INCORRECT(n,i)},n)}rs.Union=LV});var Jy=y(nr=>{"use strict";Object.defineProperty(nr,"__esModule",{value:!0});nr.Nullish=nr.Null=nr.Undefined=nr.Literal=nr.literal=void 0;var PV=He(),N1=Ue(),xV=Wy();function Yy(e){return Array.isArray(e)?String(e.map(String)):typeof e=="bigint"?String(e)+"n":String(e)}nr.literal=Yy;function Xy(e){var t={tag:"literal",value:e};return(0,PV.create)(function(r){return r===e?(0,N1.SUCCESS)(r):N1.FAILURE.VALUE_INCORRECT("literal","`".concat(Yy(e),"`"),"`".concat(Yy(r),"`"))},t)}nr.Literal=Xy;nr.Undefined=Xy(void 0);nr.Null=Xy(null);nr.Nullish=(0,xV.Union)(nr.Null,nr.Undefined)});var x1=y(Vn=>{"use strict";var Xi=Vn&&Vn.__read||function(e,t){var r=typeof Symbol=="function"&&e[Symbol.iterator];if(!r)return e;var n=r.call(e),i,o=[],a;try{for(;(t===void 0||t-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(s){a={error:s}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(a)throw a.error}}return o},Zy=Vn&&Vn.__spreadArray||function(e,t,r){if(r||arguments.length===2)for(var n=0,i=t.length,o;n<i;n++)(o||!(n in t))&&(o||(o=Array.prototype.slice.call(t,0,n)),o[n]=t[n]);return e.concat(o||Array.prototype.slice.call(t))},I1=Vn&&Vn.__values||function(e){var t=typeof Symbol=="function"&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&typeof e.length=="number")return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(Vn,"__esModule",{value:!0});Vn.Template=void 0;var Cp=He(),R1=ol(),vi=Ue(),P1=Jy(),eg=function(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")},CV=function(e){if(0<e.length&&Array.isArray(e[0])){var t=Xi(e),r=t[0],n=t.slice(1);return[Array.from(r),n]}else{var i=e,r=i.reduce(function(s,u){return(0,Cp.isRuntype)(u)?s.push(""):s.push(s.pop()+String(u)),s},[""]),n=i.filter(Cp.isRuntype);return[r,n]}},kV=function(e,t){for(var r=0;r<t.length;)switch(t[r].reflect.tag){case"literal":{var n=t[r];t.splice(r,1);var i=String(n.value);e.splice(r,2,e[r]+i+e[r+1]);break}case"template":{var o=t[r];t.splice.apply(t,Zy([r,1],Xi(o.runtypes),!1));var a=o.strings;if(a.length===1)e.splice(r,2,e[r]+a[0]+e[r+1]);else{var s=a[0],u=a.slice(1,-1),l=a[a.length-1];e.splice.apply(e,Zy(Zy([r,2,e[r]+s],Xi(u),!1),[l+e[r+1]],!1))}break}case"union":{var c=t[r];if(c.alternatives.length===1)try{var f=cl(c);t.splice(r,1);var i=String(f.value);e.splice(r,2,e[r]+i+e[r+1]);break}catch{r++;break}else{r++;break}}case"intersect":{var p=t[r];if(p.intersectees.length===1)try{var d=cl(p);t.splice(r,1);var i=String(d.value);e.splice(r,2,e[r]+i+e[r+1]);break}catch{r++;break}else{r++;break}}default:r++;break}},DV=function(e){var t=Xi(CV(e),2),r=t[0],n=t[1];return kV(r,n),[r,n]},cl=function(e){switch(e.reflect.tag){case"literal":return e;case"brand":return cl(e.reflect.entity);case"union":if(e.reflect.alternatives.length===1)return cl(e.reflect.alternatives[0]);break;case"intersect":if(e.reflect.intersectees.length===1)return cl(e.reflect.intersectees[0]);break;default:break}throw void 0},L1=function(e){return e},tg={string:[function(e){return globalThis.String(e)},".*"],number:[function(e){return globalThis.Number(e)},"[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:[Ee][+-]?\\d+)?","0[Bb][01]+","0[Oo][0-7]+","0[Xx][0-9A-Fa-f]+"],bigint:[function(e){return globalThis.BigInt(e)},"-?[1-9]d*"],boolean:[function(e){return e!=="false"},"true","false"],null:[function(){return null},"null"],undefined:[function(){},"undefined"]},ul=function(e){switch(e.tag){case"literal":{var t=Xi(tg[(0,vi.typeOf)(e.value)]||[L1],1),r=t[0];return r}case"brand":return ul(e.entity);case"constraint":return ul(e.underlying);case"union":return e.alternatives.map(ul);case"intersect":return e.intersectees.map(ul);default:var n=Xi(tg[e.tag]||[L1],1),i=n[0];return i}},rg=function(e,t){return function(r){var n,i,o,a,s=ul(e);if(Array.isArray(s))switch(e.tag){case"union":try{for(var u=I1(e.alternatives),l=u.next();!l.done;l=u.next()){var c=l.value,f=rg(c.reflect,t)(r);if(f.success)return f}}catch(b){n={error:b}}finally{try{l&&!l.done&&(i=u.return)&&i.call(u)}finally{if(n)throw n.error}}return vi.FAILURE.TYPE_INCORRECT(e,r);case"intersect":try{for(var p=I1(e.intersectees),d=p.next();!d.done;d=p.next()){var m=d.value,f=rg(m.reflect,t)(r);if(!f.success)return f}}catch(b){o={error:b}}finally{try{d&&!d.done&&(a=p.return)&&a.call(p)}finally{if(o)throw o.error}}return(0,vi.SUCCESS)(r);default:throw Error("impossible")}else{var E=s,f=(0,Cp.innerValidate)(e,E(r),t);return!f.success&&f.code==="VALUE_INCORRECT"&&e.tag==="literal"?vi.FAILURE.VALUE_INCORRECT("literal",'"'.concat((0,P1.literal)(e.value),'"'),'"'.concat(r,'"')):f}}},ll=function(e){switch(e.tag){case"literal":return eg(String(e.value));case"brand":return ll(e.entity);case"constraint":return ll(e.underlying);case"union":return e.alternatives.map(ll).join("|");case"template":return e.strings.map(eg).reduce(function(n,i,o){var a=n+i,s=e.runtypes[o];return s?a+"(?:".concat(ll(s.reflect),")"):a},"");default:var t=Xi(tg[e.tag]||[void 0,".*"]),r=t.slice(1);return r.join("|")}},AV=function(e){var t=e.strings.map(eg).reduce(function(r,n,i){var o=r+n,a=e.runtypes[i];return a?o+"(".concat(ll(a.reflect),")"):o},"");return new RegExp("^".concat(t,"$"),"su")};function jV(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=Xi(DV(e),2),n=r[0],i=r[1],o={tag:"template",strings:n,runtypes:i},a=AV(o),s=function(u,l){var c=u.match(a);if(c){for(var f=c.slice(1),p=0;p<i.length;p++){var d=i[p],m=f[p],E=rg(d.reflect,l)(m);if(!E.success)return E}return(0,vi.SUCCESS)(u)}else return vi.FAILURE.VALUE_INCORRECT("string","".concat((0,R1.default)(o)),'"'.concat((0,P1.literal)(u),'"'))};return(0,Cp.create)(function(u,l){if(typeof u!="string")return vi.FAILURE.TYPE_INCORRECT(o,u);var c=s(u,l);if(c.success)return(0,vi.SUCCESS)(u);var f=vi.FAILURE.VALUE_INCORRECT("string","".concat((0,R1.default)(o)),'"'.concat(u,'"'));return f.message!==c.message&&(f.message+=" (inner: ".concat(c.message,")")),f},o)}Vn.Template=jV});var D1=y(kp=>{"use strict";Object.defineProperty(kp,"__esModule",{value:!0});kp.Boolean=void 0;var FV=He(),C1=Ue(),k1={tag:"boolean"};kp.Boolean=(0,FV.create)(function(e){return typeof e=="boolean"?(0,C1.SUCCESS)(e):C1.FAILURE.TYPE_INCORRECT(k1,e)},k1)});var F1=y(Dp=>{"use strict";Object.defineProperty(Dp,"__esModule",{value:!0});Dp.Number=void 0;var MV=He(),A1=Ue(),j1={tag:"number"};Dp.Number=(0,MV.create)(function(e){return typeof e=="number"?(0,A1.SUCCESS)(e):A1.FAILURE.TYPE_INCORRECT(j1,e)},j1)});var U1=y(Ap=>{"use strict";Object.defineProperty(Ap,"__esModule",{value:!0});Ap.BigInt=void 0;var qV=He(),M1=Ue(),q1={tag:"bigint"};Ap.BigInt=(0,qV.create)(function(e){return typeof e=="bigint"?(0,M1.SUCCESS)(e):M1.FAILURE.TYPE_INCORRECT(q1,e)},q1)});var ng=y(jp=>{"use strict";Object.defineProperty(jp,"__esModule",{value:!0});jp.String=void 0;var UV=He(),V1=Ue(),G1={tag:"string"};jp.String=(0,UV.create)(function(e){return typeof e=="string"?(0,V1.SUCCESS)(e):V1.FAILURE.TYPE_INCORRECT(G1,e)},G1)});var B1=y(Fp=>{"use strict";Object.defineProperty(Fp,"__esModule",{value:!0});Fp.Symbol=void 0;var K1=He(),fl=Ue(),VV=function(e){var t={tag:"symbol",key:e};return(0,K1.create)(function(r){if(typeof r!="symbol")return fl.FAILURE.TYPE_INCORRECT(t,r);var n=globalThis.Symbol.keyFor(r);return n!==e?fl.FAILURE.VALUE_INCORRECT("symbol key",Q1(e),Q1(n)):(0,fl.SUCCESS)(r)},t)},$1={tag:"symbol"};Fp.Symbol=(0,K1.create)(function(e){return typeof e=="symbol"?(0,fl.SUCCESS)(e):fl.FAILURE.TYPE_INCORRECT($1,e)},Object.assign(VV,$1));var Q1=function(e){return e===void 0?"undefined":'"'.concat(e,'"')}});var W1=y(Mp=>{"use strict";Object.defineProperty(Mp,"__esModule",{value:!0});Mp.Array=void 0;var H1=He(),pl=Ue();function z1(e,t){var r={tag:"array",isReadonly:t,element:e};return $V((0,H1.create)(function(n,i){if(!Array.isArray(n))return pl.FAILURE.TYPE_INCORRECT(r,n);var o=(0,pl.enumerableKeysOf)(n),a=o.map(function(u){return(0,H1.innerValidate)(e,n[u],i)}),s=o.reduce(function(u,l){var c=a[l];return c.success||(u[l]=c.details||c.message),u},[]);return(0,pl.enumerableKeysOf)(s).length!==0?pl.FAILURE.CONTENT_INCORRECT(r,s):(0,pl.SUCCESS)(n)},r))}function GV(e){return z1(e,!1)}Mp.Array=GV;function $V(e){return e.asReadonly=t,e;function t(){return z1(e.element,!0)}}});var X1=y(qp=>{"use strict";Object.defineProperty(qp,"__esModule",{value:!0});qp.Tuple=void 0;var Y1=He(),ns=Ue();function QV(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r={tag:"tuple",components:e};return(0,Y1.create)(function(n,i){if(!Array.isArray(n))return ns.FAILURE.TYPE_INCORRECT(r,n);if(n.length!==e.length)return ns.FAILURE.CONSTRAINT_FAILED(r,"Expected length ".concat(e.length,", but was ").concat(n.length));var o=(0,ns.enumerableKeysOf)(n),a=o.map(function(u){return(0,Y1.innerValidate)(e[u],n[u],i)}),s=o.reduce(function(u,l){var c=a[l];return c.success||(u[l]=c.details||c.message),u},[]);return(0,ns.enumerableKeysOf)(s).length!==0?ns.FAILURE.CONTENT_INCORRECT(r,s):(0,ns.SUCCESS)(n)},r)}qp.Tuple=QV});var Z1=y(Gr=>{"use strict";var ig=Gr&&Gr.__read||function(e,t){var r=typeof Symbol=="function"&&e[Symbol.iterator];if(!r)return e;var n=r.call(e),i,o=[],a;try{for(;(t===void 0||t-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(s){a={error:s}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(a)throw a.error}}return o},og=Gr&&Gr.__spreadArray||function(e,t,r){if(r||arguments.length===2)for(var n=0,i=t.length,o;n<i;n++)(o||!(n in t))&&(o||(o=Array.prototype.slice.call(t,0,n)),o[n]=t[n]);return e.concat(o||Array.prototype.slice.call(t))};Object.defineProperty(Gr,"__esModule",{value:!0});Gr.Partial=Gr.Record=Gr.InternalRecord=void 0;var J1=He(),ir=Ue();function Ji(e,t,r){var n={tag:"record",isPartial:t,isReadonly:r,fields:e};return HV((0,J1.create)(function(i,o){if(i==null)return ir.FAILURE.TYPE_INCORRECT(n,i);var a=(0,ir.enumerableKeysOf)(e);if(a.length!==0&&typeof i!="object")return ir.FAILURE.TYPE_INCORRECT(n,i);var s=og([],ig(new Set(og(og([],ig(a),!1),ig((0,ir.enumerableKeysOf)(i)),!1))),!1),u=s.reduce(function(c,f){var p=(0,ir.hasKey)(f,e),d=(0,ir.hasKey)(f,i);if(p){var m=e[f],E=t||m.reflect.tag==="optional";if(d){var b=i[f];E&&b===void 0?c[f]=(0,ir.SUCCESS)(b):c[f]=(0,J1.innerValidate)(m,b,o)}else E?c[f]=(0,ir.SUCCESS)(void 0):c[f]=ir.FAILURE.PROPERTY_MISSING(m.reflect)}else if(d){var b=i[f];c[f]=(0,ir.SUCCESS)(b)}else throw new Error("impossible");return c},{}),l=s.reduce(function(c,f){var p=u[f];return p.success||(c[f]=p.details||p.message),c},{});return(0,ir.enumerableKeysOf)(l).length!==0?ir.FAILURE.CONTENT_INCORRECT(n,l):(0,ir.SUCCESS)(i)},n))}Gr.InternalRecord=Ji;function KV(e){return Ji(e,!1,!1)}Gr.Record=KV;function BV(e){return Ji(e,!0,!1)}Gr.Partial=BV;function HV(e){return e.asPartial=t,e.asReadonly=r,e.pick=n,e.omit=i,e.extend=o,e;function t(){return Ji(e.fields,!0,e.isReadonly)}function r(){return Ji(e.fields,e.isPartial,!0)}function n(){for(var a=[],s=0;s<arguments.length;s++)a[s]=arguments[s];var u={};return a.forEach(function(l){u[l]=e.fields[l]}),Ji(u,e.isPartial,e.isReadonly)}function i(){for(var a=[],s=0;s<arguments.length;s++)a[s]=arguments[s];var u={},l=(0,ir.enumerableKeysOf)(e.fields);return l.forEach(function(c){a.includes(c)||(u[c]=e.fields[c])}),Ji(u,e.isPartial,e.isReadonly)}function o(a){return Ji(Object.assign({},e.fields,a),e.isPartial,e.isReadonly)}}});var sg=y(is=>{"use strict";Object.defineProperty(is,"__esModule",{value:!0});is.Guard=is.Constraint=void 0;var zV=He(),ag=Ue(),WV=Ip();function YV(e,t,r){var n=r&&r.name,i=r&&r.args,o={tag:"constraint",underlying:e,constraint:t,name:n,args:i};return(0,zV.create)(function(a){var s=e.validate(a);if(!s.success)return s;var u=t(s.value);return typeof u=="string"?ag.FAILURE.CONSTRAINT_FAILED(o,u):u?(0,ag.SUCCESS)(s.value):ag.FAILURE.CONSTRAINT_FAILED(o)},o)}is.Constraint=YV;var XV=function(e,t){return WV.Unknown.withGuard(e,t)};is.Guard=XV});var tI=y(Up=>{"use strict";Object.defineProperty(Up,"__esModule",{value:!0});Up.Dictionary=void 0;var eI=He(),ug=ng(),JV=sg(),ZV=ol(),ea=Ue(),eG=(0,JV.Constraint)(ug.String,function(e){return!isNaN(+e)},{name:"number"});function tG(e,t){var r=t===void 0||t==="string"?ug.String:t==="number"?eG:t,n=(0,ZV.default)(r),i={tag:"dictionary",key:n,value:e};return(0,eI.create)(function(o,a){if(o==null||typeof o!="object"||Object.getPrototypeOf(o)!==Object.prototype&&(!Array.isArray(o)||n==="string"))return ea.FAILURE.TYPE_INCORRECT(i,o);var s=/^(?:NaN|-?\d+(?:\.\d+)?)$/,u=(0,ea.enumerableKeysOf)(o),l=u.reduce(function(f,p){var d=typeof p=="string"&&s.test(p),m=d?globalThis.Number(p):p;return(d?!r.guard(m)&&!r.guard(p):!r.guard(m))?f[p]=ea.FAILURE.KEY_INCORRECT(i,r.reflect,m):f[p]=(0,eI.innerValidate)(e,o[p],a),f},{}),c=u.reduce(function(f,p){var d=l[p];return d.success||(f[p]=d.details||d.message),f},{});return(0,ea.enumerableKeysOf)(c).length!==0?ea.FAILURE.CONTENT_INCORRECT(i,c):(0,ea.SUCCESS)(o)},i)}Up.Dictionary=tG});var nI=y(os=>{"use strict";var rG=os&&os.__values||function(e){var t=typeof Symbol=="function"&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&typeof e.length=="number")return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(os,"__esModule",{value:!0});os.Intersect=void 0;var rI=He(),nG=Ue();function iG(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r={tag:"intersect",intersectees:e};return(0,rI.create)(function(n,i){var o,a;try{for(var s=rG(e),u=s.next();!u.done;u=s.next()){var l=u.value,c=(0,rI.innerValidate)(l,n,i);if(!c.success)return c}}catch(f){o={error:f}}finally{try{u&&!u.done&&(a=s.return)&&a.call(s)}finally{if(o)throw o.error}}return(0,nG.SUCCESS)(n)},r)}os.Intersect=iG});var iI=y(Vp=>{"use strict";Object.defineProperty(Vp,"__esModule",{value:!0});Vp.Optional=void 0;var oG=He(),aG=Ue();function sG(e){var t={tag:"optional",underlying:e};return(0,oG.create)(function(r){return r===void 0?(0,aG.SUCCESS)(r):e.validate(r)},t)}Vp.Optional=sG});var sI=y(Gp=>{"use strict";Object.defineProperty(Gp,"__esModule",{value:!0});Gp.Function=void 0;var uG=He(),oI=Ue(),aI={tag:"function"};Gp.Function=(0,uG.create)(function(e){return typeof e=="function"?(0,oI.SUCCESS)(e):oI.FAILURE.TYPE_INCORRECT(aI,e)},aI)});var lI=y($p=>{"use strict";Object.defineProperty($p,"__esModule",{value:!0});$p.InstanceOf=void 0;var lG=He(),uI=Ue();function cG(e){var t={tag:"instanceof",ctor:e};return(0,lG.create)(function(r){return r instanceof e?(0,uI.SUCCESS)(r):uI.FAILURE.TYPE_INCORRECT(t,r)},t)}$p.InstanceOf=cG});var cI=y(Qp=>{"use strict";Object.defineProperty(Qp,"__esModule",{value:!0});Qp.Lazy=void 0;var fG=He();function pG(e){var t={get tag(){return n().tag}},r;function n(){if(!r){r=e();for(var i in r)i!=="tag"&&(t[i]=r[i])}return r}return(0,fG.create)(function(i){return n().validate(i)},t)}Qp.Lazy=pG});var fI=y(Kp=>{"use strict";Object.defineProperty(Kp,"__esModule",{value:!0});Kp.Brand=void 0;var dG=He();function hG(e,t){var r={tag:"brand",brand:e,entity:t};return(0,dG.create)(function(n){return t.validate(n)},r)}Kp.Brand=hG});var pI=y(as=>{"use strict";Object.defineProperty(as,"__esModule",{value:!0});as.checked=as.check=void 0;var mG=ts(),vG=Ue(),lg=new WeakMap;function yG(e,t,r){var n=lg.get(e)||new Map;lg.set(e,n);var i=n.get(t)||[];n.set(t,i),i.push(r)}as.check=yG;function gG(e,t,r){var n=lg.get(e),i=n&&n.get(t);if(i)return i;for(var o=[],a=0;a<r;a++)o.push(a);return o}function EG(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(e.length===0)throw new Error("No runtype provided to `@checked`. Please remove the decorator.");return function(r,n,i){var o=i.value,a=(r.name||r.constructor.name+".prototype")+(typeof n=="string"?'["'.concat(n,'"]'):"[".concat(String(n),"]")),s=gG(r,n,e.length);if(s.length!==e.length)throw new Error("Number of `@checked` runtypes and @check parameters not matched.");if(s.length>o.length)throw new Error("Number of `@checked` runtypes exceeds actual parameter length.");i.value=function(){for(var u=[],l=0;l<arguments.length;l++)u[l]=arguments[l];return e.forEach(function(c,f){var p=s[f],d=c.validate(u[p]);if(!d.success){var m="".concat(a,", argument #").concat(p,": ").concat(d.message),E=vG.FAILURE.ARGUMENT_INCORRECT(m);throw new mG.ValidationError(E)}}),o.apply(this,u)}}}as.checked=EG});var al=y(W=>{"use strict";var TG=W&&W.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),we=W&&W.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&TG(t,e,r)};Object.defineProperty(W,"__esModule",{value:!0});W.InstanceOf=W.Nullish=W.Null=W.Undefined=W.Literal=void 0;we(m1(),W);we(By(),W);we(y1(),W);we(T1(),W);we(_1(),W);we(ts(),W);we(Ip(),W);we(w1(),W);we(O1(),W);var Bp=Jy();Object.defineProperty(W,"Literal",{enumerable:!0,get:function(){return Bp.Literal}});Object.defineProperty(W,"Undefined",{enumerable:!0,get:function(){return Bp.Undefined}});Object.defineProperty(W,"Null",{enumerable:!0,get:function(){return Bp.Null}});Object.defineProperty(W,"Nullish",{enumerable:!0,get:function(){return Bp.Nullish}});we(x1(),W);we(D1(),W);we(F1(),W);we(U1(),W);we(ng(),W);we(B1(),W);we(W1(),W);we(X1(),W);we(Z1(),W);we(tI(),W);we(Wy(),W);we(nI(),W);we(iI(),W);we(sI(),W);var _G=lI();Object.defineProperty(W,"InstanceOf",{enumerable:!0,get:function(){return _G.InstanceOf}});we(cI(),W);we(sg(),W);we(fI(),W);we(pI(),W)});var VI=y(Pe=>{"use strict";function Tg(e,t){var r=e.length;e.push(t);e:for(;0<r;){var n=r-1>>>1,i=e[n];if(0<ed(i,t))e[n]=t,e[r]=i,r=n;else break e}}function pn(e){return e.length===0?null:e[0]}function rd(e){if(e.length===0)return null;var t=e[0],r=e.pop();if(r!==t){e[0]=r;e:for(var n=0,i=e.length,o=i>>>1;n<o;){var a=2*(n+1)-1,s=e[a],u=a+1,l=e[u];if(0>ed(s,r))u<i&&0>ed(l,s)?(e[n]=l,e[u]=r,n=u):(e[n]=s,e[a]=r,n=a);else if(u<i&&0>ed(l,r))e[n]=l,e[u]=r,n=u;else break e}}return t}function ed(e,t){var r=e.sortIndex-t.sortIndex;return r!==0?r:e.id-t.id}typeof performance=="object"&&typeof performance.now=="function"?(CI=performance,Pe.unstable_now=function(){return CI.now()}):(yg=Date,kI=yg.now(),Pe.unstable_now=function(){return yg.now()-kI});var CI,yg,kI,Kn=[],to=[],KG=1,$r=null,xt=3,nd=!1,ra=!1,yl=!1,jI=typeof setTimeout=="function"?setTimeout:null,FI=typeof clearTimeout=="function"?clearTimeout:null,DI=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function _g(e){for(var t=pn(to);t!==null;){if(t.callback===null)rd(to);else if(t.startTime<=e)rd(to),t.sortIndex=t.expirationTime,Tg(Kn,t);else break;t=pn(to)}}function bg(e){if(yl=!1,_g(e),!ra)if(pn(Kn)!==null)ra=!0,wg(Sg);else{var t=pn(to);t!==null&&Og(bg,t.startTime-e)}}function Sg(e,t){ra=!1,yl&&(yl=!1,FI(gl),gl=-1),nd=!0;var r=xt;try{for(_g(t),$r=pn(Kn);$r!==null&&(!($r.expirationTime>t)||e&&!UI());){var n=$r.callback;if(typeof n=="function"){$r.callback=null,xt=$r.priorityLevel;var i=n($r.expirationTime<=t);t=Pe.unstable_now(),typeof i=="function"?$r.callback=i:$r===pn(Kn)&&rd(Kn),_g(t)}else rd(Kn);$r=pn(Kn)}if($r!==null)var o=!0;else{var a=pn(to);a!==null&&Og(bg,a.startTime-t),o=!1}return o}finally{$r=null,xt=r,nd=!1}}var id=!1,td=null,gl=-1,MI=5,qI=-1;function UI(){return!(Pe.unstable_now()-qI<MI)}function gg(){if(td!==null){var e=Pe.unstable_now();qI=e;var t=!0;try{t=td(!0,e)}finally{t?vl():(id=!1,td=null)}}else id=!1}var vl;typeof DI=="function"?vl=function(){DI(gg)}:typeof MessageChannel<"u"?(Eg=new MessageChannel,AI=Eg.port2,Eg.port1.onmessage=gg,vl=function(){AI.postMessage(null)}):vl=function(){jI(gg,0)};var Eg,AI;function wg(e){td=e,id||(id=!0,vl())}function Og(e,t){gl=jI(function(){e(Pe.unstable_now())},t)}Pe.unstable_IdlePriority=5;Pe.unstable_ImmediatePriority=1;Pe.unstable_LowPriority=4;Pe.unstable_NormalPriority=3;Pe.unstable_Profiling=null;Pe.unstable_UserBlockingPriority=2;Pe.unstable_cancelCallback=function(e){e.callback=null};Pe.unstable_continueExecution=function(){ra||nd||(ra=!0,wg(Sg))};Pe.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):MI=0<e?Math.floor(1e3/e):5};Pe.unstable_getCurrentPriorityLevel=function(){return xt};Pe.unstable_getFirstCallbackNode=function(){return pn(Kn)};Pe.unstable_next=function(e){switch(xt){case 1:case 2:case 3:var t=3;break;default:t=xt}var r=xt;xt=t;try{return e()}finally{xt=r}};Pe.unstable_pauseExecution=function(){};Pe.unstable_requestPaint=function(){};Pe.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=xt;xt=e;try{return t()}finally{xt=r}};Pe.unstable_scheduleCallback=function(e,t,r){var n=Pe.unstable_now();switch(typeof r=="object"&&r!==null?(r=r.delay,r=typeof r=="number"&&0<r?n+r:n):r=n,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return i=r+i,e={id:KG++,callback:t,priorityLevel:e,startTime:r,expirationTime:i,sortIndex:-1},r>n?(e.sortIndex=r,Tg(to,e),pn(Kn)===null&&e===pn(to)&&(yl?(FI(gl),gl=-1):yl=!0,Og(bg,r-n))):(e.sortIndex=i,Tg(Kn,e),ra||nd||(ra=!0,wg(Sg))),e};Pe.unstable_shouldYield=UI;Pe.unstable_wrapCallback=function(e){var t=xt;return function(){var r=xt;xt=t;try{return e.apply(this,arguments)}finally{xt=r}}}});var $I=y((vre,GI)=>{"use strict";GI.exports=VI()});var WP=y(kr=>{"use strict";var YR=ve(),xr=$I();function P(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var XR=new Set,Ul={};function ma(e,t){xs(e,t),xs(e+"Capture",t)}function xs(e,t){for(Ul[e]=t,e=0;e<t.length;e++)XR.add(t[e])}var bi=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),zg=Object.prototype.hasOwnProperty,BG=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,QI={},KI={};function HG(e){return zg.call(KI,e)?!0:zg.call(QI,e)?!1:BG.test(e)?KI[e]=!0:(QI[e]=!0,!1)}function zG(e,t,r,n){if(r!==null&&r.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return n?!1:r!==null?!r.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function WG(e,t,r,n){if(t===null||typeof t>"u"||zG(e,t,r,n))return!0;if(n)return!1;if(r!==null)switch(r.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function Jt(e,t,r,n,i,o,a){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=n,this.attributeNamespace=i,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=a}var Nt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){Nt[e]=new Jt(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];Nt[t]=new Jt(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){Nt[e]=new Jt(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){Nt[e]=new Jt(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){Nt[e]=new Jt(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){Nt[e]=new Jt(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){Nt[e]=new Jt(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){Nt[e]=new Jt(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){Nt[e]=new Jt(e,5,!1,e.toLowerCase(),null,!1,!1)});var U0=/[\-:]([a-z])/g;function V0(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(U0,V0);Nt[t]=new Jt(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(U0,V0);Nt[t]=new Jt(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(U0,V0);Nt[t]=new Jt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){Nt[e]=new Jt(e,1,!1,e.toLowerCase(),null,!1,!1)});Nt.xlinkHref=new Jt("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){Nt[e]=new Jt(e,1,!1,e.toLowerCase(),null,!0,!0)});function G0(e,t,r,n){var i=Nt.hasOwnProperty(t)?Nt[t]:null;(i!==null?i.type!==0:n||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&(WG(t,r,i,n)&&(r=null),n||i===null?HG(t)&&(r===null?e.removeAttribute(t):e.setAttribute(t,""+r)):i.mustUseProperty?e[i.propertyName]=r===null?i.type===3?!1:"":r:(t=i.attributeName,n=i.attributeNamespace,r===null?e.removeAttribute(t):(i=i.type,r=i===3||i===4&&r===!0?"":""+r,n?e.setAttributeNS(n,t,r):e.setAttribute(t,r))))}var Ni=YR.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,od=Symbol.for("react.element"),ds=Symbol.for("react.portal"),hs=Symbol.for("react.fragment"),$0=Symbol.for("react.strict_mode"),Wg=Symbol.for("react.profiler"),JR=Symbol.for("react.provider"),ZR=Symbol.for("react.context"),Q0=Symbol.for("react.forward_ref"),Yg=Symbol.for("react.suspense"),Xg=Symbol.for("react.suspense_list"),K0=Symbol.for("react.memo"),no=Symbol.for("react.lazy");Symbol.for("react.scope");Symbol.for("react.debug_trace_mode");var eL=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden");Symbol.for("react.cache");Symbol.for("react.tracing_marker");var BI=Symbol.iterator;function El(e){return e===null||typeof e!="object"?null:(e=BI&&e[BI]||e["@@iterator"],typeof e=="function"?e:null)}var Be=Object.assign,Ng;function Il(e){if(Ng===void 0)try{throw Error()}catch(r){var t=r.stack.trim().match(/\n( *(at )?)/);Ng=t&&t[1]||""}return`
`+Ng+e}var Ig=!1;function Rg(e,t){if(!e||Ig)return"";Ig=!0;var r=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(l){var n=l}Reflect.construct(e,[],t)}else{try{t.call()}catch(l){n=l}e.call(t.prototype)}else{try{throw Error()}catch(l){n=l}e()}}catch(l){if(l&&n&&typeof l.stack=="string"){for(var i=l.stack.split(`
`),o=n.stack.split(`
`),a=i.length-1,s=o.length-1;1<=a&&0<=s&&i[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(i[a]!==o[s]){if(a!==1||s!==1)do if(a--,s--,0>s||i[a]!==o[s]){var u=`
`+i[a].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}while(1<=a&&0<=s);break}}}finally{Ig=!1,Error.prepareStackTrace=r}return(e=e?e.displayName||e.name:"")?Il(e):""}function YG(e){switch(e.tag){case 5:return Il(e.type);case 16:return Il("Lazy");case 13:return Il("Suspense");case 19:return Il("SuspenseList");case 0:case 2:case 15:return e=Rg(e.type,!1),e;case 11:return e=Rg(e.type.render,!1),e;case 1:return e=Rg(e.type,!0),e;default:return""}}function Jg(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case hs:return"Fragment";case ds:return"Portal";case Wg:return"Profiler";case $0:return"StrictMode";case Yg:return"Suspense";case Xg:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case ZR:return(e.displayName||"Context")+".Consumer";case JR:return(e._context.displayName||"Context")+".Provider";case Q0:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case K0:return t=e.displayName||null,t!==null?t:Jg(e.type)||"Memo";case no:t=e._payload,e=e._init;try{return Jg(e(t))}catch{}}return null}function XG(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return Jg(t);case 8:return t===$0?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function go(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function tL(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function JG(e){var t=tL(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&typeof r<"u"&&typeof r.get=="function"&&typeof r.set=="function"){var i=r.get,o=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(a){n=""+a,o.call(this,a)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return n},setValue:function(a){n=""+a},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function ad(e){e._valueTracker||(e._valueTracker=JG(e))}function rL(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),n="";return e&&(n=tL(e)?e.checked?"true":"false":e.value),e=n,e!==r?(t.setValue(e),!0):!1}function Dd(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function Zg(e,t){var r=t.checked;return Be({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:r??e._wrapperState.initialChecked})}function HI(e,t){var r=t.defaultValue==null?"":t.defaultValue,n=t.checked!=null?t.checked:t.defaultChecked;r=go(t.value!=null?t.value:r),e._wrapperState={initialChecked:n,initialValue:r,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function nL(e,t){t=t.checked,t!=null&&G0(e,"checked",t,!1)}function e0(e,t){nL(e,t);var r=go(t.value),n=t.type;if(r!=null)n==="number"?(r===0&&e.value===""||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r);else if(n==="submit"||n==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?t0(e,t.type,r):t.hasOwnProperty("defaultValue")&&t0(e,t.type,go(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function zI(e,t,r){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!(n!=="submit"&&n!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,r||t===e.value||(e.value=t),e.defaultValue=t}r=e.name,r!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,r!==""&&(e.name=r)}function t0(e,t,r){(t!=="number"||Dd(e.ownerDocument)!==e)&&(r==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}var Rl=Array.isArray;function Os(e,t,r,n){if(e=e.options,t){t={};for(var i=0;i<r.length;i++)t["$"+r[i]]=!0;for(r=0;r<e.length;r++)i=t.hasOwnProperty("$"+e[r].value),e[r].selected!==i&&(e[r].selected=i),i&&n&&(e[r].defaultSelected=!0)}else{for(r=""+go(r),t=null,i=0;i<e.length;i++){if(e[i].value===r){e[i].selected=!0,n&&(e[i].defaultSelected=!0);return}t!==null||e[i].disabled||(t=e[i])}t!==null&&(t.selected=!0)}}function r0(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(P(91));return Be({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function WI(e,t){var r=t.value;if(r==null){if(r=t.children,t=t.defaultValue,r!=null){if(t!=null)throw Error(P(92));if(Rl(r)){if(1<r.length)throw Error(P(93));r=r[0]}t=r}t==null&&(t=""),r=t}e._wrapperState={initialValue:go(r)}}function iL(e,t){var r=go(t.value),n=go(t.defaultValue);r!=null&&(r=""+r,r!==e.value&&(e.value=r),t.defaultValue==null&&e.defaultValue!==r&&(e.defaultValue=r)),n!=null&&(e.defaultValue=""+n)}function YI(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function oL(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function n0(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?oL(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var sd,aL=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,r,n,i){MSApp.execUnsafeLocalFunction(function(){return e(t,r,n,i)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(sd=sd||document.createElement("div"),sd.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=sd.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function Vl(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&r.nodeType===3){r.nodeValue=t;return}}e.textContent=t}var xl={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ZG=["Webkit","ms","Moz","O"];Object.keys(xl).forEach(function(e){ZG.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),xl[t]=xl[e]})});function sL(e,t,r){return t==null||typeof t=="boolean"||t===""?"":r||typeof t!="number"||t===0||xl.hasOwnProperty(e)&&xl[e]?(""+t).trim():t+"px"}function uL(e,t){e=e.style;for(var r in t)if(t.hasOwnProperty(r)){var n=r.indexOf("--")===0,i=sL(r,t[r],n);r==="float"&&(r="cssFloat"),n?e.setProperty(r,i):e[r]=i}}var e6=Be({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function i0(e,t){if(t){if(e6[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(P(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(P(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(P(61))}if(t.style!=null&&typeof t.style!="object")throw Error(P(62))}}function o0(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var a0=null;function B0(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var s0=null,Ns=null,Is=null;function XI(e){if(e=oc(e)){if(typeof s0!="function")throw Error(P(280));var t=e.stateNode;t&&(t=uh(t),s0(e.stateNode,e.type,t))}}function lL(e){Ns?Is?Is.push(e):Is=[e]:Ns=e}function cL(){if(Ns){var e=Ns,t=Is;if(Is=Ns=null,XI(e),t)for(e=0;e<t.length;e++)XI(t[e])}}function fL(e,t){return e(t)}function pL(){}var Lg=!1;function dL(e,t,r){if(Lg)return e(t,r);Lg=!0;try{return fL(e,t,r)}finally{Lg=!1,(Ns!==null||Is!==null)&&(pL(),cL())}}function Gl(e,t){var r=e.stateNode;if(r===null)return null;var n=uh(r);if(n===null)return null;r=n[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(n=!n.disabled)||(e=e.type,n=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!n;break e;default:e=!1}if(e)return null;if(r&&typeof r!="function")throw Error(P(231,t,typeof r));return r}var u0=!1;if(bi)try{fs={},Object.defineProperty(fs,"passive",{get:function(){u0=!0}}),window.addEventListener("test",fs,fs),window.removeEventListener("test",fs,fs)}catch{u0=!1}var fs;function t6(e,t,r,n,i,o,a,s,u){var l=Array.prototype.slice.call(arguments,3);try{t.apply(r,l)}catch(c){this.onError(c)}}var Cl=!1,Ad=null,jd=!1,l0=null,r6={onError:function(e){Cl=!0,Ad=e}};function n6(e,t,r,n,i,o,a,s,u){Cl=!1,Ad=null,t6.apply(r6,arguments)}function i6(e,t,r,n,i,o,a,s,u){if(n6.apply(this,arguments),Cl){if(Cl){var l=Ad;Cl=!1,Ad=null}else throw Error(P(198));jd||(jd=!0,l0=l)}}function va(e){var t=e,r=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,(t.flags&4098)!==0&&(r=t.return),e=t.return;while(e)}return t.tag===3?r:null}function hL(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function JI(e){if(va(e)!==e)throw Error(P(188))}function o6(e){var t=e.alternate;if(!t){if(t=va(e),t===null)throw Error(P(188));return t!==e?null:e}for(var r=e,n=t;;){var i=r.return;if(i===null)break;var o=i.alternate;if(o===null){if(n=i.return,n!==null){r=n;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===r)return JI(i),e;if(o===n)return JI(i),t;o=o.sibling}throw Error(P(188))}if(r.return!==n.return)r=i,n=o;else{for(var a=!1,s=i.child;s;){if(s===r){a=!0,r=i,n=o;break}if(s===n){a=!0,n=i,r=o;break}s=s.sibling}if(!a){for(s=o.child;s;){if(s===r){a=!0,r=o,n=i;break}if(s===n){a=!0,n=o,r=i;break}s=s.sibling}if(!a)throw Error(P(189))}}if(r.alternate!==n)throw Error(P(190))}if(r.tag!==3)throw Error(P(188));return r.stateNode.current===r?e:t}function mL(e){return e=o6(e),e!==null?vL(e):null}function vL(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=vL(e);if(t!==null)return t;e=e.sibling}return null}var yL=xr.unstable_scheduleCallback,ZI=xr.unstable_cancelCallback,a6=xr.unstable_shouldYield,s6=xr.unstable_requestPaint,et=xr.unstable_now,u6=xr.unstable_getCurrentPriorityLevel,H0=xr.unstable_ImmediatePriority,gL=xr.unstable_UserBlockingPriority,Fd=xr.unstable_NormalPriority,l6=xr.unstable_LowPriority,EL=xr.unstable_IdlePriority,ih=null,Wn=null;function c6(e){if(Wn&&typeof Wn.onCommitFiberRoot=="function")try{Wn.onCommitFiberRoot(ih,e,void 0,(e.current.flags&128)===128)}catch{}}var yn=Math.clz32?Math.clz32:d6,f6=Math.log,p6=Math.LN2;function d6(e){return e>>>=0,e===0?32:31-(f6(e)/p6|0)|0}var ud=64,ld=4194304;function Ll(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function Md(e,t){var r=e.pendingLanes;if(r===0)return 0;var n=0,i=e.suspendedLanes,o=e.pingedLanes,a=r&268435455;if(a!==0){var s=a&~i;s!==0?n=Ll(s):(o&=a,o!==0&&(n=Ll(o)))}else a=r&~i,a!==0?n=Ll(a):o!==0&&(n=Ll(o));if(n===0)return 0;if(t!==0&&t!==n&&(t&i)===0&&(i=n&-n,o=t&-t,i>=o||i===16&&(o&4194240)!==0))return t;if((n&4)!==0&&(n|=r&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=n;0<t;)r=31-yn(t),i=1<<r,n|=e[r],t&=~i;return n}function h6(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function m6(e,t){for(var r=e.suspendedLanes,n=e.pingedLanes,i=e.expirationTimes,o=e.pendingLanes;0<o;){var a=31-yn(o),s=1<<a,u=i[a];u===-1?((s&r)===0||(s&n)!==0)&&(i[a]=h6(s,t)):u<=t&&(e.expiredLanes|=s),o&=~s}}function c0(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function TL(){var e=ud;return ud<<=1,(ud&4194240)===0&&(ud=64),e}function Pg(e){for(var t=[],r=0;31>r;r++)t.push(e);return t}function nc(e,t,r){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-yn(t),e[t]=r}function v6(e,t){var r=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var n=e.eventTimes;for(e=e.expirationTimes;0<r;){var i=31-yn(r),o=1<<i;t[i]=0,n[i]=-1,e[i]=-1,r&=~o}}function z0(e,t){var r=e.entangledLanes|=t;for(e=e.entanglements;r;){var n=31-yn(r),i=1<<n;i&t|e[n]&t&&(e[n]|=t),r&=~i}}var Ee=0;function _L(e){return e&=-e,1<e?4<e?(e&268435455)!==0?16:536870912:4:1}var bL,W0,SL,wL,OL,f0=!1,cd=[],lo=null,co=null,fo=null,$l=new Map,Ql=new Map,oo=[],y6="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function eR(e,t){switch(e){case"focusin":case"focusout":lo=null;break;case"dragenter":case"dragleave":co=null;break;case"mouseover":case"mouseout":fo=null;break;case"pointerover":case"pointerout":$l.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Ql.delete(t.pointerId)}}function Tl(e,t,r,n,i,o){return e===null||e.nativeEvent!==o?(e={blockedOn:t,domEventName:r,eventSystemFlags:n,nativeEvent:o,targetContainers:[i]},t!==null&&(t=oc(t),t!==null&&W0(t)),e):(e.eventSystemFlags|=n,t=e.targetContainers,i!==null&&t.indexOf(i)===-1&&t.push(i),e)}function g6(e,t,r,n,i){switch(t){case"focusin":return lo=Tl(lo,e,t,r,n,i),!0;case"dragenter":return co=Tl(co,e,t,r,n,i),!0;case"mouseover":return fo=Tl(fo,e,t,r,n,i),!0;case"pointerover":var o=i.pointerId;return $l.set(o,Tl($l.get(o)||null,e,t,r,n,i)),!0;case"gotpointercapture":return o=i.pointerId,Ql.set(o,Tl(Ql.get(o)||null,e,t,r,n,i)),!0}return!1}function NL(e){var t=oa(e.target);if(t!==null){var r=va(t);if(r!==null){if(t=r.tag,t===13){if(t=hL(r),t!==null){e.blockedOn=t,OL(e.priority,function(){SL(r)});return}}else if(t===3&&r.stateNode.current.memoizedState.isDehydrated){e.blockedOn=r.tag===3?r.stateNode.containerInfo:null;return}}}e.blockedOn=null}function wd(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var r=p0(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(r===null){r=e.nativeEvent;var n=new r.constructor(r.type,r);a0=n,r.target.dispatchEvent(n),a0=null}else return t=oc(r),t!==null&&W0(t),e.blockedOn=r,!1;t.shift()}return!0}function tR(e,t,r){wd(e)&&r.delete(t)}function E6(){f0=!1,lo!==null&&wd(lo)&&(lo=null),co!==null&&wd(co)&&(co=null),fo!==null&&wd(fo)&&(fo=null),$l.forEach(tR),Ql.forEach(tR)}function _l(e,t){e.blockedOn===t&&(e.blockedOn=null,f0||(f0=!0,xr.unstable_scheduleCallback(xr.unstable_NormalPriority,E6)))}function Kl(e){function t(i){return _l(i,e)}if(0<cd.length){_l(cd[0],e);for(var r=1;r<cd.length;r++){var n=cd[r];n.blockedOn===e&&(n.blockedOn=null)}}for(lo!==null&&_l(lo,e),co!==null&&_l(co,e),fo!==null&&_l(fo,e),$l.forEach(t),Ql.forEach(t),r=0;r<oo.length;r++)n=oo[r],n.blockedOn===e&&(n.blockedOn=null);for(;0<oo.length&&(r=oo[0],r.blockedOn===null);)NL(r),r.blockedOn===null&&oo.shift()}var Rs=Ni.ReactCurrentBatchConfig,qd=!0;function T6(e,t,r,n){var i=Ee,o=Rs.transition;Rs.transition=null;try{Ee=1,Y0(e,t,r,n)}finally{Ee=i,Rs.transition=o}}function _6(e,t,r,n){var i=Ee,o=Rs.transition;Rs.transition=null;try{Ee=4,Y0(e,t,r,n)}finally{Ee=i,Rs.transition=o}}function Y0(e,t,r,n){if(qd){var i=p0(e,t,r,n);if(i===null)Fg(e,t,n,Ud,r),eR(e,n);else if(g6(i,e,t,r,n))n.stopPropagation();else if(eR(e,n),t&4&&-1<y6.indexOf(e)){for(;i!==null;){var o=oc(i);if(o!==null&&bL(o),o=p0(e,t,r,n),o===null&&Fg(e,t,n,Ud,r),o===i)break;i=o}i!==null&&n.stopPropagation()}else Fg(e,t,n,null,r)}}var Ud=null;function p0(e,t,r,n){if(Ud=null,e=B0(n),e=oa(e),e!==null)if(t=va(e),t===null)e=null;else if(r=t.tag,r===13){if(e=hL(t),e!==null)return e;e=null}else if(r===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Ud=e,null}function IL(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(u6()){case H0:return 1;case gL:return 4;case Fd:case l6:return 16;case EL:return 536870912;default:return 16}default:return 16}}var so=null,X0=null,Od=null;function RL(){if(Od)return Od;var e,t=X0,r=t.length,n,i="value"in so?so.value:so.textContent,o=i.length;for(e=0;e<r&&t[e]===i[e];e++);var a=r-e;for(n=1;n<=a&&t[r-n]===i[o-n];n++);return Od=i.slice(e,1<n?1-n:void 0)}function Nd(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function fd(){return!0}function rR(){return!1}function Cr(e){function t(r,n,i,o,a){this._reactName=r,this._targetInst=i,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null;for(var s in e)e.hasOwnProperty(s)&&(r=e[s],this[s]=r?r(o):o[s]);return this.isDefaultPrevented=(o.defaultPrevented!=null?o.defaultPrevented:o.returnValue===!1)?fd:rR,this.isPropagationStopped=rR,this}return Be(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var r=this.nativeEvent;r&&(r.preventDefault?r.preventDefault():typeof r.returnValue!="unknown"&&(r.returnValue=!1),this.isDefaultPrevented=fd)},stopPropagation:function(){var r=this.nativeEvent;r&&(r.stopPropagation?r.stopPropagation():typeof r.cancelBubble!="unknown"&&(r.cancelBubble=!0),this.isPropagationStopped=fd)},persist:function(){},isPersistent:fd}),t}var Ms={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},J0=Cr(Ms),ic=Be({},Ms,{view:0,detail:0}),b6=Cr(ic),xg,Cg,bl,oh=Be({},ic,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Z0,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==bl&&(bl&&e.type==="mousemove"?(xg=e.screenX-bl.screenX,Cg=e.screenY-bl.screenY):Cg=xg=0,bl=e),xg)},movementY:function(e){return"movementY"in e?e.movementY:Cg}}),nR=Cr(oh),S6=Be({},oh,{dataTransfer:0}),w6=Cr(S6),O6=Be({},ic,{relatedTarget:0}),kg=Cr(O6),N6=Be({},Ms,{animationName:0,elapsedTime:0,pseudoElement:0}),I6=Cr(N6),R6=Be({},Ms,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),L6=Cr(R6),P6=Be({},Ms,{data:0}),iR=Cr(P6),x6={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},C6={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},k6={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function D6(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=k6[e])?!!t[e]:!1}function Z0(){return D6}var A6=Be({},ic,{key:function(e){if(e.key){var t=x6[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=Nd(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?C6[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Z0,charCode:function(e){return e.type==="keypress"?Nd(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?Nd(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),j6=Cr(A6),F6=Be({},oh,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),oR=Cr(F6),M6=Be({},ic,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Z0}),q6=Cr(M6),U6=Be({},Ms,{propertyName:0,elapsedTime:0,pseudoElement:0}),V6=Cr(U6),G6=Be({},oh,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),$6=Cr(G6),Q6=[9,13,27,32],eE=bi&&"CompositionEvent"in window,kl=null;bi&&"documentMode"in document&&(kl=document.documentMode);var K6=bi&&"TextEvent"in window&&!kl,LL=bi&&(!eE||kl&&8<kl&&11>=kl),aR=String.fromCharCode(32),sR=!1;function PL(e,t){switch(e){case"keyup":return Q6.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function xL(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var ms=!1;function B6(e,t){switch(e){case"compositionend":return xL(t);case"keypress":return t.which!==32?null:(sR=!0,aR);case"textInput":return e=t.data,e===aR&&sR?null:e;default:return null}}function H6(e,t){if(ms)return e==="compositionend"||!eE&&PL(e,t)?(e=RL(),Od=X0=so=null,ms=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return LL&&t.locale!=="ko"?null:t.data;default:return null}}var z6={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function uR(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!z6[e.type]:t==="textarea"}function CL(e,t,r,n){lL(n),t=Vd(t,"onChange"),0<t.length&&(r=new J0("onChange","change",null,r,n),e.push({event:r,listeners:t}))}var Dl=null,Bl=null;function W6(e){$L(e,0)}function ah(e){var t=gs(e);if(rL(t))return e}function Y6(e,t){if(e==="change")return t}var kL=!1;bi&&(bi?(dd="oninput"in document,dd||(Dg=document.createElement("div"),Dg.setAttribute("oninput","return;"),dd=typeof Dg.oninput=="function"),pd=dd):pd=!1,kL=pd&&(!document.documentMode||9<document.documentMode));var pd,dd,Dg;function lR(){Dl&&(Dl.detachEvent("onpropertychange",DL),Bl=Dl=null)}function DL(e){if(e.propertyName==="value"&&ah(Bl)){var t=[];CL(t,Bl,e,B0(e)),dL(W6,t)}}function X6(e,t,r){e==="focusin"?(lR(),Dl=t,Bl=r,Dl.attachEvent("onpropertychange",DL)):e==="focusout"&&lR()}function J6(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return ah(Bl)}function Z6(e,t){if(e==="click")return ah(t)}function e$(e,t){if(e==="input"||e==="change")return ah(t)}function t$(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var En=typeof Object.is=="function"?Object.is:t$;function Hl(e,t){if(En(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(n=0;n<r.length;n++){var i=r[n];if(!zg.call(t,i)||!En(e[i],t[i]))return!1}return!0}function cR(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fR(e,t){var r=cR(e);e=0;for(var n;r;){if(r.nodeType===3){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cR(r)}}function AL(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?AL(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function jL(){for(var e=window,t=Dd();t instanceof e.HTMLIFrameElement;){try{var r=typeof t.contentWindow.location.href=="string"}catch{r=!1}if(r)e=t.contentWindow;else break;t=Dd(e.document)}return t}function tE(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function r$(e){var t=jL(),r=e.focusedElem,n=e.selectionRange;if(t!==r&&r&&r.ownerDocument&&AL(r.ownerDocument.documentElement,r)){if(n!==null&&tE(r)){if(t=n.start,e=n.end,e===void 0&&(e=t),"selectionStart"in r)r.selectionStart=t,r.selectionEnd=Math.min(e,r.value.length);else if(e=(t=r.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var i=r.textContent.length,o=Math.min(n.start,i);n=n.end===void 0?o:Math.min(n.end,i),!e.extend&&o>n&&(i=n,n=o,o=i),i=fR(r,o);var a=fR(r,n);i&&a&&(e.rangeCount!==1||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&(t=t.createRange(),t.setStart(i.node,i.offset),e.removeAllRanges(),o>n?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}}for(t=[],e=r;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof r.focus=="function"&&r.focus(),r=0;r<t.length;r++)e=t[r],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var n$=bi&&"documentMode"in document&&11>=document.documentMode,vs=null,d0=null,Al=null,h0=!1;function pR(e,t,r){var n=r.window===r?r.document:r.nodeType===9?r:r.ownerDocument;h0||vs==null||vs!==Dd(n)||(n=vs,"selectionStart"in n&&tE(n)?n={start:n.selectionStart,end:n.selectionEnd}:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection(),n={anchorNode:n.anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}),Al&&Hl(Al,n)||(Al=n,n=Vd(d0,"onSelect"),0<n.length&&(t=new J0("onSelect","select",null,t,r),e.push({event:t,listeners:n}),t.target=vs)))}function hd(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r}var ys={animationend:hd("Animation","AnimationEnd"),animationiteration:hd("Animation","AnimationIteration"),animationstart:hd("Animation","AnimationStart"),transitionend:hd("Transition","TransitionEnd")},Ag={},FL={};bi&&(FL=document.createElement("div").style,"AnimationEvent"in window||(delete ys.animationend.animation,delete ys.animationiteration.animation,delete ys.animationstart.animation),"TransitionEvent"in window||delete ys.transitionend.transition);function sh(e){if(Ag[e])return Ag[e];if(!ys[e])return e;var t=ys[e],r;for(r in t)if(t.hasOwnProperty(r)&&r in FL)return Ag[e]=t[r];return e}var ML=sh("animationend"),qL=sh("animationiteration"),UL=sh("animationstart"),VL=sh("transitionend"),GL=new Map,dR="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function To(e,t){GL.set(e,t),ma(t,[e])}for(md=0;md<dR.length;md++)vd=dR[md],hR=vd.toLowerCase(),mR=vd[0].toUpperCase()+vd.slice(1),To(hR,"on"+mR);var vd,hR,mR,md;To(ML,"onAnimationEnd");To(qL,"onAnimationIteration");To(UL,"onAnimationStart");To("dblclick","onDoubleClick");To("focusin","onFocus");To("focusout","onBlur");To(VL,"onTransitionEnd");xs("onMouseEnter",["mouseout","mouseover"]);xs("onMouseLeave",["mouseout","mouseover"]);xs("onPointerEnter",["pointerout","pointerover"]);xs("onPointerLeave",["pointerout","pointerover"]);ma("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));ma("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));ma("onBeforeInput",["compositionend","keypress","textInput","paste"]);ma("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));ma("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));ma("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Pl="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),i$=new Set("cancel close invalid load scroll toggle".split(" ").concat(Pl));function vR(e,t,r){var n=e.type||"unknown-event";e.currentTarget=r,i6(n,t,void 0,e),e.currentTarget=null}function $L(e,t){t=(t&4)!==0;for(var r=0;r<e.length;r++){var n=e[r],i=n.event;n=n.listeners;e:{var o=void 0;if(t)for(var a=n.length-1;0<=a;a--){var s=n[a],u=s.instance,l=s.currentTarget;if(s=s.listener,u!==o&&i.isPropagationStopped())break e;vR(i,s,l),o=u}else for(a=0;a<n.length;a++){if(s=n[a],u=s.instance,l=s.currentTarget,s=s.listener,u!==o&&i.isPropagationStopped())break e;vR(i,s,l),o=u}}}if(jd)throw e=l0,jd=!1,l0=null,e}function Ae(e,t){var r=t[E0];r===void 0&&(r=t[E0]=new Set);var n=e+"__bubble";r.has(n)||(QL(t,e,2,!1),r.add(n))}function jg(e,t,r){var n=0;t&&(n|=4),QL(r,e,n,t)}var yd="_reactListening"+Math.random().toString(36).slice(2);function zl(e){if(!e[yd]){e[yd]=!0,XR.forEach(function(r){r!=="selectionchange"&&(i$.has(r)||jg(r,!1,e),jg(r,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[yd]||(t[yd]=!0,jg("selectionchange",!1,t))}}function QL(e,t,r,n){switch(IL(t)){case 1:var i=T6;break;case 4:i=_6;break;default:i=Y0}r=i.bind(null,t,r,e),i=void 0,!u0||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(i=!0),n?i!==void 0?e.addEventListener(t,r,{capture:!0,passive:i}):e.addEventListener(t,r,!0):i!==void 0?e.addEventListener(t,r,{passive:i}):e.addEventListener(t,r,!1)}function Fg(e,t,r,n,i){var o=n;if((t&1)===0&&(t&2)===0&&n!==null)e:for(;;){if(n===null)return;var a=n.tag;if(a===3||a===4){var s=n.stateNode.containerInfo;if(s===i||s.nodeType===8&&s.parentNode===i)break;if(a===4)for(a=n.return;a!==null;){var u=a.tag;if((u===3||u===4)&&(u=a.stateNode.containerInfo,u===i||u.nodeType===8&&u.parentNode===i))return;a=a.return}for(;s!==null;){if(a=oa(s),a===null)return;if(u=a.tag,u===5||u===6){n=o=a;continue e}s=s.parentNode}}n=n.return}dL(function(){var l=o,c=B0(r),f=[];e:{var p=GL.get(e);if(p!==void 0){var d=J0,m=e;switch(e){case"keypress":if(Nd(r)===0)break e;case"keydown":case"keyup":d=j6;break;case"focusin":m="focus",d=kg;break;case"focusout":m="blur",d=kg;break;case"beforeblur":case"afterblur":d=kg;break;case"click":if(r.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":d=nR;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":d=w6;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":d=q6;break;case ML:case qL:case UL:d=I6;break;case VL:d=V6;break;case"scroll":d=b6;break;case"wheel":d=$6;break;case"copy":case"cut":case"paste":d=L6;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":d=oR}var E=(t&4)!==0,b=!E&&e==="scroll",h=E?p!==null?p+"Capture":null:p;E=[];for(var v=l,g;v!==null;){g=v;var _=g.stateNode;if(g.tag===5&&_!==null&&(g=_,h!==null&&(_=Gl(v,h),_!=null&&E.push(Wl(v,_,g)))),b)break;v=v.return}0<E.length&&(p=new d(p,m,null,r,c),f.push({event:p,listeners:E}))}}if((t&7)===0){e:{if(p=e==="mouseover"||e==="pointerover",d=e==="mouseout"||e==="pointerout",p&&r!==a0&&(m=r.relatedTarget||r.fromElement)&&(oa(m)||m[Si]))break e;if((d||p)&&(p=c.window===c?c:(p=c.ownerDocument)?p.defaultView||p.parentWindow:window,d?(m=r.relatedTarget||r.toElement,d=l,m=m?oa(m):null,m!==null&&(b=va(m),m!==b||m.tag!==5&&m.tag!==6)&&(m=null)):(d=null,m=l),d!==m)){if(E=nR,_="onMouseLeave",h="onMouseEnter",v="mouse",(e==="pointerout"||e==="pointerover")&&(E=oR,_="onPointerLeave",h="onPointerEnter",v="pointer"),b=d==null?p:gs(d),g=m==null?p:gs(m),p=new E(_,v+"leave",d,r,c),p.target=b,p.relatedTarget=g,_=null,oa(c)===l&&(E=new E(h,v+"enter",m,r,c),E.target=g,E.relatedTarget=b,_=E),b=_,d&&m)t:{for(E=d,h=m,v=0,g=E;g;g=ps(g))v++;for(g=0,_=h;_;_=ps(_))g++;for(;0<v-g;)E=ps(E),v--;for(;0<g-v;)h=ps(h),g--;for(;v--;){if(E===h||h!==null&&E===h.alternate)break t;E=ps(E),h=ps(h)}E=null}else E=null;d!==null&&yR(f,p,d,E,!1),m!==null&&b!==null&&yR(f,b,m,E,!0)}}e:{if(p=l?gs(l):window,d=p.nodeName&&p.nodeName.toLowerCase(),d==="select"||d==="input"&&p.type==="file")var N=Y6;else if(uR(p))if(kL)N=e$;else{N=J6;var R=X6}else(d=p.nodeName)&&d.toLowerCase()==="input"&&(p.type==="checkbox"||p.type==="radio")&&(N=Z6);if(N&&(N=N(e,l))){CL(f,N,r,c);break e}R&&R(e,p,l),e==="focusout"&&(R=p._wrapperState)&&R.controlled&&p.type==="number"&&t0(p,"number",p.value)}switch(R=l?gs(l):window,e){case"focusin":(uR(R)||R.contentEditable==="true")&&(vs=R,d0=l,Al=null);break;case"focusout":Al=d0=vs=null;break;case"mousedown":h0=!0;break;case"contextmenu":case"mouseup":case"dragend":h0=!1,pR(f,r,c);break;case"selectionchange":if(n$)break;case"keydown":case"keyup":pR(f,r,c)}var O;if(eE)e:{switch(e){case"compositionstart":var L="onCompositionStart";break e;case"compositionend":L="onCompositionEnd";break e;case"compositionupdate":L="onCompositionUpdate";break e}L=void 0}else ms?PL(e,r)&&(L="onCompositionEnd"):e==="keydown"&&r.keyCode===229&&(L="onCompositionStart");L&&(LL&&r.locale!=="ko"&&(ms||L!=="onCompositionStart"?L==="onCompositionEnd"&&ms&&(O=RL()):(so=c,X0="value"in so?so.value:so.textContent,ms=!0)),R=Vd(l,L),0<R.length&&(L=new iR(L,e,null,r,c),f.push({event:L,listeners:R}),O?L.data=O:(O=xL(r),O!==null&&(L.data=O)))),(O=K6?B6(e,r):H6(e,r))&&(l=Vd(l,"onBeforeInput"),0<l.length&&(c=new iR("onBeforeInput","beforeinput",null,r,c),f.push({event:c,listeners:l}),c.data=O))}$L(f,t)})}function Wl(e,t,r){return{instance:e,listener:t,currentTarget:r}}function Vd(e,t){for(var r=t+"Capture",n=[];e!==null;){var i=e,o=i.stateNode;i.tag===5&&o!==null&&(i=o,o=Gl(e,r),o!=null&&n.unshift(Wl(e,o,i)),o=Gl(e,t),o!=null&&n.push(Wl(e,o,i))),e=e.return}return n}function ps(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function yR(e,t,r,n,i){for(var o=t._reactName,a=[];r!==null&&r!==n;){var s=r,u=s.alternate,l=s.stateNode;if(u!==null&&u===n)break;s.tag===5&&l!==null&&(s=l,i?(u=Gl(r,o),u!=null&&a.unshift(Wl(r,u,s))):i||(u=Gl(r,o),u!=null&&a.push(Wl(r,u,s)))),r=r.return}a.length!==0&&e.push({event:t,listeners:a})}var o$=/\r\n?/g,a$=/\u0000|\uFFFD/g;function gR(e){return(typeof e=="string"?e:""+e).replace(o$,`
`).replace(a$,"")}function gd(e,t,r){if(t=gR(t),gR(e)!==t&&r)throw Error(P(425))}function Gd(){}var m0=null,v0=null;function y0(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var g0=typeof setTimeout=="function"?setTimeout:void 0,s$=typeof clearTimeout=="function"?clearTimeout:void 0,ER=typeof Promise=="function"?Promise:void 0,u$=typeof queueMicrotask=="function"?queueMicrotask:typeof ER<"u"?function(e){return ER.resolve(null).then(e).catch(l$)}:g0;function l$(e){setTimeout(function(){throw e})}function Mg(e,t){var r=t,n=0;do{var i=r.nextSibling;if(e.removeChild(r),i&&i.nodeType===8)if(r=i.data,r==="/$"){if(n===0){e.removeChild(i),Kl(t);return}n--}else r!=="$"&&r!=="$?"&&r!=="$!"||n++;r=i}while(r);Kl(t)}function po(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function TR(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var r=e.data;if(r==="$"||r==="$!"||r==="$?"){if(t===0)return e;t--}else r==="/$"&&t++}e=e.previousSibling}return null}var qs=Math.random().toString(36).slice(2),zn="__reactFiber$"+qs,Yl="__reactProps$"+qs,Si="__reactContainer$"+qs,E0="__reactEvents$"+qs,c$="__reactListeners$"+qs,f$="__reactHandles$"+qs;function oa(e){var t=e[zn];if(t)return t;for(var r=e.parentNode;r;){if(t=r[Si]||r[zn]){if(r=t.alternate,t.child!==null||r!==null&&r.child!==null)for(e=TR(e);e!==null;){if(r=e[zn])return r;e=TR(e)}return t}e=r,r=e.parentNode}return null}function oc(e){return e=e[zn]||e[Si],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function gs(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(P(33))}function uh(e){return e[Yl]||null}var T0=[],Es=-1;function _o(e){return{current:e}}function je(e){0>Es||(e.current=T0[Es],T0[Es]=null,Es--)}function xe(e,t){Es++,T0[Es]=e.current,e.current=t}var Eo={},At=_o(Eo),ur=_o(!1),ca=Eo;function Cs(e,t){var r=e.type.contextTypes;if(!r)return Eo;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var i={},o;for(o in r)i[o]=t[o];return n&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function lr(e){return e=e.childContextTypes,e!=null}function $d(){je(ur),je(At)}function _R(e,t,r){if(At.current!==Eo)throw Error(P(168));xe(At,t),xe(ur,r)}function KL(e,t,r){var n=e.stateNode;if(t=t.childContextTypes,typeof n.getChildContext!="function")return r;n=n.getChildContext();for(var i in n)if(!(i in t))throw Error(P(108,XG(e)||"Unknown",i));return Be({},r,n)}function Qd(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Eo,ca=At.current,xe(At,e),xe(ur,ur.current),!0}function bR(e,t,r){var n=e.stateNode;if(!n)throw Error(P(169));r?(e=KL(e,t,ca),n.__reactInternalMemoizedMergedChildContext=e,je(ur),je(At),xe(At,e)):je(ur),xe(ur,r)}var gi=null,lh=!1,qg=!1;function BL(e){gi===null?gi=[e]:gi.push(e)}function p$(e){lh=!0,BL(e)}function bo(){if(!qg&&gi!==null){qg=!0;var e=0,t=Ee;try{var r=gi;for(Ee=1;e<r.length;e++){var n=r[e];do n=n(!0);while(n!==null)}gi=null,lh=!1}catch(i){throw gi!==null&&(gi=gi.slice(e+1)),yL(H0,bo),i}finally{Ee=t,qg=!1}}return null}var Ts=[],_s=0,Kd=null,Bd=0,Qr=[],Kr=0,fa=null,Ei=1,Ti="";function na(e,t){Ts[_s++]=Bd,Ts[_s++]=Kd,Kd=e,Bd=t}function HL(e,t,r){Qr[Kr++]=Ei,Qr[Kr++]=Ti,Qr[Kr++]=fa,fa=e;var n=Ei;e=Ti;var i=32-yn(n)-1;n&=~(1<<i),r+=1;var o=32-yn(t)+i;if(30<o){var a=i-i%5;o=(n&(1<<a)-1).toString(32),n>>=a,i-=a,Ei=1<<32-yn(t)+i|r<<i|n,Ti=o+e}else Ei=1<<o|r<<i|n,Ti=e}function rE(e){e.return!==null&&(na(e,1),HL(e,1,0))}function nE(e){for(;e===Kd;)Kd=Ts[--_s],Ts[_s]=null,Bd=Ts[--_s],Ts[_s]=null;for(;e===fa;)fa=Qr[--Kr],Qr[Kr]=null,Ti=Qr[--Kr],Qr[Kr]=null,Ei=Qr[--Kr],Qr[Kr]=null}var Pr=null,Lr=null,Ve=!1,vn=null;function zL(e,t){var r=Br(5,null,null,0);r.elementType="DELETED",r.stateNode=t,r.return=e,t=e.deletions,t===null?(e.deletions=[r],e.flags|=16):t.push(r)}function SR(e,t){switch(e.tag){case 5:var r=e.type;return t=t.nodeType!==1||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,Pr=e,Lr=po(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,Pr=e,Lr=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(r=fa!==null?{id:Ei,overflow:Ti}:null,e.memoizedState={dehydrated:t,treeContext:r,retryLane:1073741824},r=Br(18,null,null,0),r.stateNode=t,r.return=e,e.child=r,Pr=e,Lr=null,!0):!1;default:return!1}}function _0(e){return(e.mode&1)!==0&&(e.flags&128)===0}function b0(e){if(Ve){var t=Lr;if(t){var r=t;if(!SR(e,t)){if(_0(e))throw Error(P(418));t=po(r.nextSibling);var n=Pr;t&&SR(e,t)?zL(n,r):(e.flags=e.flags&-4097|2,Ve=!1,Pr=e)}}else{if(_0(e))throw Error(P(418));e.flags=e.flags&-4097|2,Ve=!1,Pr=e}}}function wR(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;Pr=e}function Ed(e){if(e!==Pr)return!1;if(!Ve)return wR(e),Ve=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!y0(e.type,e.memoizedProps)),t&&(t=Lr)){if(_0(e))throw WL(),Error(P(418));for(;t;)zL(e,t),t=po(t.nextSibling)}if(wR(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(P(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var r=e.data;if(r==="/$"){if(t===0){Lr=po(e.nextSibling);break e}t--}else r!=="$"&&r!=="$!"&&r!=="$?"||t++}e=e.nextSibling}Lr=null}}else Lr=Pr?po(e.stateNode.nextSibling):null;return!0}function WL(){for(var e=Lr;e;)e=po(e.nextSibling)}function ks(){Lr=Pr=null,Ve=!1}function iE(e){vn===null?vn=[e]:vn.push(e)}var d$=Ni.ReactCurrentBatchConfig;function hn(e,t){if(e&&e.defaultProps){t=Be({},t),e=e.defaultProps;for(var r in e)t[r]===void 0&&(t[r]=e[r]);return t}return t}var Hd=_o(null),zd=null,bs=null,oE=null;function aE(){oE=bs=zd=null}function sE(e){var t=Hd.current;je(Hd),e._currentValue=t}function S0(e,t,r){for(;e!==null;){var n=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,n!==null&&(n.childLanes|=t)):n!==null&&(n.childLanes&t)!==t&&(n.childLanes|=t),e===r)break;e=e.return}}function Ls(e,t){zd=e,oE=bs=null,e=e.dependencies,e!==null&&e.firstContext!==null&&((e.lanes&t)!==0&&(sr=!0),e.firstContext=null)}function zr(e){var t=e._currentValue;if(oE!==e)if(e={context:e,memoizedValue:t,next:null},bs===null){if(zd===null)throw Error(P(308));bs=e,zd.dependencies={lanes:0,firstContext:e}}else bs=bs.next=e;return t}var aa=null;function uE(e){aa===null?aa=[e]:aa.push(e)}function YL(e,t,r,n){var i=t.interleaved;return i===null?(r.next=r,uE(t)):(r.next=i.next,i.next=r),t.interleaved=r,wi(e,n)}function wi(e,t){e.lanes|=t;var r=e.alternate;for(r!==null&&(r.lanes|=t),r=e,e=e.return;e!==null;)e.childLanes|=t,r=e.alternate,r!==null&&(r.childLanes|=t),r=e,e=e.return;return r.tag===3?r.stateNode:null}var io=!1;function lE(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function XL(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function _i(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ho(e,t,r){var n=e.updateQueue;if(n===null)return null;if(n=n.shared,(ue&2)!==0){var i=n.pending;return i===null?t.next=t:(t.next=i.next,i.next=t),n.pending=t,wi(e,r)}return i=n.interleaved,i===null?(t.next=t,uE(n)):(t.next=i.next,i.next=t),n.interleaved=t,wi(e,r)}function Id(e,t,r){if(t=t.updateQueue,t!==null&&(t=t.shared,(r&4194240)!==0)){var n=t.lanes;n&=e.pendingLanes,r|=n,t.lanes=r,z0(e,r)}}function OR(e,t){var r=e.updateQueue,n=e.alternate;if(n!==null&&(n=n.updateQueue,r===n)){var i=null,o=null;if(r=r.firstBaseUpdate,r!==null){do{var a={eventTime:r.eventTime,lane:r.lane,tag:r.tag,payload:r.payload,callback:r.callback,next:null};o===null?i=o=a:o=o.next=a,r=r.next}while(r!==null);o===null?i=o=t:o=o.next=t}else i=o=t;r={baseState:n.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:n.shared,effects:n.effects},e.updateQueue=r;return}e=r.lastBaseUpdate,e===null?r.firstBaseUpdate=t:e.next=t,r.lastBaseUpdate=t}function Wd(e,t,r,n){var i=e.updateQueue;io=!1;var o=i.firstBaseUpdate,a=i.lastBaseUpdate,s=i.shared.pending;if(s!==null){i.shared.pending=null;var u=s,l=u.next;u.next=null,a===null?o=l:a.next=l,a=u;var c=e.alternate;c!==null&&(c=c.updateQueue,s=c.lastBaseUpdate,s!==a&&(s===null?c.firstBaseUpdate=l:s.next=l,c.lastBaseUpdate=u))}if(o!==null){var f=i.baseState;a=0,c=l=u=null,s=o;do{var p=s.lane,d=s.eventTime;if((n&p)===p){c!==null&&(c=c.next={eventTime:d,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var m=e,E=s;switch(p=t,d=r,E.tag){case 1:if(m=E.payload,typeof m=="function"){f=m.call(d,f,p);break e}f=m;break e;case 3:m.flags=m.flags&-65537|128;case 0:if(m=E.payload,p=typeof m=="function"?m.call(d,f,p):m,p==null)break e;f=Be({},f,p);break e;case 2:io=!0}}s.callback!==null&&s.lane!==0&&(e.flags|=64,p=i.effects,p===null?i.effects=[s]:p.push(s))}else d={eventTime:d,lane:p,tag:s.tag,payload:s.payload,callback:s.callback,next:null},c===null?(l=c=d,u=f):c=c.next=d,a|=p;if(s=s.next,s===null){if(s=i.shared.pending,s===null)break;p=s,s=p.next,p.next=null,i.lastBaseUpdate=p,i.shared.pending=null}}while(1);if(c===null&&(u=f),i.baseState=u,i.firstBaseUpdate=l,i.lastBaseUpdate=c,t=i.shared.interleaved,t!==null){i=t;do a|=i.lane,i=i.next;while(i!==t)}else o===null&&(i.shared.lanes=0);da|=a,e.lanes=a,e.memoizedState=f}}function NR(e,t,r){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var n=e[t],i=n.callback;if(i!==null){if(n.callback=null,n=r,typeof i!="function")throw Error(P(191,i));i.call(n)}}}var JL=new YR.Component().refs;function w0(e,t,r,n){t=e.memoizedState,r=r(n,t),r=r==null?t:Be({},t,r),e.memoizedState=r,e.lanes===0&&(e.updateQueue.baseState=r)}var ch={isMounted:function(e){return(e=e._reactInternals)?va(e)===e:!1},enqueueSetState:function(e,t,r){e=e._reactInternals;var n=Xt(),i=vo(e),o=_i(n,i);o.payload=t,r!=null&&(o.callback=r),t=ho(e,o,i),t!==null&&(gn(t,e,i,n),Id(t,e,i))},enqueueReplaceState:function(e,t,r){e=e._reactInternals;var n=Xt(),i=vo(e),o=_i(n,i);o.tag=1,o.payload=t,r!=null&&(o.callback=r),t=ho(e,o,i),t!==null&&(gn(t,e,i,n),Id(t,e,i))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var r=Xt(),n=vo(e),i=_i(r,n);i.tag=2,t!=null&&(i.callback=t),t=ho(e,i,n),t!==null&&(gn(t,e,n,r),Id(t,e,n))}};function IR(e,t,r,n,i,o,a){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(n,o,a):t.prototype&&t.prototype.isPureReactComponent?!Hl(r,n)||!Hl(i,o):!0}function ZL(e,t,r){var n=!1,i=Eo,o=t.contextType;return typeof o=="object"&&o!==null?o=zr(o):(i=lr(t)?ca:At.current,n=t.contextTypes,o=(n=n!=null)?Cs(e,i):Eo),t=new t(r,o),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=ch,e.stateNode=t,t._reactInternals=e,n&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function RR(e,t,r,n){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(r,n),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(r,n),t.state!==e&&ch.enqueueReplaceState(t,t.state,null)}function O0(e,t,r,n){var i=e.stateNode;i.props=r,i.state=e.memoizedState,i.refs=JL,lE(e);var o=t.contextType;typeof o=="object"&&o!==null?i.context=zr(o):(o=lr(t)?ca:At.current,i.context=Cs(e,o)),i.state=e.memoizedState,o=t.getDerivedStateFromProps,typeof o=="function"&&(w0(e,t,o,r),i.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof i.getSnapshotBeforeUpdate=="function"||typeof i.UNSAFE_componentWillMount!="function"&&typeof i.componentWillMount!="function"||(t=i.state,typeof i.componentWillMount=="function"&&i.componentWillMount(),typeof i.UNSAFE_componentWillMount=="function"&&i.UNSAFE_componentWillMount(),t!==i.state&&ch.enqueueReplaceState(i,i.state,null),Wd(e,r,i,n),i.state=e.memoizedState),typeof i.componentDidMount=="function"&&(e.flags|=4194308)}function Sl(e,t,r){if(e=r.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(r._owner){if(r=r._owner,r){if(r.tag!==1)throw Error(P(309));var n=r.stateNode}if(!n)throw Error(P(147,e));var i=n,o=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===o?t.ref:(t=function(a){var s=i.refs;s===JL&&(s=i.refs={}),a===null?delete s[o]:s[o]=a},t._stringRef=o,t)}if(typeof e!="string")throw Error(P(284));if(!r._owner)throw Error(P(290,e))}return e}function Td(e,t){throw e=Object.prototype.toString.call(t),Error(P(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function LR(e){var t=e._init;return t(e._payload)}function eP(e){function t(h,v){if(e){var g=h.deletions;g===null?(h.deletions=[v],h.flags|=16):g.push(v)}}function r(h,v){if(!e)return null;for(;v!==null;)t(h,v),v=v.sibling;return null}function n(h,v){for(h=new Map;v!==null;)v.key!==null?h.set(v.key,v):h.set(v.index,v),v=v.sibling;return h}function i(h,v){return h=yo(h,v),h.index=0,h.sibling=null,h}function o(h,v,g){return h.index=g,e?(g=h.alternate,g!==null?(g=g.index,g<v?(h.flags|=2,v):g):(h.flags|=2,v)):(h.flags|=1048576,v)}function a(h){return e&&h.alternate===null&&(h.flags|=2),h}function s(h,v,g,_){return v===null||v.tag!==6?(v=Bg(g,h.mode,_),v.return=h,v):(v=i(v,g),v.return=h,v)}function u(h,v,g,_){var N=g.type;return N===hs?c(h,v,g.props.children,_,g.key):v!==null&&(v.elementType===N||typeof N=="object"&&N!==null&&N.$$typeof===no&&LR(N)===v.type)?(_=i(v,g.props),_.ref=Sl(h,v,g),_.return=h,_):(_=kd(g.type,g.key,g.props,null,h.mode,_),_.ref=Sl(h,v,g),_.return=h,_)}function l(h,v,g,_){return v===null||v.tag!==4||v.stateNode.containerInfo!==g.containerInfo||v.stateNode.implementation!==g.implementation?(v=Hg(g,h.mode,_),v.return=h,v):(v=i(v,g.children||[]),v.return=h,v)}function c(h,v,g,_,N){return v===null||v.tag!==7?(v=la(g,h.mode,_,N),v.return=h,v):(v=i(v,g),v.return=h,v)}function f(h,v,g){if(typeof v=="string"&&v!==""||typeof v=="number")return v=Bg(""+v,h.mode,g),v.return=h,v;if(typeof v=="object"&&v!==null){switch(v.$$typeof){case od:return g=kd(v.type,v.key,v.props,null,h.mode,g),g.ref=Sl(h,null,v),g.return=h,g;case ds:return v=Hg(v,h.mode,g),v.return=h,v;case no:var _=v._init;return f(h,_(v._payload),g)}if(Rl(v)||El(v))return v=la(v,h.mode,g,null),v.return=h,v;Td(h,v)}return null}function p(h,v,g,_){var N=v!==null?v.key:null;if(typeof g=="string"&&g!==""||typeof g=="number")return N!==null?null:s(h,v,""+g,_);if(typeof g=="object"&&g!==null){switch(g.$$typeof){case od:return g.key===N?u(h,v,g,_):null;case ds:return g.key===N?l(h,v,g,_):null;case no:return N=g._init,p(h,v,N(g._payload),_)}if(Rl(g)||El(g))return N!==null?null:c(h,v,g,_,null);Td(h,g)}return null}function d(h,v,g,_,N){if(typeof _=="string"&&_!==""||typeof _=="number")return h=h.get(g)||null,s(v,h,""+_,N);if(typeof _=="object"&&_!==null){switch(_.$$typeof){case od:return h=h.get(_.key===null?g:_.key)||null,u(v,h,_,N);case ds:return h=h.get(_.key===null?g:_.key)||null,l(v,h,_,N);case no:var R=_._init;return d(h,v,g,R(_._payload),N)}if(Rl(_)||El(_))return h=h.get(g)||null,c(v,h,_,N,null);Td(v,_)}return null}function m(h,v,g,_){for(var N=null,R=null,O=v,L=v=0,S=null;O!==null&&L<g.length;L++){O.index>L?(S=O,O=null):S=O.sibling;var I=p(h,O,g[L],_);if(I===null){O===null&&(O=S);break}e&&O&&I.alternate===null&&t(h,O),v=o(I,v,L),R===null?N=I:R.sibling=I,R=I,O=S}if(L===g.length)return r(h,O),Ve&&na(h,L),N;if(O===null){for(;L<g.length;L++)O=f(h,g[L],_),O!==null&&(v=o(O,v,L),R===null?N=O:R.sibling=O,R=O);return Ve&&na(h,L),N}for(O=n(h,O);L<g.length;L++)S=d(O,h,L,g[L],_),S!==null&&(e&&S.alternate!==null&&O.delete(S.key===null?L:S.key),v=o(S,v,L),R===null?N=S:R.sibling=S,R=S);return e&&O.forEach(function($){return t(h,$)}),Ve&&na(h,L),N}function E(h,v,g,_){var N=El(g);if(typeof N!="function")throw Error(P(150));if(g=N.call(g),g==null)throw Error(P(151));for(var R=N=null,O=v,L=v=0,S=null,I=g.next();O!==null&&!I.done;L++,I=g.next()){O.index>L?(S=O,O=null):S=O.sibling;var $=p(h,O,I.value,_);if($===null){O===null&&(O=S);break}e&&O&&$.alternate===null&&t(h,O),v=o($,v,L),R===null?N=$:R.sibling=$,R=$,O=S}if(I.done)return r(h,O),Ve&&na(h,L),N;if(O===null){for(;!I.done;L++,I=g.next())I=f(h,I.value,_),I!==null&&(v=o(I,v,L),R===null?N=I:R.sibling=I,R=I);return Ve&&na(h,L),N}for(O=n(h,O);!I.done;L++,I=g.next())I=d(O,h,L,I.value,_),I!==null&&(e&&I.alternate!==null&&O.delete(I.key===null?L:I.key),v=o(I,v,L),R===null?N=I:R.sibling=I,R=I);return e&&O.forEach(function(Ie){return t(h,Ie)}),Ve&&na(h,L),N}function b(h,v,g,_){if(typeof g=="object"&&g!==null&&g.type===hs&&g.key===null&&(g=g.props.children),typeof g=="object"&&g!==null){switch(g.$$typeof){case od:e:{for(var N=g.key,R=v;R!==null;){if(R.key===N){if(N=g.type,N===hs){if(R.tag===7){r(h,R.sibling),v=i(R,g.props.children),v.return=h,h=v;break e}}else if(R.elementType===N||typeof N=="object"&&N!==null&&N.$$typeof===no&&LR(N)===R.type){r(h,R.sibling),v=i(R,g.props),v.ref=Sl(h,R,g),v.return=h,h=v;break e}r(h,R);break}else t(h,R);R=R.sibling}g.type===hs?(v=la(g.props.children,h.mode,_,g.key),v.return=h,h=v):(_=kd(g.type,g.key,g.props,null,h.mode,_),_.ref=Sl(h,v,g),_.return=h,h=_)}return a(h);case ds:e:{for(R=g.key;v!==null;){if(v.key===R)if(v.tag===4&&v.stateNode.containerInfo===g.containerInfo&&v.stateNode.implementation===g.implementation){r(h,v.sibling),v=i(v,g.children||[]),v.return=h,h=v;break e}else{r(h,v);break}else t(h,v);v=v.sibling}v=Hg(g,h.mode,_),v.return=h,h=v}return a(h);case no:return R=g._init,b(h,v,R(g._payload),_)}if(Rl(g))return m(h,v,g,_);if(El(g))return E(h,v,g,_);Td(h,g)}return typeof g=="string"&&g!==""||typeof g=="number"?(g=""+g,v!==null&&v.tag===6?(r(h,v.sibling),v=i(v,g),v.return=h,h=v):(r(h,v),v=Bg(g,h.mode,_),v.return=h,h=v),a(h)):r(h,v)}return b}var Ds=eP(!0),tP=eP(!1),ac={},Yn=_o(ac),Xl=_o(ac),Jl=_o(ac);function sa(e){if(e===ac)throw Error(P(174));return e}function cE(e,t){switch(xe(Jl,t),xe(Xl,e),xe(Yn,ac),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:n0(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=n0(t,e)}je(Yn),xe(Yn,t)}function As(){je(Yn),je(Xl),je(Jl)}function rP(e){sa(Jl.current);var t=sa(Yn.current),r=n0(t,e.type);t!==r&&(xe(Xl,e),xe(Yn,r))}function fE(e){Xl.current===e&&(je(Yn),je(Xl))}var Qe=_o(0);function Yd(e){for(var t=e;t!==null;){if(t.tag===13){var r=t.memoizedState;if(r!==null&&(r=r.dehydrated,r===null||r.data==="$?"||r.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if((t.flags&128)!==0)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ug=[];function pE(){for(var e=0;e<Ug.length;e++)Ug[e]._workInProgressVersionPrimary=null;Ug.length=0}var Rd=Ni.ReactCurrentDispatcher,Vg=Ni.ReactCurrentBatchConfig,pa=0,Ke=null,at=null,dt=null,Xd=!1,jl=!1,Zl=0,h$=0;function Ct(){throw Error(P(321))}function dE(e,t){if(t===null)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(!En(e[r],t[r]))return!1;return!0}function hE(e,t,r,n,i,o){if(pa=o,Ke=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Rd.current=e===null||e.memoizedState===null?g$:E$,e=r(n,i),jl){o=0;do{if(jl=!1,Zl=0,25<=o)throw Error(P(301));o+=1,dt=at=null,t.updateQueue=null,Rd.current=T$,e=r(n,i)}while(jl)}if(Rd.current=Jd,t=at!==null&&at.next!==null,pa=0,dt=at=Ke=null,Xd=!1,t)throw Error(P(300));return e}function mE(){var e=Zl!==0;return Zl=0,e}function Hn(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return dt===null?Ke.memoizedState=dt=e:dt=dt.next=e,dt}function Wr(){if(at===null){var e=Ke.alternate;e=e!==null?e.memoizedState:null}else e=at.next;var t=dt===null?Ke.memoizedState:dt.next;if(t!==null)dt=t,at=e;else{if(e===null)throw Error(P(310));at=e,e={memoizedState:at.memoizedState,baseState:at.baseState,baseQueue:at.baseQueue,queue:at.queue,next:null},dt===null?Ke.memoizedState=dt=e:dt=dt.next=e}return dt}function ec(e,t){return typeof t=="function"?t(e):t}function Gg(e){var t=Wr(),r=t.queue;if(r===null)throw Error(P(311));r.lastRenderedReducer=e;var n=at,i=n.baseQueue,o=r.pending;if(o!==null){if(i!==null){var a=i.next;i.next=o.next,o.next=a}n.baseQueue=i=o,r.pending=null}if(i!==null){o=i.next,n=n.baseState;var s=a=null,u=null,l=o;do{var c=l.lane;if((pa&c)===c)u!==null&&(u=u.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),n=l.hasEagerState?l.eagerState:e(n,l.action);else{var f={lane:c,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null};u===null?(s=u=f,a=n):u=u.next=f,Ke.lanes|=c,da|=c}l=l.next}while(l!==null&&l!==o);u===null?a=n:u.next=s,En(n,t.memoizedState)||(sr=!0),t.memoizedState=n,t.baseState=a,t.baseQueue=u,r.lastRenderedState=n}if(e=r.interleaved,e!==null){i=e;do o=i.lane,Ke.lanes|=o,da|=o,i=i.next;while(i!==e)}else i===null&&(r.lanes=0);return[t.memoizedState,r.dispatch]}function $g(e){var t=Wr(),r=t.queue;if(r===null)throw Error(P(311));r.lastRenderedReducer=e;var n=r.dispatch,i=r.pending,o=t.memoizedState;if(i!==null){r.pending=null;var a=i=i.next;do o=e(o,a.action),a=a.next;while(a!==i);En(o,t.memoizedState)||(sr=!0),t.memoizedState=o,t.baseQueue===null&&(t.baseState=o),r.lastRenderedState=o}return[o,n]}function nP(){}function iP(e,t){var r=Ke,n=Wr(),i=t(),o=!En(n.memoizedState,i);if(o&&(n.memoizedState=i,sr=!0),n=n.queue,vE(sP.bind(null,r,n,e),[e]),n.getSnapshot!==t||o||dt!==null&&dt.memoizedState.tag&1){if(r.flags|=2048,tc(9,aP.bind(null,r,n,i,t),void 0,null),ht===null)throw Error(P(349));(pa&30)!==0||oP(r,t,i)}return i}function oP(e,t,r){e.flags|=16384,e={getSnapshot:t,value:r},t=Ke.updateQueue,t===null?(t={lastEffect:null,stores:null},Ke.updateQueue=t,t.stores=[e]):(r=t.stores,r===null?t.stores=[e]:r.push(e))}function aP(e,t,r,n){t.value=r,t.getSnapshot=n,uP(t)&&lP(e)}function sP(e,t,r){return r(function(){uP(t)&&lP(e)})}function uP(e){var t=e.getSnapshot;e=e.value;try{var r=t();return!En(e,r)}catch{return!0}}function lP(e){var t=wi(e,1);t!==null&&gn(t,e,1,-1)}function PR(e){var t=Hn();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ec,lastRenderedState:e},t.queue=e,e=e.dispatch=y$.bind(null,Ke,e),[t.memoizedState,e]}function tc(e,t,r,n){return e={tag:e,create:t,destroy:r,deps:n,next:null},t=Ke.updateQueue,t===null?(t={lastEffect:null,stores:null},Ke.updateQueue=t,t.lastEffect=e.next=e):(r=t.lastEffect,r===null?t.lastEffect=e.next=e:(n=r.next,r.next=e,e.next=n,t.lastEffect=e)),e}function cP(){return Wr().memoizedState}function Ld(e,t,r,n){var i=Hn();Ke.flags|=e,i.memoizedState=tc(1|t,r,void 0,n===void 0?null:n)}function fh(e,t,r,n){var i=Wr();n=n===void 0?null:n;var o=void 0;if(at!==null){var a=at.memoizedState;if(o=a.destroy,n!==null&&dE(n,a.deps)){i.memoizedState=tc(t,r,o,n);return}}Ke.flags|=e,i.memoizedState=tc(1|t,r,o,n)}function xR(e,t){return Ld(8390656,8,e,t)}function vE(e,t){return fh(2048,8,e,t)}function fP(e,t){return fh(4,2,e,t)}function pP(e,t){return fh(4,4,e,t)}function dP(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function hP(e,t,r){return r=r!=null?r.concat([e]):null,fh(4,4,dP.bind(null,t,e),r)}function yE(){}function mP(e,t){var r=Wr();t=t===void 0?null:t;var n=r.memoizedState;return n!==null&&t!==null&&dE(t,n[1])?n[0]:(r.memoizedState=[e,t],e)}function vP(e,t){var r=Wr();t=t===void 0?null:t;var n=r.memoizedState;return n!==null&&t!==null&&dE(t,n[1])?n[0]:(e=e(),r.memoizedState=[e,t],e)}function yP(e,t,r){return(pa&21)===0?(e.baseState&&(e.baseState=!1,sr=!0),e.memoizedState=r):(En(r,t)||(r=TL(),Ke.lanes|=r,da|=r,e.baseState=!0),t)}function m$(e,t){var r=Ee;Ee=r!==0&&4>r?r:4,e(!0);var n=Vg.transition;Vg.transition={};try{e(!1),t()}finally{Ee=r,Vg.transition=n}}function gP(){return Wr().memoizedState}function v$(e,t,r){var n=vo(e);if(r={lane:n,action:r,hasEagerState:!1,eagerState:null,next:null},EP(e))TP(t,r);else if(r=YL(e,t,r,n),r!==null){var i=Xt();gn(r,e,n,i),_P(r,t,n)}}function y$(e,t,r){var n=vo(e),i={lane:n,action:r,hasEagerState:!1,eagerState:null,next:null};if(EP(e))TP(t,i);else{var o=e.alternate;if(e.lanes===0&&(o===null||o.lanes===0)&&(o=t.lastRenderedReducer,o!==null))try{var a=t.lastRenderedState,s=o(a,r);if(i.hasEagerState=!0,i.eagerState=s,En(s,a)){var u=t.interleaved;u===null?(i.next=i,uE(t)):(i.next=u.next,u.next=i),t.interleaved=i;return}}catch{}finally{}r=YL(e,t,i,n),r!==null&&(i=Xt(),gn(r,e,n,i),_P(r,t,n))}}function EP(e){var t=e.alternate;return e===Ke||t!==null&&t===Ke}function TP(e,t){jl=Xd=!0;var r=e.pending;r===null?t.next=t:(t.next=r.next,r.next=t),e.pending=t}function _P(e,t,r){if((r&4194240)!==0){var n=t.lanes;n&=e.pendingLanes,r|=n,t.lanes=r,z0(e,r)}}var Jd={readContext:zr,useCallback:Ct,useContext:Ct,useEffect:Ct,useImperativeHandle:Ct,useInsertionEffect:Ct,useLayoutEffect:Ct,useMemo:Ct,useReducer:Ct,useRef:Ct,useState:Ct,useDebugValue:Ct,useDeferredValue:Ct,useTransition:Ct,useMutableSource:Ct,useSyncExternalStore:Ct,useId:Ct,unstable_isNewReconciler:!1},g$={readContext:zr,useCallback:function(e,t){return Hn().memoizedState=[e,t===void 0?null:t],e},useContext:zr,useEffect:xR,useImperativeHandle:function(e,t,r){return r=r!=null?r.concat([e]):null,Ld(4194308,4,dP.bind(null,t,e),r)},useLayoutEffect:function(e,t){return Ld(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ld(4,2,e,t)},useMemo:function(e,t){var r=Hn();return t=t===void 0?null:t,e=e(),r.memoizedState=[e,t],e},useReducer:function(e,t,r){var n=Hn();return t=r!==void 0?r(t):t,n.memoizedState=n.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},n.queue=e,e=e.dispatch=v$.bind(null,Ke,e),[n.memoizedState,e]},useRef:function(e){var t=Hn();return e={current:e},t.memoizedState=e},useState:PR,useDebugValue:yE,useDeferredValue:function(e){return Hn().memoizedState=e},useTransition:function(){var e=PR(!1),t=e[0];return e=m$.bind(null,e[1]),Hn().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,r){var n=Ke,i=Hn();if(Ve){if(r===void 0)throw Error(P(407));r=r()}else{if(r=t(),ht===null)throw Error(P(349));(pa&30)!==0||oP(n,t,r)}i.memoizedState=r;var o={value:r,getSnapshot:t};return i.queue=o,xR(sP.bind(null,n,o,e),[e]),n.flags|=2048,tc(9,aP.bind(null,n,o,r,t),void 0,null),r},useId:function(){var e=Hn(),t=ht.identifierPrefix;if(Ve){var r=Ti,n=Ei;r=(n&~(1<<32-yn(n)-1)).toString(32)+r,t=":"+t+"R"+r,r=Zl++,0<r&&(t+="H"+r.toString(32)),t+=":"}else r=h$++,t=":"+t+"r"+r.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},E$={readContext:zr,useCallback:mP,useContext:zr,useEffect:vE,useImperativeHandle:hP,useInsertionEffect:fP,useLayoutEffect:pP,useMemo:vP,useReducer:Gg,useRef:cP,useState:function(){return Gg(ec)},useDebugValue:yE,useDeferredValue:function(e){var t=Wr();return yP(t,at.memoizedState,e)},useTransition:function(){var e=Gg(ec)[0],t=Wr().memoizedState;return[e,t]},useMutableSource:nP,useSyncExternalStore:iP,useId:gP,unstable_isNewReconciler:!1},T$={readContext:zr,useCallback:mP,useContext:zr,useEffect:vE,useImperativeHandle:hP,useInsertionEffect:fP,useLayoutEffect:pP,useMemo:vP,useReducer:$g,useRef:cP,useState:function(){return $g(ec)},useDebugValue:yE,useDeferredValue:function(e){var t=Wr();return at===null?t.memoizedState=e:yP(t,at.memoizedState,e)},useTransition:function(){var e=$g(ec)[0],t=Wr().memoizedState;return[e,t]},useMutableSource:nP,useSyncExternalStore:iP,useId:gP,unstable_isNewReconciler:!1};function js(e,t){try{var r="",n=t;do r+=YG(n),n=n.return;while(n);var i=r}catch(o){i=`
Error generating stack: `+o.message+`
`+o.stack}return{value:e,source:t,stack:i,digest:null}}function Qg(e,t,r){return{value:e,source:null,stack:r??null,digest:t??null}}function N0(e,t){try{console.error(t.value)}catch(r){setTimeout(function(){throw r})}}var _$=typeof WeakMap=="function"?WeakMap:Map;function bP(e,t,r){r=_i(-1,r),r.tag=3,r.payload={element:null};var n=t.value;return r.callback=function(){eh||(eh=!0,j0=n),N0(e,t)},r}function SP(e,t,r){r=_i(-1,r),r.tag=3;var n=e.type.getDerivedStateFromError;if(typeof n=="function"){var i=t.value;r.payload=function(){return n(i)},r.callback=function(){N0(e,t)}}var o=e.stateNode;return o!==null&&typeof o.componentDidCatch=="function"&&(r.callback=function(){N0(e,t),typeof n!="function"&&(mo===null?mo=new Set([this]):mo.add(this));var a=t.stack;this.componentDidCatch(t.value,{componentStack:a!==null?a:""})}),r}function CR(e,t,r){var n=e.pingCache;if(n===null){n=e.pingCache=new _$;var i=new Set;n.set(t,i)}else i=n.get(t),i===void 0&&(i=new Set,n.set(t,i));i.has(r)||(i.add(r),e=A$.bind(null,e,t,r),t.then(e,e))}function kR(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function DR(e,t,r,n,i){return(e.mode&1)===0?(e===t?e.flags|=65536:(e.flags|=128,r.flags|=131072,r.flags&=-52805,r.tag===1&&(r.alternate===null?r.tag=17:(t=_i(-1,1),t.tag=2,ho(r,t,1))),r.lanes|=1),e):(e.flags|=65536,e.lanes=i,e)}var b$=Ni.ReactCurrentOwner,sr=!1;function Yt(e,t,r,n){t.child=e===null?tP(t,null,r,n):Ds(t,e.child,r,n)}function AR(e,t,r,n,i){r=r.render;var o=t.ref;return Ls(t,i),n=hE(e,t,r,n,o,i),r=mE(),e!==null&&!sr?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Oi(e,t,i)):(Ve&&r&&rE(t),t.flags|=1,Yt(e,t,n,i),t.child)}function jR(e,t,r,n,i){if(e===null){var o=r.type;return typeof o=="function"&&!OE(o)&&o.defaultProps===void 0&&r.compare===null&&r.defaultProps===void 0?(t.tag=15,t.type=o,wP(e,t,o,n,i)):(e=kd(r.type,null,n,t,t.mode,i),e.ref=t.ref,e.return=t,t.child=e)}if(o=e.child,(e.lanes&i)===0){var a=o.memoizedProps;if(r=r.compare,r=r!==null?r:Hl,r(a,n)&&e.ref===t.ref)return Oi(e,t,i)}return t.flags|=1,e=yo(o,n),e.ref=t.ref,e.return=t,t.child=e}function wP(e,t,r,n,i){if(e!==null){var o=e.memoizedProps;if(Hl(o,n)&&e.ref===t.ref)if(sr=!1,t.pendingProps=n=o,(e.lanes&i)!==0)(e.flags&131072)!==0&&(sr=!0);else return t.lanes=e.lanes,Oi(e,t,i)}return I0(e,t,r,n,i)}function OP(e,t,r){var n=t.pendingProps,i=n.children,o=e!==null?e.memoizedState:null;if(n.mode==="hidden")if((t.mode&1)===0)t.memoizedState={baseLanes:0,cachePool:null,transitions:null},xe(ws,Rr),Rr|=r;else{if((r&1073741824)===0)return e=o!==null?o.baseLanes|r:r,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,xe(ws,Rr),Rr|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},n=o!==null?o.baseLanes:r,xe(ws,Rr),Rr|=n}else o!==null?(n=o.baseLanes|r,t.memoizedState=null):n=r,xe(ws,Rr),Rr|=n;return Yt(e,t,i,r),t.child}function NP(e,t){var r=t.ref;(e===null&&r!==null||e!==null&&e.ref!==r)&&(t.flags|=512,t.flags|=2097152)}function I0(e,t,r,n,i){var o=lr(r)?ca:At.current;return o=Cs(t,o),Ls(t,i),r=hE(e,t,r,n,o,i),n=mE(),e!==null&&!sr?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Oi(e,t,i)):(Ve&&n&&rE(t),t.flags|=1,Yt(e,t,r,i),t.child)}function FR(e,t,r,n,i){if(lr(r)){var o=!0;Qd(t)}else o=!1;if(Ls(t,i),t.stateNode===null)Pd(e,t),ZL(t,r,n),O0(t,r,n,i),n=!0;else if(e===null){var a=t.stateNode,s=t.memoizedProps;a.props=s;var u=a.context,l=r.contextType;typeof l=="object"&&l!==null?l=zr(l):(l=lr(r)?ca:At.current,l=Cs(t,l));var c=r.getDerivedStateFromProps,f=typeof c=="function"||typeof a.getSnapshotBeforeUpdate=="function";f||typeof a.UNSAFE_componentWillReceiveProps!="function"&&typeof a.componentWillReceiveProps!="function"||(s!==n||u!==l)&&RR(t,a,n,l),io=!1;var p=t.memoizedState;a.state=p,Wd(t,n,a,i),u=t.memoizedState,s!==n||p!==u||ur.current||io?(typeof c=="function"&&(w0(t,r,c,n),u=t.memoizedState),(s=io||IR(t,r,s,n,p,u,l))?(f||typeof a.UNSAFE_componentWillMount!="function"&&typeof a.componentWillMount!="function"||(typeof a.componentWillMount=="function"&&a.componentWillMount(),typeof a.UNSAFE_componentWillMount=="function"&&a.UNSAFE_componentWillMount()),typeof a.componentDidMount=="function"&&(t.flags|=4194308)):(typeof a.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=n,t.memoizedState=u),a.props=n,a.state=u,a.context=l,n=s):(typeof a.componentDidMount=="function"&&(t.flags|=4194308),n=!1)}else{a=t.stateNode,XL(e,t),s=t.memoizedProps,l=t.type===t.elementType?s:hn(t.type,s),a.props=l,f=t.pendingProps,p=a.context,u=r.contextType,typeof u=="object"&&u!==null?u=zr(u):(u=lr(r)?ca:At.current,u=Cs(t,u));var d=r.getDerivedStateFromProps;(c=typeof d=="function"||typeof a.getSnapshotBeforeUpdate=="function")||typeof a.UNSAFE_componentWillReceiveProps!="function"&&typeof a.componentWillReceiveProps!="function"||(s!==f||p!==u)&&RR(t,a,n,u),io=!1,p=t.memoizedState,a.state=p,Wd(t,n,a,i);var m=t.memoizedState;s!==f||p!==m||ur.current||io?(typeof d=="function"&&(w0(t,r,d,n),m=t.memoizedState),(l=io||IR(t,r,l,n,p,m,u)||!1)?(c||typeof a.UNSAFE_componentWillUpdate!="function"&&typeof a.componentWillUpdate!="function"||(typeof a.componentWillUpdate=="function"&&a.componentWillUpdate(n,m,u),typeof a.UNSAFE_componentWillUpdate=="function"&&a.UNSAFE_componentWillUpdate(n,m,u)),typeof a.componentDidUpdate=="function"&&(t.flags|=4),typeof a.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof a.componentDidUpdate!="function"||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),typeof a.getSnapshotBeforeUpdate!="function"||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=n,t.memoizedState=m),a.props=n,a.state=m,a.context=u,n=l):(typeof a.componentDidUpdate!="function"||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),typeof a.getSnapshotBeforeUpdate!="function"||s===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),n=!1)}return R0(e,t,r,n,o,i)}function R0(e,t,r,n,i,o){NP(e,t);var a=(t.flags&128)!==0;if(!n&&!a)return i&&bR(t,r,!1),Oi(e,t,o);n=t.stateNode,b$.current=t;var s=a&&typeof r.getDerivedStateFromError!="function"?null:n.render();return t.flags|=1,e!==null&&a?(t.child=Ds(t,e.child,null,o),t.child=Ds(t,null,s,o)):Yt(e,t,s,o),t.memoizedState=n.state,i&&bR(t,r,!0),t.child}function IP(e){var t=e.stateNode;t.pendingContext?_R(e,t.pendingContext,t.pendingContext!==t.context):t.context&&_R(e,t.context,!1),cE(e,t.containerInfo)}function MR(e,t,r,n,i){return ks(),iE(i),t.flags|=256,Yt(e,t,r,n),t.child}var L0={dehydrated:null,treeContext:null,retryLane:0};function P0(e){return{baseLanes:e,cachePool:null,transitions:null}}function RP(e,t,r){var n=t.pendingProps,i=Qe.current,o=!1,a=(t.flags&128)!==0,s;if((s=a)||(s=e!==null&&e.memoizedState===null?!1:(i&2)!==0),s?(o=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(i|=1),xe(Qe,i&1),e===null)return b0(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?((t.mode&1)===0?t.lanes=1:e.data==="$!"?t.lanes=8:t.lanes=1073741824,null):(a=n.children,e=n.fallback,o?(n=t.mode,o=t.child,a={mode:"hidden",children:a},(n&1)===0&&o!==null?(o.childLanes=0,o.pendingProps=a):o=hh(a,n,0,null),e=la(e,n,r,null),o.return=t,e.return=t,o.sibling=e,t.child=o,t.child.memoizedState=P0(r),t.memoizedState=L0,e):gE(t,a));if(i=e.memoizedState,i!==null&&(s=i.dehydrated,s!==null))return S$(e,t,a,n,s,i,r);if(o){o=n.fallback,a=t.mode,i=e.child,s=i.sibling;var u={mode:"hidden",children:n.children};return(a&1)===0&&t.child!==i?(n=t.child,n.childLanes=0,n.pendingProps=u,t.deletions=null):(n=yo(i,u),n.subtreeFlags=i.subtreeFlags&14680064),s!==null?o=yo(s,o):(o=la(o,a,r,null),o.flags|=2),o.return=t,n.return=t,n.sibling=o,t.child=n,n=o,o=t.child,a=e.child.memoizedState,a=a===null?P0(r):{baseLanes:a.baseLanes|r,cachePool:null,transitions:a.transitions},o.memoizedState=a,o.childLanes=e.childLanes&~r,t.memoizedState=L0,n}return o=e.child,e=o.sibling,n=yo(o,{mode:"visible",children:n.children}),(t.mode&1)===0&&(n.lanes=r),n.return=t,n.sibling=null,e!==null&&(r=t.deletions,r===null?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n,t.memoizedState=null,n}function gE(e,t){return t=hh({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function _d(e,t,r,n){return n!==null&&iE(n),Ds(t,e.child,null,r),e=gE(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function S$(e,t,r,n,i,o,a){if(r)return t.flags&256?(t.flags&=-257,n=Qg(Error(P(422))),_d(e,t,a,n)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(o=n.fallback,i=t.mode,n=hh({mode:"visible",children:n.children},i,0,null),o=la(o,i,a,null),o.flags|=2,n.return=t,o.return=t,n.sibling=o,t.child=n,(t.mode&1)!==0&&Ds(t,e.child,null,a),t.child.memoizedState=P0(a),t.memoizedState=L0,o);if((t.mode&1)===0)return _d(e,t,a,null);if(i.data==="$!"){if(n=i.nextSibling&&i.nextSibling.dataset,n)var s=n.dgst;return n=s,o=Error(P(419)),n=Qg(o,n,void 0),_d(e,t,a,n)}if(s=(a&e.childLanes)!==0,sr||s){if(n=ht,n!==null){switch(a&-a){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}i=(i&(n.suspendedLanes|a))!==0?0:i,i!==0&&i!==o.retryLane&&(o.retryLane=i,wi(e,i),gn(n,e,i,-1))}return wE(),n=Qg(Error(P(421))),_d(e,t,a,n)}return i.data==="$?"?(t.flags|=128,t.child=e.child,t=j$.bind(null,e),i._reactRetry=t,null):(e=o.treeContext,Lr=po(i.nextSibling),Pr=t,Ve=!0,vn=null,e!==null&&(Qr[Kr++]=Ei,Qr[Kr++]=Ti,Qr[Kr++]=fa,Ei=e.id,Ti=e.overflow,fa=t),t=gE(t,n.children),t.flags|=4096,t)}function qR(e,t,r){e.lanes|=t;var n=e.alternate;n!==null&&(n.lanes|=t),S0(e.return,t,r)}function Kg(e,t,r,n,i){var o=e.memoizedState;o===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:r,tailMode:i}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=n,o.tail=r,o.tailMode=i)}function LP(e,t,r){var n=t.pendingProps,i=n.revealOrder,o=n.tail;if(Yt(e,t,n.children,r),n=Qe.current,(n&2)!==0)n=n&1|2,t.flags|=128;else{if(e!==null&&(e.flags&128)!==0)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&qR(e,r,t);else if(e.tag===19)qR(e,r,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(xe(Qe,n),(t.mode&1)===0)t.memoizedState=null;else switch(i){case"forwards":for(r=t.child,i=null;r!==null;)e=r.alternate,e!==null&&Yd(e)===null&&(i=r),r=r.sibling;r=i,r===null?(i=t.child,t.child=null):(i=r.sibling,r.sibling=null),Kg(t,!1,i,r,o);break;case"backwards":for(r=null,i=t.child,t.child=null;i!==null;){if(e=i.alternate,e!==null&&Yd(e)===null){t.child=i;break}e=i.sibling,i.sibling=r,r=i,i=e}Kg(t,!0,r,null,o);break;case"together":Kg(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Pd(e,t){(t.mode&1)===0&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Oi(e,t,r){if(e!==null&&(t.dependencies=e.dependencies),da|=t.lanes,(r&t.childLanes)===0)return null;if(e!==null&&t.child!==e.child)throw Error(P(153));if(t.child!==null){for(e=t.child,r=yo(e,e.pendingProps),t.child=r,r.return=t;e.sibling!==null;)e=e.sibling,r=r.sibling=yo(e,e.pendingProps),r.return=t;r.sibling=null}return t.child}function w$(e,t,r){switch(t.tag){case 3:IP(t),ks();break;case 5:rP(t);break;case 1:lr(t.type)&&Qd(t);break;case 4:cE(t,t.stateNode.containerInfo);break;case 10:var n=t.type._context,i=t.memoizedProps.value;xe(Hd,n._currentValue),n._currentValue=i;break;case 13:if(n=t.memoizedState,n!==null)return n.dehydrated!==null?(xe(Qe,Qe.current&1),t.flags|=128,null):(r&t.child.childLanes)!==0?RP(e,t,r):(xe(Qe,Qe.current&1),e=Oi(e,t,r),e!==null?e.sibling:null);xe(Qe,Qe.current&1);break;case 19:if(n=(r&t.childLanes)!==0,(e.flags&128)!==0){if(n)return LP(e,t,r);t.flags|=128}if(i=t.memoizedState,i!==null&&(i.rendering=null,i.tail=null,i.lastEffect=null),xe(Qe,Qe.current),n)break;return null;case 22:case 23:return t.lanes=0,OP(e,t,r)}return Oi(e,t,r)}var PP,x0,xP,CP;PP=function(e,t){for(var r=t.child;r!==null;){if(r.tag===5||r.tag===6)e.appendChild(r.stateNode);else if(r.tag!==4&&r.child!==null){r.child.return=r,r=r.child;continue}if(r===t)break;for(;r.sibling===null;){if(r.return===null||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}};x0=function(){};xP=function(e,t,r,n){var i=e.memoizedProps;if(i!==n){e=t.stateNode,sa(Yn.current);var o=null;switch(r){case"input":i=Zg(e,i),n=Zg(e,n),o=[];break;case"select":i=Be({},i,{value:void 0}),n=Be({},n,{value:void 0}),o=[];break;case"textarea":i=r0(e,i),n=r0(e,n),o=[];break;default:typeof i.onClick!="function"&&typeof n.onClick=="function"&&(e.onclick=Gd)}i0(r,n);var a;r=null;for(l in i)if(!n.hasOwnProperty(l)&&i.hasOwnProperty(l)&&i[l]!=null)if(l==="style"){var s=i[l];for(a in s)s.hasOwnProperty(a)&&(r||(r={}),r[a]="")}else l!=="dangerouslySetInnerHTML"&&l!=="children"&&l!=="suppressContentEditableWarning"&&l!=="suppressHydrationWarning"&&l!=="autoFocus"&&(Ul.hasOwnProperty(l)?o||(o=[]):(o=o||[]).push(l,null));for(l in n){var u=n[l];if(s=i?.[l],n.hasOwnProperty(l)&&u!==s&&(u!=null||s!=null))if(l==="style")if(s){for(a in s)!s.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(r||(r={}),r[a]="");for(a in u)u.hasOwnProperty(a)&&s[a]!==u[a]&&(r||(r={}),r[a]=u[a])}else r||(o||(o=[]),o.push(l,r)),r=u;else l==="dangerouslySetInnerHTML"?(u=u?u.__html:void 0,s=s?s.__html:void 0,u!=null&&s!==u&&(o=o||[]).push(l,u)):l==="children"?typeof u!="string"&&typeof u!="number"||(o=o||[]).push(l,""+u):l!=="suppressContentEditableWarning"&&l!=="suppressHydrationWarning"&&(Ul.hasOwnProperty(l)?(u!=null&&l==="onScroll"&&Ae("scroll",e),o||s===u||(o=[])):(o=o||[]).push(l,u))}r&&(o=o||[]).push("style",r);var l=o;(t.updateQueue=l)&&(t.flags|=4)}};CP=function(e,t,r,n){r!==n&&(t.flags|=4)};function wl(e,t){if(!Ve)switch(e.tailMode){case"hidden":t=e.tail;for(var r=null;t!==null;)t.alternate!==null&&(r=t),t=t.sibling;r===null?e.tail=null:r.sibling=null;break;case"collapsed":r=e.tail;for(var n=null;r!==null;)r.alternate!==null&&(n=r),r=r.sibling;n===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:n.sibling=null}}function kt(e){var t=e.alternate!==null&&e.alternate.child===e.child,r=0,n=0;if(t)for(var i=e.child;i!==null;)r|=i.lanes|i.childLanes,n|=i.subtreeFlags&14680064,n|=i.flags&14680064,i.return=e,i=i.sibling;else for(i=e.child;i!==null;)r|=i.lanes|i.childLanes,n|=i.subtreeFlags,n|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=n,e.childLanes=r,t}function O$(e,t,r){var n=t.pendingProps;switch(nE(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return kt(t),null;case 1:return lr(t.type)&&$d(),kt(t),null;case 3:return n=t.stateNode,As(),je(ur),je(At),pE(),n.pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),(e===null||e.child===null)&&(Ed(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&(t.flags&256)===0||(t.flags|=1024,vn!==null&&(q0(vn),vn=null))),x0(e,t),kt(t),null;case 5:fE(t);var i=sa(Jl.current);if(r=t.type,e!==null&&t.stateNode!=null)xP(e,t,r,n,i),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!n){if(t.stateNode===null)throw Error(P(166));return kt(t),null}if(e=sa(Yn.current),Ed(t)){n=t.stateNode,r=t.type;var o=t.memoizedProps;switch(n[zn]=t,n[Yl]=o,e=(t.mode&1)!==0,r){case"dialog":Ae("cancel",n),Ae("close",n);break;case"iframe":case"object":case"embed":Ae("load",n);break;case"video":case"audio":for(i=0;i<Pl.length;i++)Ae(Pl[i],n);break;case"source":Ae("error",n);break;case"img":case"image":case"link":Ae("error",n),Ae("load",n);break;case"details":Ae("toggle",n);break;case"input":HI(n,o),Ae("invalid",n);break;case"select":n._wrapperState={wasMultiple:!!o.multiple},Ae("invalid",n);break;case"textarea":WI(n,o),Ae("invalid",n)}i0(r,o),i=null;for(var a in o)if(o.hasOwnProperty(a)){var s=o[a];a==="children"?typeof s=="string"?n.textContent!==s&&(o.suppressHydrationWarning!==!0&&gd(n.textContent,s,e),i=["children",s]):typeof s=="number"&&n.textContent!==""+s&&(o.suppressHydrationWarning!==!0&&gd(n.textContent,s,e),i=["children",""+s]):Ul.hasOwnProperty(a)&&s!=null&&a==="onScroll"&&Ae("scroll",n)}switch(r){case"input":ad(n),zI(n,o,!0);break;case"textarea":ad(n),YI(n);break;case"select":case"option":break;default:typeof o.onClick=="function"&&(n.onclick=Gd)}n=i,t.updateQueue=n,n!==null&&(t.flags|=4)}else{a=i.nodeType===9?i:i.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=oL(r)),e==="http://www.w3.org/1999/xhtml"?r==="script"?(e=a.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof n.is=="string"?e=a.createElement(r,{is:n.is}):(e=a.createElement(r),r==="select"&&(a=e,n.multiple?a.multiple=!0:n.size&&(a.size=n.size))):e=a.createElementNS(e,r),e[zn]=t,e[Yl]=n,PP(e,t,!1,!1),t.stateNode=e;e:{switch(a=o0(r,n),r){case"dialog":Ae("cancel",e),Ae("close",e),i=n;break;case"iframe":case"object":case"embed":Ae("load",e),i=n;break;case"video":case"audio":for(i=0;i<Pl.length;i++)Ae(Pl[i],e);i=n;break;case"source":Ae("error",e),i=n;break;case"img":case"image":case"link":Ae("error",e),Ae("load",e),i=n;break;case"details":Ae("toggle",e),i=n;break;case"input":HI(e,n),i=Zg(e,n),Ae("invalid",e);break;case"option":i=n;break;case"select":e._wrapperState={wasMultiple:!!n.multiple},i=Be({},n,{value:void 0}),Ae("invalid",e);break;case"textarea":WI(e,n),i=r0(e,n),Ae("invalid",e);break;default:i=n}i0(r,i),s=i;for(o in s)if(s.hasOwnProperty(o)){var u=s[o];o==="style"?uL(e,u):o==="dangerouslySetInnerHTML"?(u=u?u.__html:void 0,u!=null&&aL(e,u)):o==="children"?typeof u=="string"?(r!=="textarea"||u!=="")&&Vl(e,u):typeof u=="number"&&Vl(e,""+u):o!=="suppressContentEditableWarning"&&o!=="suppressHydrationWarning"&&o!=="autoFocus"&&(Ul.hasOwnProperty(o)?u!=null&&o==="onScroll"&&Ae("scroll",e):u!=null&&G0(e,o,u,a))}switch(r){case"input":ad(e),zI(e,n,!1);break;case"textarea":ad(e),YI(e);break;case"option":n.value!=null&&e.setAttribute("value",""+go(n.value));break;case"select":e.multiple=!!n.multiple,o=n.value,o!=null?Os(e,!!n.multiple,o,!1):n.defaultValue!=null&&Os(e,!!n.multiple,n.defaultValue,!0);break;default:typeof i.onClick=="function"&&(e.onclick=Gd)}switch(r){case"button":case"input":case"select":case"textarea":n=!!n.autoFocus;break e;case"img":n=!0;break e;default:n=!1}}n&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return kt(t),null;case 6:if(e&&t.stateNode!=null)CP(e,t,e.memoizedProps,n);else{if(typeof n!="string"&&t.stateNode===null)throw Error(P(166));if(r=sa(Jl.current),sa(Yn.current),Ed(t)){if(n=t.stateNode,r=t.memoizedProps,n[zn]=t,(o=n.nodeValue!==r)&&(e=Pr,e!==null))switch(e.tag){case 3:gd(n.nodeValue,r,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&gd(n.nodeValue,r,(e.mode&1)!==0)}o&&(t.flags|=4)}else n=(r.nodeType===9?r:r.ownerDocument).createTextNode(n),n[zn]=t,t.stateNode=n}return kt(t),null;case 13:if(je(Qe),n=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(Ve&&Lr!==null&&(t.mode&1)!==0&&(t.flags&128)===0)WL(),ks(),t.flags|=98560,o=!1;else if(o=Ed(t),n!==null&&n.dehydrated!==null){if(e===null){if(!o)throw Error(P(318));if(o=t.memoizedState,o=o!==null?o.dehydrated:null,!o)throw Error(P(317));o[zn]=t}else ks(),(t.flags&128)===0&&(t.memoizedState=null),t.flags|=4;kt(t),o=!1}else vn!==null&&(q0(vn),vn=null),o=!0;if(!o)return t.flags&65536?t:null}return(t.flags&128)!==0?(t.lanes=r,t):(n=n!==null,n!==(e!==null&&e.memoizedState!==null)&&n&&(t.child.flags|=8192,(t.mode&1)!==0&&(e===null||(Qe.current&1)!==0?st===0&&(st=3):wE())),t.updateQueue!==null&&(t.flags|=4),kt(t),null);case 4:return As(),x0(e,t),e===null&&zl(t.stateNode.containerInfo),kt(t),null;case 10:return sE(t.type._context),kt(t),null;case 17:return lr(t.type)&&$d(),kt(t),null;case 19:if(je(Qe),o=t.memoizedState,o===null)return kt(t),null;if(n=(t.flags&128)!==0,a=o.rendering,a===null)if(n)wl(o,!1);else{if(st!==0||e!==null&&(e.flags&128)!==0)for(e=t.child;e!==null;){if(a=Yd(e),a!==null){for(t.flags|=128,wl(o,!1),n=a.updateQueue,n!==null&&(t.updateQueue=n,t.flags|=4),t.subtreeFlags=0,n=r,r=t.child;r!==null;)o=r,e=n,o.flags&=14680066,a=o.alternate,a===null?(o.childLanes=0,o.lanes=e,o.child=null,o.subtreeFlags=0,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null,o.stateNode=null):(o.childLanes=a.childLanes,o.lanes=a.lanes,o.child=a.child,o.subtreeFlags=0,o.deletions=null,o.memoizedProps=a.memoizedProps,o.memoizedState=a.memoizedState,o.updateQueue=a.updateQueue,o.type=a.type,e=a.dependencies,o.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),r=r.sibling;return xe(Qe,Qe.current&1|2),t.child}e=e.sibling}o.tail!==null&&et()>Fs&&(t.flags|=128,n=!0,wl(o,!1),t.lanes=4194304)}else{if(!n)if(e=Yd(a),e!==null){if(t.flags|=128,n=!0,r=e.updateQueue,r!==null&&(t.updateQueue=r,t.flags|=4),wl(o,!0),o.tail===null&&o.tailMode==="hidden"&&!a.alternate&&!Ve)return kt(t),null}else 2*et()-o.renderingStartTime>Fs&&r!==1073741824&&(t.flags|=128,n=!0,wl(o,!1),t.lanes=4194304);o.isBackwards?(a.sibling=t.child,t.child=a):(r=o.last,r!==null?r.sibling=a:t.child=a,o.last=a)}return o.tail!==null?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=et(),t.sibling=null,r=Qe.current,xe(Qe,n?r&1|2:r&1),t):(kt(t),null);case 22:case 23:return SE(),n=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==n&&(t.flags|=8192),n&&(t.mode&1)!==0?(Rr&1073741824)!==0&&(kt(t),t.subtreeFlags&6&&(t.flags|=8192)):kt(t),null;case 24:return null;case 25:return null}throw Error(P(156,t.tag))}function N$(e,t){switch(nE(t),t.tag){case 1:return lr(t.type)&&$d(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return As(),je(ur),je(At),pE(),e=t.flags,(e&65536)!==0&&(e&128)===0?(t.flags=e&-65537|128,t):null;case 5:return fE(t),null;case 13:if(je(Qe),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(P(340));ks()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return je(Qe),null;case 4:return As(),null;case 10:return sE(t.type._context),null;case 22:case 23:return SE(),null;case 24:return null;default:return null}}var bd=!1,Dt=!1,I$=typeof WeakSet=="function"?WeakSet:Set,j=null;function Ss(e,t){var r=e.ref;if(r!==null)if(typeof r=="function")try{r(null)}catch(n){ze(e,t,n)}else r.current=null}function C0(e,t,r){try{r()}catch(n){ze(e,t,n)}}var UR=!1;function R$(e,t){if(m0=qd,e=jL(),tE(e)){if("selectionStart"in e)var r={start:e.selectionStart,end:e.selectionEnd};else e:{r=(r=e.ownerDocument)&&r.defaultView||window;var n=r.getSelection&&r.getSelection();if(n&&n.rangeCount!==0){r=n.anchorNode;var i=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{r.nodeType,o.nodeType}catch{r=null;break e}var a=0,s=-1,u=-1,l=0,c=0,f=e,p=null;t:for(;;){for(var d;f!==r||i!==0&&f.nodeType!==3||(s=a+i),f!==o||n!==0&&f.nodeType!==3||(u=a+n),f.nodeType===3&&(a+=f.nodeValue.length),(d=f.firstChild)!==null;)p=f,f=d;for(;;){if(f===e)break t;if(p===r&&++l===i&&(s=a),p===o&&++c===n&&(u=a),(d=f.nextSibling)!==null)break;f=p,p=f.parentNode}f=d}r=s===-1||u===-1?null:{start:s,end:u}}else r=null}r=r||{start:0,end:0}}else r=null;for(v0={focusedElem:e,selectionRange:r},qd=!1,j=t;j!==null;)if(t=j,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,j=e;else for(;j!==null;){t=j;try{var m=t.alternate;if((t.flags&1024)!==0)switch(t.tag){case 0:case 11:case 15:break;case 1:if(m!==null){var E=m.memoizedProps,b=m.memoizedState,h=t.stateNode,v=h.getSnapshotBeforeUpdate(t.elementType===t.type?E:hn(t.type,E),b);h.__reactInternalSnapshotBeforeUpdate=v}break;case 3:var g=t.stateNode.containerInfo;g.nodeType===1?g.textContent="":g.nodeType===9&&g.documentElement&&g.removeChild(g.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(P(163))}}catch(_){ze(t,t.return,_)}if(e=t.sibling,e!==null){e.return=t.return,j=e;break}j=t.return}return m=UR,UR=!1,m}function Fl(e,t,r){var n=t.updateQueue;if(n=n!==null?n.lastEffect:null,n!==null){var i=n=n.next;do{if((i.tag&e)===e){var o=i.destroy;i.destroy=void 0,o!==void 0&&C0(t,r,o)}i=i.next}while(i!==n)}}function ph(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var r=t=t.next;do{if((r.tag&e)===e){var n=r.create;r.destroy=n()}r=r.next}while(r!==t)}}function k0(e){var t=e.ref;if(t!==null){var r=e.stateNode;switch(e.tag){case 5:e=r;break;default:e=r}typeof t=="function"?t(e):t.current=e}}function kP(e){var t=e.alternate;t!==null&&(e.alternate=null,kP(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[zn],delete t[Yl],delete t[E0],delete t[c$],delete t[f$])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function DP(e){return e.tag===5||e.tag===3||e.tag===4}function VR(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||DP(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function D0(e,t,r){var n=e.tag;if(n===5||n===6)e=e.stateNode,t?r.nodeType===8?r.parentNode.insertBefore(e,t):r.insertBefore(e,t):(r.nodeType===8?(t=r.parentNode,t.insertBefore(e,r)):(t=r,t.appendChild(e)),r=r._reactRootContainer,r!=null||t.onclick!==null||(t.onclick=Gd));else if(n!==4&&(e=e.child,e!==null))for(D0(e,t,r),e=e.sibling;e!==null;)D0(e,t,r),e=e.sibling}function A0(e,t,r){var n=e.tag;if(n===5||n===6)e=e.stateNode,t?r.insertBefore(e,t):r.appendChild(e);else if(n!==4&&(e=e.child,e!==null))for(A0(e,t,r),e=e.sibling;e!==null;)A0(e,t,r),e=e.sibling}var wt=null,mn=!1;function ro(e,t,r){for(r=r.child;r!==null;)AP(e,t,r),r=r.sibling}function AP(e,t,r){if(Wn&&typeof Wn.onCommitFiberUnmount=="function")try{Wn.onCommitFiberUnmount(ih,r)}catch{}switch(r.tag){case 5:Dt||Ss(r,t);case 6:var n=wt,i=mn;wt=null,ro(e,t,r),wt=n,mn=i,wt!==null&&(mn?(e=wt,r=r.stateNode,e.nodeType===8?e.parentNode.removeChild(r):e.removeChild(r)):wt.removeChild(r.stateNode));break;case 18:wt!==null&&(mn?(e=wt,r=r.stateNode,e.nodeType===8?Mg(e.parentNode,r):e.nodeType===1&&Mg(e,r),Kl(e)):Mg(wt,r.stateNode));break;case 4:n=wt,i=mn,wt=r.stateNode.containerInfo,mn=!0,ro(e,t,r),wt=n,mn=i;break;case 0:case 11:case 14:case 15:if(!Dt&&(n=r.updateQueue,n!==null&&(n=n.lastEffect,n!==null))){i=n=n.next;do{var o=i,a=o.destroy;o=o.tag,a!==void 0&&((o&2)!==0||(o&4)!==0)&&C0(r,t,a),i=i.next}while(i!==n)}ro(e,t,r);break;case 1:if(!Dt&&(Ss(r,t),n=r.stateNode,typeof n.componentWillUnmount=="function"))try{n.props=r.memoizedProps,n.state=r.memoizedState,n.componentWillUnmount()}catch(s){ze(r,t,s)}ro(e,t,r);break;case 21:ro(e,t,r);break;case 22:r.mode&1?(Dt=(n=Dt)||r.memoizedState!==null,ro(e,t,r),Dt=n):ro(e,t,r);break;default:ro(e,t,r)}}function GR(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var r=e.stateNode;r===null&&(r=e.stateNode=new I$),t.forEach(function(n){var i=F$.bind(null,e,n);r.has(n)||(r.add(n),n.then(i,i))})}}function dn(e,t){var r=t.deletions;if(r!==null)for(var n=0;n<r.length;n++){var i=r[n];try{var o=e,a=t,s=a;e:for(;s!==null;){switch(s.tag){case 5:wt=s.stateNode,mn=!1;break e;case 3:wt=s.stateNode.containerInfo,mn=!0;break e;case 4:wt=s.stateNode.containerInfo,mn=!0;break e}s=s.return}if(wt===null)throw Error(P(160));AP(o,a,i),wt=null,mn=!1;var u=i.alternate;u!==null&&(u.return=null),i.return=null}catch(l){ze(i,t,l)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)jP(t,e),t=t.sibling}function jP(e,t){var r=e.alternate,n=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(dn(t,e),Bn(e),n&4){try{Fl(3,e,e.return),ph(3,e)}catch(E){ze(e,e.return,E)}try{Fl(5,e,e.return)}catch(E){ze(e,e.return,E)}}break;case 1:dn(t,e),Bn(e),n&512&&r!==null&&Ss(r,r.return);break;case 5:if(dn(t,e),Bn(e),n&512&&r!==null&&Ss(r,r.return),e.flags&32){var i=e.stateNode;try{Vl(i,"")}catch(E){ze(e,e.return,E)}}if(n&4&&(i=e.stateNode,i!=null)){var o=e.memoizedProps,a=r!==null?r.memoizedProps:o,s=e.type,u=e.updateQueue;if(e.updateQueue=null,u!==null)try{s==="input"&&o.type==="radio"&&o.name!=null&&nL(i,o),o0(s,a);var l=o0(s,o);for(a=0;a<u.length;a+=2){var c=u[a],f=u[a+1];c==="style"?uL(i,f):c==="dangerouslySetInnerHTML"?aL(i,f):c==="children"?Vl(i,f):G0(i,c,f,l)}switch(s){case"input":e0(i,o);break;case"textarea":iL(i,o);break;case"select":var p=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!o.multiple;var d=o.value;d!=null?Os(i,!!o.multiple,d,!1):p!==!!o.multiple&&(o.defaultValue!=null?Os(i,!!o.multiple,o.defaultValue,!0):Os(i,!!o.multiple,o.multiple?[]:"",!1))}i[Yl]=o}catch(E){ze(e,e.return,E)}}break;case 6:if(dn(t,e),Bn(e),n&4){if(e.stateNode===null)throw Error(P(162));i=e.stateNode,o=e.memoizedProps;try{i.nodeValue=o}catch(E){ze(e,e.return,E)}}break;case 3:if(dn(t,e),Bn(e),n&4&&r!==null&&r.memoizedState.isDehydrated)try{Kl(t.containerInfo)}catch(E){ze(e,e.return,E)}break;case 4:dn(t,e),Bn(e);break;case 13:dn(t,e),Bn(e),i=e.child,i.flags&8192&&(o=i.memoizedState!==null,i.stateNode.isHidden=o,!o||i.alternate!==null&&i.alternate.memoizedState!==null||(_E=et())),n&4&&GR(e);break;case 22:if(c=r!==null&&r.memoizedState!==null,e.mode&1?(Dt=(l=Dt)||c,dn(t,e),Dt=l):dn(t,e),Bn(e),n&8192){if(l=e.memoizedState!==null,(e.stateNode.isHidden=l)&&!c&&(e.mode&1)!==0)for(j=e,c=e.child;c!==null;){for(f=j=c;j!==null;){switch(p=j,d=p.child,p.tag){case 0:case 11:case 14:case 15:Fl(4,p,p.return);break;case 1:Ss(p,p.return);var m=p.stateNode;if(typeof m.componentWillUnmount=="function"){n=p,r=p.return;try{t=n,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(E){ze(n,r,E)}}break;case 5:Ss(p,p.return);break;case 22:if(p.memoizedState!==null){QR(f);continue}}d!==null?(d.return=p,j=d):QR(f)}c=c.sibling}e:for(c=null,f=e;;){if(f.tag===5){if(c===null){c=f;try{i=f.stateNode,l?(o=i.style,typeof o.setProperty=="function"?o.setProperty("display","none","important"):o.display="none"):(s=f.stateNode,u=f.memoizedProps.style,a=u!=null&&u.hasOwnProperty("display")?u.display:null,s.style.display=sL("display",a))}catch(E){ze(e,e.return,E)}}}else if(f.tag===6){if(c===null)try{f.stateNode.nodeValue=l?"":f.memoizedProps}catch(E){ze(e,e.return,E)}}else if((f.tag!==22&&f.tag!==23||f.memoizedState===null||f===e)&&f.child!==null){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;f.sibling===null;){if(f.return===null||f.return===e)break e;c===f&&(c=null),f=f.return}c===f&&(c=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:dn(t,e),Bn(e),n&4&&GR(e);break;case 21:break;default:dn(t,e),Bn(e)}}function Bn(e){var t=e.flags;if(t&2){try{e:{for(var r=e.return;r!==null;){if(DP(r)){var n=r;break e}r=r.return}throw Error(P(160))}switch(n.tag){case 5:var i=n.stateNode;n.flags&32&&(Vl(i,""),n.flags&=-33);var o=VR(e);A0(e,o,i);break;case 3:case 4:var a=n.stateNode.containerInfo,s=VR(e);D0(e,s,a);break;default:throw Error(P(161))}}catch(u){ze(e,e.return,u)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function L$(e,t,r){j=e,FP(e,t,r)}function FP(e,t,r){for(var n=(e.mode&1)!==0;j!==null;){var i=j,o=i.child;if(i.tag===22&&n){var a=i.memoizedState!==null||bd;if(!a){var s=i.alternate,u=s!==null&&s.memoizedState!==null||Dt;s=bd;var l=Dt;if(bd=a,(Dt=u)&&!l)for(j=i;j!==null;)a=j,u=a.child,a.tag===22&&a.memoizedState!==null?KR(i):u!==null?(u.return=a,j=u):KR(i);for(;o!==null;)j=o,FP(o,t,r),o=o.sibling;j=i,bd=s,Dt=l}$R(e,t,r)}else(i.subtreeFlags&8772)!==0&&o!==null?(o.return=i,j=o):$R(e,t,r)}}function $R(e){for(;j!==null;){var t=j;if((t.flags&8772)!==0){var r=t.alternate;try{if((t.flags&8772)!==0)switch(t.tag){case 0:case 11:case 15:Dt||ph(5,t);break;case 1:var n=t.stateNode;if(t.flags&4&&!Dt)if(r===null)n.componentDidMount();else{var i=t.elementType===t.type?r.memoizedProps:hn(t.type,r.memoizedProps);n.componentDidUpdate(i,r.memoizedState,n.__reactInternalSnapshotBeforeUpdate)}var o=t.updateQueue;o!==null&&NR(t,o,n);break;case 3:var a=t.updateQueue;if(a!==null){if(r=null,t.child!==null)switch(t.child.tag){case 5:r=t.child.stateNode;break;case 1:r=t.child.stateNode}NR(t,a,r)}break;case 5:var s=t.stateNode;if(r===null&&t.flags&4){r=s;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&r.focus();break;case"img":u.src&&(r.src=u.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var l=t.alternate;if(l!==null){var c=l.memoizedState;if(c!==null){var f=c.dehydrated;f!==null&&Kl(f)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(P(163))}Dt||t.flags&512&&k0(t)}catch(p){ze(t,t.return,p)}}if(t===e){j=null;break}if(r=t.sibling,r!==null){r.return=t.return,j=r;break}j=t.return}}function QR(e){for(;j!==null;){var t=j;if(t===e){j=null;break}var r=t.sibling;if(r!==null){r.return=t.return,j=r;break}j=t.return}}function KR(e){for(;j!==null;){var t=j;try{switch(t.tag){case 0:case 11:case 15:var r=t.return;try{ph(4,t)}catch(u){ze(t,r,u)}break;case 1:var n=t.stateNode;if(typeof n.componentDidMount=="function"){var i=t.return;try{n.componentDidMount()}catch(u){ze(t,i,u)}}var o=t.return;try{k0(t)}catch(u){ze(t,o,u)}break;case 5:var a=t.return;try{k0(t)}catch(u){ze(t,a,u)}}}catch(u){ze(t,t.return,u)}if(t===e){j=null;break}var s=t.sibling;if(s!==null){s.return=t.return,j=s;break}j=t.return}}var P$=Math.ceil,Zd=Ni.ReactCurrentDispatcher,EE=Ni.ReactCurrentOwner,Hr=Ni.ReactCurrentBatchConfig,ue=0,ht=null,nt=null,Ot=0,Rr=0,ws=_o(0),st=0,rc=null,da=0,dh=0,TE=0,Ml=null,ar=null,_E=0,Fs=1/0,yi=null,eh=!1,j0=null,mo=null,Sd=!1,uo=null,th=0,ql=0,F0=null,xd=-1,Cd=0;function Xt(){return(ue&6)!==0?et():xd!==-1?xd:xd=et()}function vo(e){return(e.mode&1)===0?1:(ue&2)!==0&&Ot!==0?Ot&-Ot:d$.transition!==null?(Cd===0&&(Cd=TL()),Cd):(e=Ee,e!==0||(e=window.event,e=e===void 0?16:IL(e.type)),e)}function gn(e,t,r,n){if(50<ql)throw ql=0,F0=null,Error(P(185));nc(e,r,n),((ue&2)===0||e!==ht)&&(e===ht&&((ue&2)===0&&(dh|=r),st===4&&ao(e,Ot)),cr(e,n),r===1&&ue===0&&(t.mode&1)===0&&(Fs=et()+500,lh&&bo()))}function cr(e,t){var r=e.callbackNode;m6(e,t);var n=Md(e,e===ht?Ot:0);if(n===0)r!==null&&ZI(r),e.callbackNode=null,e.callbackPriority=0;else if(t=n&-n,e.callbackPriority!==t){if(r!=null&&ZI(r),t===1)e.tag===0?p$(BR.bind(null,e)):BL(BR.bind(null,e)),u$(function(){(ue&6)===0&&bo()}),r=null;else{switch(_L(n)){case 1:r=H0;break;case 4:r=gL;break;case 16:r=Fd;break;case 536870912:r=EL;break;default:r=Fd}r=KP(r,MP.bind(null,e))}e.callbackPriority=t,e.callbackNode=r}}function MP(e,t){if(xd=-1,Cd=0,(ue&6)!==0)throw Error(P(327));var r=e.callbackNode;if(Ps()&&e.callbackNode!==r)return null;var n=Md(e,e===ht?Ot:0);if(n===0)return null;if((n&30)!==0||(n&e.expiredLanes)!==0||t)t=rh(e,n);else{t=n;var i=ue;ue|=2;var o=UP();(ht!==e||Ot!==t)&&(yi=null,Fs=et()+500,ua(e,t));do try{k$();break}catch(s){qP(e,s)}while(1);aE(),Zd.current=o,ue=i,nt!==null?t=0:(ht=null,Ot=0,t=st)}if(t!==0){if(t===2&&(i=c0(e),i!==0&&(n=i,t=M0(e,i))),t===1)throw r=rc,ua(e,0),ao(e,n),cr(e,et()),r;if(t===6)ao(e,n);else{if(i=e.current.alternate,(n&30)===0&&!x$(i)&&(t=rh(e,n),t===2&&(o=c0(e),o!==0&&(n=o,t=M0(e,o))),t===1))throw r=rc,ua(e,0),ao(e,n),cr(e,et()),r;switch(e.finishedWork=i,e.finishedLanes=n,t){case 0:case 1:throw Error(P(345));case 2:ia(e,ar,yi);break;case 3:if(ao(e,n),(n&130023424)===n&&(t=_E+500-et(),10<t)){if(Md(e,0)!==0)break;if(i=e.suspendedLanes,(i&n)!==n){Xt(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=g0(ia.bind(null,e,ar,yi),t);break}ia(e,ar,yi);break;case 4:if(ao(e,n),(n&4194240)===n)break;for(t=e.eventTimes,i=-1;0<n;){var a=31-yn(n);o=1<<a,a=t[a],a>i&&(i=a),n&=~o}if(n=i,n=et()-n,n=(120>n?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*P$(n/1960))-n,10<n){e.timeoutHandle=g0(ia.bind(null,e,ar,yi),n);break}ia(e,ar,yi);break;case 5:ia(e,ar,yi);break;default:throw Error(P(329))}}}return cr(e,et()),e.callbackNode===r?MP.bind(null,e):null}function M0(e,t){var r=Ml;return e.current.memoizedState.isDehydrated&&(ua(e,t).flags|=256),e=rh(e,t),e!==2&&(t=ar,ar=r,t!==null&&q0(t)),e}function q0(e){ar===null?ar=e:ar.push.apply(ar,e)}function x$(e){for(var t=e;;){if(t.flags&16384){var r=t.updateQueue;if(r!==null&&(r=r.stores,r!==null))for(var n=0;n<r.length;n++){var i=r[n],o=i.getSnapshot;i=i.value;try{if(!En(o(),i))return!1}catch{return!1}}}if(r=t.child,t.subtreeFlags&16384&&r!==null)r.return=t,t=r;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function ao(e,t){for(t&=~TE,t&=~dh,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var r=31-yn(t),n=1<<r;e[r]=-1,t&=~n}}function BR(e){if((ue&6)!==0)throw Error(P(327));Ps();var t=Md(e,0);if((t&1)===0)return cr(e,et()),null;var r=rh(e,t);if(e.tag!==0&&r===2){var n=c0(e);n!==0&&(t=n,r=M0(e,n))}if(r===1)throw r=rc,ua(e,0),ao(e,t),cr(e,et()),r;if(r===6)throw Error(P(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ia(e,ar,yi),cr(e,et()),null}function bE(e,t){var r=ue;ue|=1;try{return e(t)}finally{ue=r,ue===0&&(Fs=et()+500,lh&&bo())}}function ha(e){uo!==null&&uo.tag===0&&(ue&6)===0&&Ps();var t=ue;ue|=1;var r=Hr.transition,n=Ee;try{if(Hr.transition=null,Ee=1,e)return e()}finally{Ee=n,Hr.transition=r,ue=t,(ue&6)===0&&bo()}}function SE(){Rr=ws.current,je(ws)}function ua(e,t){e.finishedWork=null,e.finishedLanes=0;var r=e.timeoutHandle;if(r!==-1&&(e.timeoutHandle=-1,s$(r)),nt!==null)for(r=nt.return;r!==null;){var n=r;switch(nE(n),n.tag){case 1:n=n.type.childContextTypes,n!=null&&$d();break;case 3:As(),je(ur),je(At),pE();break;case 5:fE(n);break;case 4:As();break;case 13:je(Qe);break;case 19:je(Qe);break;case 10:sE(n.type._context);break;case 22:case 23:SE()}r=r.return}if(ht=e,nt=e=yo(e.current,null),Ot=Rr=t,st=0,rc=null,TE=dh=da=0,ar=Ml=null,aa!==null){for(t=0;t<aa.length;t++)if(r=aa[t],n=r.interleaved,n!==null){r.interleaved=null;var i=n.next,o=r.pending;if(o!==null){var a=o.next;o.next=i,n.next=a}r.pending=n}aa=null}return e}function qP(e,t){do{var r=nt;try{if(aE(),Rd.current=Jd,Xd){for(var n=Ke.memoizedState;n!==null;){var i=n.queue;i!==null&&(i.pending=null),n=n.next}Xd=!1}if(pa=0,dt=at=Ke=null,jl=!1,Zl=0,EE.current=null,r===null||r.return===null){st=1,rc=t,nt=null;break}e:{var o=e,a=r.return,s=r,u=t;if(t=Ot,s.flags|=32768,u!==null&&typeof u=="object"&&typeof u.then=="function"){var l=u,c=s,f=c.tag;if((c.mode&1)===0&&(f===0||f===11||f===15)){var p=c.alternate;p?(c.updateQueue=p.updateQueue,c.memoizedState=p.memoizedState,c.lanes=p.lanes):(c.updateQueue=null,c.memoizedState=null)}var d=kR(a);if(d!==null){d.flags&=-257,DR(d,a,s,o,t),d.mode&1&&CR(o,l,t),t=d,u=l;var m=t.updateQueue;if(m===null){var E=new Set;E.add(u),t.updateQueue=E}else m.add(u);break e}else{if((t&1)===0){CR(o,l,t),wE();break e}u=Error(P(426))}}else if(Ve&&s.mode&1){var b=kR(a);if(b!==null){(b.flags&65536)===0&&(b.flags|=256),DR(b,a,s,o,t),iE(js(u,s));break e}}o=u=js(u,s),st!==4&&(st=2),Ml===null?Ml=[o]:Ml.push(o),o=a;do{switch(o.tag){case 3:o.flags|=65536,t&=-t,o.lanes|=t;var h=bP(o,u,t);OR(o,h);break e;case 1:s=u;var v=o.type,g=o.stateNode;if((o.flags&128)===0&&(typeof v.getDerivedStateFromError=="function"||g!==null&&typeof g.componentDidCatch=="function"&&(mo===null||!mo.has(g)))){o.flags|=65536,t&=-t,o.lanes|=t;var _=SP(o,s,t);OR(o,_);break e}}o=o.return}while(o!==null)}GP(r)}catch(N){t=N,nt===r&&r!==null&&(nt=r=r.return);continue}break}while(1)}function UP(){var e=Zd.current;return Zd.current=Jd,e===null?Jd:e}function wE(){(st===0||st===3||st===2)&&(st=4),ht===null||(da&268435455)===0&&(dh&268435455)===0||ao(ht,Ot)}function rh(e,t){var r=ue;ue|=2;var n=UP();(ht!==e||Ot!==t)&&(yi=null,ua(e,t));do try{C$();break}catch(i){qP(e,i)}while(1);if(aE(),ue=r,Zd.current=n,nt!==null)throw Error(P(261));return ht=null,Ot=0,st}function C$(){for(;nt!==null;)VP(nt)}function k$(){for(;nt!==null&&!a6();)VP(nt)}function VP(e){var t=QP(e.alternate,e,Rr);e.memoizedProps=e.pendingProps,t===null?GP(e):nt=t,EE.current=null}function GP(e){var t=e;do{var r=t.alternate;if(e=t.return,(t.flags&32768)===0){if(r=O$(r,t,Rr),r!==null){nt=r;return}}else{if(r=N$(r,t),r!==null){r.flags&=32767,nt=r;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{st=6,nt=null;return}}if(t=t.sibling,t!==null){nt=t;return}nt=t=e}while(t!==null);st===0&&(st=5)}function ia(e,t,r){var n=Ee,i=Hr.transition;try{Hr.transition=null,Ee=1,D$(e,t,r,n)}finally{Hr.transition=i,Ee=n}return null}function D$(e,t,r,n){do Ps();while(uo!==null);if((ue&6)!==0)throw Error(P(327));r=e.finishedWork;var i=e.finishedLanes;if(r===null)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(P(177));e.callbackNode=null,e.callbackPriority=0;var o=r.lanes|r.childLanes;if(v6(e,o),e===ht&&(nt=ht=null,Ot=0),(r.subtreeFlags&2064)===0&&(r.flags&2064)===0||Sd||(Sd=!0,KP(Fd,function(){return Ps(),null})),o=(r.flags&15990)!==0,(r.subtreeFlags&15990)!==0||o){o=Hr.transition,Hr.transition=null;var a=Ee;Ee=1;var s=ue;ue|=4,EE.current=null,R$(e,r),jP(r,e),r$(v0),qd=!!m0,v0=m0=null,e.current=r,L$(r,e,i),s6(),ue=s,Ee=a,Hr.transition=o}else e.current=r;if(Sd&&(Sd=!1,uo=e,th=i),o=e.pendingLanes,o===0&&(mo=null),c6(r.stateNode,n),cr(e,et()),t!==null)for(n=e.onRecoverableError,r=0;r<t.length;r++)i=t[r],n(i.value,{componentStack:i.stack,digest:i.digest});if(eh)throw eh=!1,e=j0,j0=null,e;return(th&1)!==0&&e.tag!==0&&Ps(),o=e.pendingLanes,(o&1)!==0?e===F0?ql++:(ql=0,F0=e):ql=0,bo(),null}function Ps(){if(uo!==null){var e=_L(th),t=Hr.transition,r=Ee;try{if(Hr.transition=null,Ee=16>e?16:e,uo===null)var n=!1;else{if(e=uo,uo=null,th=0,(ue&6)!==0)throw Error(P(331));var i=ue;for(ue|=4,j=e.current;j!==null;){var o=j,a=o.child;if((j.flags&16)!==0){var s=o.deletions;if(s!==null){for(var u=0;u<s.length;u++){var l=s[u];for(j=l;j!==null;){var c=j;switch(c.tag){case 0:case 11:case 15:Fl(8,c,o)}var f=c.child;if(f!==null)f.return=c,j=f;else for(;j!==null;){c=j;var p=c.sibling,d=c.return;if(kP(c),c===l){j=null;break}if(p!==null){p.return=d,j=p;break}j=d}}}var m=o.alternate;if(m!==null){var E=m.child;if(E!==null){m.child=null;do{var b=E.sibling;E.sibling=null,E=b}while(E!==null)}}j=o}}if((o.subtreeFlags&2064)!==0&&a!==null)a.return=o,j=a;else e:for(;j!==null;){if(o=j,(o.flags&2048)!==0)switch(o.tag){case 0:case 11:case 15:Fl(9,o,o.return)}var h=o.sibling;if(h!==null){h.return=o.return,j=h;break e}j=o.return}}var v=e.current;for(j=v;j!==null;){a=j;var g=a.child;if((a.subtreeFlags&2064)!==0&&g!==null)g.return=a,j=g;else e:for(a=v;j!==null;){if(s=j,(s.flags&2048)!==0)try{switch(s.tag){case 0:case 11:case 15:ph(9,s)}}catch(N){ze(s,s.return,N)}if(s===a){j=null;break e}var _=s.sibling;if(_!==null){_.return=s.return,j=_;break e}j=s.return}}if(ue=i,bo(),Wn&&typeof Wn.onPostCommitFiberRoot=="function")try{Wn.onPostCommitFiberRoot(ih,e)}catch{}n=!0}return n}finally{Ee=r,Hr.transition=t}}return!1}function HR(e,t,r){t=js(r,t),t=bP(e,t,1),e=ho(e,t,1),t=Xt(),e!==null&&(nc(e,1,t),cr(e,t))}function ze(e,t,r){if(e.tag===3)HR(e,e,r);else for(;t!==null;){if(t.tag===3){HR(t,e,r);break}else if(t.tag===1){var n=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof n.componentDidCatch=="function"&&(mo===null||!mo.has(n))){e=js(r,e),e=SP(t,e,1),t=ho(t,e,1),e=Xt(),t!==null&&(nc(t,1,e),cr(t,e));break}}t=t.return}}function A$(e,t,r){var n=e.pingCache;n!==null&&n.delete(t),t=Xt(),e.pingedLanes|=e.suspendedLanes&r,ht===e&&(Ot&r)===r&&(st===4||st===3&&(Ot&130023424)===Ot&&500>et()-_E?ua(e,0):TE|=r),cr(e,t)}function $P(e,t){t===0&&((e.mode&1)===0?t=1:(t=ld,ld<<=1,(ld&130023424)===0&&(ld=4194304)));var r=Xt();e=wi(e,t),e!==null&&(nc(e,t,r),cr(e,r))}function j$(e){var t=e.memoizedState,r=0;t!==null&&(r=t.retryLane),$P(e,r)}function F$(e,t){var r=0;switch(e.tag){case 13:var n=e.stateNode,i=e.memoizedState;i!==null&&(r=i.retryLane);break;case 19:n=e.stateNode;break;default:throw Error(P(314))}n!==null&&n.delete(t),$P(e,r)}var QP;QP=function(e,t,r){if(e!==null)if(e.memoizedProps!==t.pendingProps||ur.current)sr=!0;else{if((e.lanes&r)===0&&(t.flags&128)===0)return sr=!1,w$(e,t,r);sr=(e.flags&131072)!==0}else sr=!1,Ve&&(t.flags&1048576)!==0&&HL(t,Bd,t.index);switch(t.lanes=0,t.tag){case 2:var n=t.type;Pd(e,t),e=t.pendingProps;var i=Cs(t,At.current);Ls(t,r),i=hE(null,t,n,e,i,r);var o=mE();return t.flags|=1,typeof i=="object"&&i!==null&&typeof i.render=="function"&&i.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,lr(n)?(o=!0,Qd(t)):o=!1,t.memoizedState=i.state!==null&&i.state!==void 0?i.state:null,lE(t),i.updater=ch,t.stateNode=i,i._reactInternals=t,O0(t,n,e,r),t=R0(null,t,n,!0,o,r)):(t.tag=0,Ve&&o&&rE(t),Yt(null,t,i,r),t=t.child),t;case 16:n=t.elementType;e:{switch(Pd(e,t),e=t.pendingProps,i=n._init,n=i(n._payload),t.type=n,i=t.tag=q$(n),e=hn(n,e),i){case 0:t=I0(null,t,n,e,r);break e;case 1:t=FR(null,t,n,e,r);break e;case 11:t=AR(null,t,n,e,r);break e;case 14:t=jR(null,t,n,hn(n.type,e),r);break e}throw Error(P(306,n,""))}return t;case 0:return n=t.type,i=t.pendingProps,i=t.elementType===n?i:hn(n,i),I0(e,t,n,i,r);case 1:return n=t.type,i=t.pendingProps,i=t.elementType===n?i:hn(n,i),FR(e,t,n,i,r);case 3:e:{if(IP(t),e===null)throw Error(P(387));n=t.pendingProps,o=t.memoizedState,i=o.element,XL(e,t),Wd(t,n,null,r);var a=t.memoizedState;if(n=a.element,o.isDehydrated)if(o={element:n,isDehydrated:!1,cache:a.cache,pendingSuspenseBoundaries:a.pendingSuspenseBoundaries,transitions:a.transitions},t.updateQueue.baseState=o,t.memoizedState=o,t.flags&256){i=js(Error(P(423)),t),t=MR(e,t,n,r,i);break e}else if(n!==i){i=js(Error(P(424)),t),t=MR(e,t,n,r,i);break e}else for(Lr=po(t.stateNode.containerInfo.firstChild),Pr=t,Ve=!0,vn=null,r=tP(t,null,n,r),t.child=r;r;)r.flags=r.flags&-3|4096,r=r.sibling;else{if(ks(),n===i){t=Oi(e,t,r);break e}Yt(e,t,n,r)}t=t.child}return t;case 5:return rP(t),e===null&&b0(t),n=t.type,i=t.pendingProps,o=e!==null?e.memoizedProps:null,a=i.children,y0(n,i)?a=null:o!==null&&y0(n,o)&&(t.flags|=32),NP(e,t),Yt(e,t,a,r),t.child;case 6:return e===null&&b0(t),null;case 13:return RP(e,t,r);case 4:return cE(t,t.stateNode.containerInfo),n=t.pendingProps,e===null?t.child=Ds(t,null,n,r):Yt(e,t,n,r),t.child;case 11:return n=t.type,i=t.pendingProps,i=t.elementType===n?i:hn(n,i),AR(e,t,n,i,r);case 7:return Yt(e,t,t.pendingProps,r),t.child;case 8:return Yt(e,t,t.pendingProps.children,r),t.child;case 12:return Yt(e,t,t.pendingProps.children,r),t.child;case 10:e:{if(n=t.type._context,i=t.pendingProps,o=t.memoizedProps,a=i.value,xe(Hd,n._currentValue),n._currentValue=a,o!==null)if(En(o.value,a)){if(o.children===i.children&&!ur.current){t=Oi(e,t,r);break e}}else for(o=t.child,o!==null&&(o.return=t);o!==null;){var s=o.dependencies;if(s!==null){a=o.child;for(var u=s.firstContext;u!==null;){if(u.context===n){if(o.tag===1){u=_i(-1,r&-r),u.tag=2;var l=o.updateQueue;if(l!==null){l=l.shared;var c=l.pending;c===null?u.next=u:(u.next=c.next,c.next=u),l.pending=u}}o.lanes|=r,u=o.alternate,u!==null&&(u.lanes|=r),S0(o.return,r,t),s.lanes|=r;break}u=u.next}}else if(o.tag===10)a=o.type===t.type?null:o.child;else if(o.tag===18){if(a=o.return,a===null)throw Error(P(341));a.lanes|=r,s=a.alternate,s!==null&&(s.lanes|=r),S0(a,r,t),a=o.sibling}else a=o.child;if(a!==null)a.return=o;else for(a=o;a!==null;){if(a===t){a=null;break}if(o=a.sibling,o!==null){o.return=a.return,a=o;break}a=a.return}o=a}Yt(e,t,i.children,r),t=t.child}return t;case 9:return i=t.type,n=t.pendingProps.children,Ls(t,r),i=zr(i),n=n(i),t.flags|=1,Yt(e,t,n,r),t.child;case 14:return n=t.type,i=hn(n,t.pendingProps),i=hn(n.type,i),jR(e,t,n,i,r);case 15:return wP(e,t,t.type,t.pendingProps,r);case 17:return n=t.type,i=t.pendingProps,i=t.elementType===n?i:hn(n,i),Pd(e,t),t.tag=1,lr(n)?(e=!0,Qd(t)):e=!1,Ls(t,r),ZL(t,n,i),O0(t,n,i,r),R0(null,t,n,!0,e,r);case 19:return LP(e,t,r);case 22:return OP(e,t,r)}throw Error(P(156,t.tag))};function KP(e,t){return yL(e,t)}function M$(e,t,r,n){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Br(e,t,r,n){return new M$(e,t,r,n)}function OE(e){return e=e.prototype,!(!e||!e.isReactComponent)}function q$(e){if(typeof e=="function")return OE(e)?1:0;if(e!=null){if(e=e.$$typeof,e===Q0)return 11;if(e===K0)return 14}return 2}function yo(e,t){var r=e.alternate;return r===null?(r=Br(e.tag,t,e.key,e.mode),r.elementType=e.elementType,r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.type=e.type,r.flags=0,r.subtreeFlags=0,r.deletions=null),r.flags=e.flags&14680064,r.childLanes=e.childLanes,r.lanes=e.lanes,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,t=e.dependencies,r.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function kd(e,t,r,n,i,o){var a=2;if(n=e,typeof e=="function")OE(e)&&(a=1);else if(typeof e=="string")a=5;else e:switch(e){case hs:return la(r.children,i,o,t);case $0:a=8,i|=8;break;case Wg:return e=Br(12,r,t,i|2),e.elementType=Wg,e.lanes=o,e;case Yg:return e=Br(13,r,t,i),e.elementType=Yg,e.lanes=o,e;case Xg:return e=Br(19,r,t,i),e.elementType=Xg,e.lanes=o,e;case eL:return hh(r,i,o,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case JR:a=10;break e;case ZR:a=9;break e;case Q0:a=11;break e;case K0:a=14;break e;case no:a=16,n=null;break e}throw Error(P(130,e==null?e:typeof e,""))}return t=Br(a,r,t,i),t.elementType=e,t.type=n,t.lanes=o,t}function la(e,t,r,n){return e=Br(7,e,n,t),e.lanes=r,e}function hh(e,t,r,n){return e=Br(22,e,n,t),e.elementType=eL,e.lanes=r,e.stateNode={isHidden:!1},e}function Bg(e,t,r){return e=Br(6,e,null,t),e.lanes=r,e}function Hg(e,t,r){return t=Br(4,e.children!==null?e.children:[],e.key,t),t.lanes=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function U$(e,t,r,n,i){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=Pg(0),this.expirationTimes=Pg(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Pg(0),this.identifierPrefix=n,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function NE(e,t,r,n,i,o,a,s,u){return e=new U$(e,t,r,s,u),t===1?(t=1,o===!0&&(t|=8)):t=0,o=Br(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:n,isDehydrated:r,cache:null,transitions:null,pendingSuspenseBoundaries:null},lE(o),e}function V$(e,t,r){var n=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:ds,key:n==null?null:""+n,children:e,containerInfo:t,implementation:r}}function BP(e){if(!e)return Eo;e=e._reactInternals;e:{if(va(e)!==e||e.tag!==1)throw Error(P(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(lr(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(P(171))}if(e.tag===1){var r=e.type;if(lr(r))return KL(e,r,t)}return t}function HP(e,t,r,n,i,o,a,s,u){return e=NE(r,n,!0,e,i,o,a,s,u),e.context=BP(null),r=e.current,n=Xt(),i=vo(r),o=_i(n,i),o.callback=t??null,ho(r,o,i),e.current.lanes=i,nc(e,i,n),cr(e,n),e}function mh(e,t,r,n){var i=t.current,o=Xt(),a=vo(i);return r=BP(r),t.context===null?t.context=r:t.pendingContext=r,t=_i(o,a),t.payload={element:e},n=n===void 0?null:n,n!==null&&(t.callback=n),e=ho(i,t,a),e!==null&&(gn(e,i,a,o),Id(e,i,a)),a}function nh(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function zR(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var r=e.retryLane;e.retryLane=r!==0&&r<t?r:t}}function IE(e,t){zR(e,t),(e=e.alternate)&&zR(e,t)}function G$(){return null}var zP=typeof reportError=="function"?reportError:function(e){console.error(e)};function RE(e){this._internalRoot=e}vh.prototype.render=RE.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(P(409));mh(e,t,null,null)};vh.prototype.unmount=RE.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;ha(function(){mh(null,e,null,null)}),t[Si]=null}};function vh(e){this._internalRoot=e}vh.prototype.unstable_scheduleHydration=function(e){if(e){var t=wL();e={blockedOn:null,target:e,priority:t};for(var r=0;r<oo.length&&t!==0&&t<oo[r].priority;r++);oo.splice(r,0,e),r===0&&NL(e)}};function LE(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function yh(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function WR(){}function $$(e,t,r,n,i){if(i){if(typeof n=="function"){var o=n;n=function(){var l=nh(a);o.call(l)}}var a=HP(t,n,e,0,null,!1,!1,"",WR);return e._reactRootContainer=a,e[Si]=a.current,zl(e.nodeType===8?e.parentNode:e),ha(),a}for(;i=e.lastChild;)e.removeChild(i);if(typeof n=="function"){var s=n;n=function(){var l=nh(u);s.call(l)}}var u=NE(e,0,!1,null,null,!1,!1,"",WR);return e._reactRootContainer=u,e[Si]=u.current,zl(e.nodeType===8?e.parentNode:e),ha(function(){mh(t,u,r,n)}),u}function gh(e,t,r,n,i){var o=r._reactRootContainer;if(o){var a=o;if(typeof i=="function"){var s=i;i=function(){var u=nh(a);s.call(u)}}mh(t,a,e,i)}else a=$$(r,t,e,i,n);return nh(a)}bL=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var r=Ll(t.pendingLanes);r!==0&&(z0(t,r|1),cr(t,et()),(ue&6)===0&&(Fs=et()+500,bo()))}break;case 13:ha(function(){var n=wi(e,1);if(n!==null){var i=Xt();gn(n,e,1,i)}}),IE(e,1)}};W0=function(e){if(e.tag===13){var t=wi(e,134217728);if(t!==null){var r=Xt();gn(t,e,134217728,r)}IE(e,134217728)}};SL=function(e){if(e.tag===13){var t=vo(e),r=wi(e,t);if(r!==null){var n=Xt();gn(r,e,t,n)}IE(e,t)}};wL=function(){return Ee};OL=function(e,t){var r=Ee;try{return Ee=e,t()}finally{Ee=r}};s0=function(e,t,r){switch(t){case"input":if(e0(e,r),t=r.name,r.type==="radio"&&t!=null){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<r.length;t++){var n=r[t];if(n!==e&&n.form===e.form){var i=uh(n);if(!i)throw Error(P(90));rL(n),e0(n,i)}}}break;case"textarea":iL(e,r);break;case"select":t=r.value,t!=null&&Os(e,!!r.multiple,t,!1)}};fL=bE;pL=ha;var Q$={usingClientEntryPoint:!1,Events:[oc,gs,uh,lL,cL,bE]},Ol={findFiberByHostInstance:oa,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},K$={bundleType:Ol.bundleType,version:Ol.version,rendererPackageName:Ol.rendererPackageName,rendererConfig:Ol.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Ni.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=mL(e),e===null?null:e.stateNode},findFiberByHostInstance:Ol.findFiberByHostInstance||G$,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"&&(Nl=__REACT_DEVTOOLS_GLOBAL_HOOK__,!Nl.isDisabled&&Nl.supportsFiber))try{ih=Nl.inject(K$),Wn=Nl}catch{}var Nl;kr.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Q$;kr.createPortal=function(e,t){var r=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!LE(t))throw Error(P(200));return V$(e,t,null,r)};kr.createRoot=function(e,t){if(!LE(e))throw Error(P(299));var r=!1,n="",i=zP;return t!=null&&(t.unstable_strictMode===!0&&(r=!0),t.identifierPrefix!==void 0&&(n=t.identifierPrefix),t.onRecoverableError!==void 0&&(i=t.onRecoverableError)),t=NE(e,1,!1,null,null,r,!1,n,i),e[Si]=t.current,zl(e.nodeType===8?e.parentNode:e),new RE(t)};kr.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(P(188)):(e=Object.keys(e).join(","),Error(P(268,e)));return e=mL(t),e=e===null?null:e.stateNode,e};kr.flushSync=function(e){return ha(e)};kr.hydrate=function(e,t,r){if(!yh(t))throw Error(P(200));return gh(null,e,t,!0,r)};kr.hydrateRoot=function(e,t,r){if(!LE(e))throw Error(P(405));var n=r!=null&&r.hydratedSources||null,i=!1,o="",a=zP;if(r!=null&&(r.unstable_strictMode===!0&&(i=!0),r.identifierPrefix!==void 0&&(o=r.identifierPrefix),r.onRecoverableError!==void 0&&(a=r.onRecoverableError)),t=HP(t,null,e,1,r??null,i,!1,o,a),e[Si]=t.current,zl(e),n)for(e=0;e<n.length;e++)r=n[e],i=r._getVersion,i=i(r._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[r,i]:t.mutableSourceEagerHydrationData.push(r,i);return new vh(t)};kr.render=function(e,t,r){if(!yh(t))throw Error(P(200));return gh(null,e,t,!1,r)};kr.unmountComponentAtNode=function(e){if(!yh(e))throw Error(P(40));return e._reactRootContainer?(ha(function(){gh(null,null,e,!1,function(){e._reactRootContainer=null,e[Si]=null})}),!0):!1};kr.unstable_batchedUpdates=bE;kr.unstable_renderSubtreeIntoContainer=function(e,t,r,n){if(!yh(r))throw Error(P(200));if(e==null||e._reactInternals===void 0)throw Error(P(38));return gh(e,t,r,!1,n)};kr.version="18.2.0-next-9e3b772b8-20220608"});var PE=y((gre,XP)=>{"use strict";function YP(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(YP)}catch(e){console.error(e)}}YP(),XP.exports=WP()});var ix=y((Fre,W$)=>{W$.exports={"100":"Continue","101":"Switching Protocols","102":"Processing","103":"Early Hints","200":"OK","201":"Created","202":"Accepted","203":"Non-Authoritative Information","204":"No Content","205":"Reset Content","206":"Partial Content","207":"Multi-Status","208":"Already Reported","226":"IM Used","300":"Multiple Choices","301":"Moved Permanently","302":"Found","303":"See Other","304":"Not Modified","305":"Use Proxy","307":"Temporary Redirect","308":"Permanent Redirect","400":"Bad Request","401":"Unauthorized","402":"Payment Required","403":"Forbidden","404":"Not Found","405":"Method Not Allowed","406":"Not Acceptable","407":"Proxy Authentication Required","408":"Request Timeout","409":"Conflict","410":"Gone","411":"Length Required","412":"Precondition Failed","413":"Payload Too Large","414":"URI Too Long","415":"Unsupported Media Type","416":"Range Not Satisfiable","417":"Expectation Failed","418":"I'm a Teapot","421":"Misdirected Request","422":"Unprocessable Entity","423":"Locked","424":"Failed Dependency","425":"Too Early","426":"Upgrade Required","428":"Precondition Required","429":"Too Many Requests","431":"Request Header Fields Too Large","451":"Unavailable For Legal Reasons","500":"Internal Server Error","501":"Not Implemented","502":"Bad Gateway","503":"Service Unavailable","504":"Gateway Timeout","505":"HTTP Version Not Supported","506":"Variant Also Negotiates","507":"Insufficient Storage","508":"Loop Detected","509":"Bandwidth Limit Exceeded","510":"Not Extended","511":"Network Authentication Required"}});var ox=y(Th=>{"use strict";Object.defineProperty(Th,"__esModule",{value:!0});Th.normalizeHeaderName=void 0;var Y$=/[^a-z0-9\-#$%&'*+.^_`|~]/i;function X$(e){if(typeof e!="string"&&(e=String(e)),Y$.test(e)||e.trim()==="")throw new TypeError("Invalid character in header field name");return e.toLowerCase()}Th.normalizeHeaderName=X$});var ax=y(_h=>{"use strict";Object.defineProperty(_h,"__esModule",{value:!0});_h.normalizeHeaderValue=void 0;function J$(e){return typeof e!="string"&&(e=String(e)),e}_h.normalizeHeaderValue=J$});var lc=y(Ii=>{"use strict";var DE=Ii&&Ii.__generator||function(e,t){var r={label:0,sent:function(){if(o[0]&1)throw o[1];return o[1]},trys:[],ops:[]},n,i,o,a;return a={next:s(0),throw:s(1),return:s(2)},typeof Symbol=="function"&&(a[Symbol.iterator]=function(){return this}),a;function s(l){return function(c){return u([l,c])}}function u(l){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(o=l[0]&2?i.return:l[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,l[1])).done)return o;switch(i=0,o&&(l=[l[0]&2,o.value]),l[0]){case 0:case 1:o=l;break;case 4:return r.label++,{value:l[1],done:!1};case 5:r.label++,i=l[1],l=[0];continue;case 7:l=r.ops.pop(),r.trys.pop();continue;default:if(o=r.trys,!(o=o.length>0&&o[o.length-1])&&(l[0]===6||l[0]===2)){r=0;continue}if(l[0]===3&&(!o||l[1]>o[0]&&l[1]<o[3])){r.label=l[1];break}if(l[0]===6&&r.label<o[1]){r.label=o[1],o=l;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(l);break}o[2]&&r.ops.pop(),r.trys.pop();continue}l=t.call(e,r)}catch(c){l=[6,c],i=0}finally{n=o=0}if(l[0]&5)throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}},sx=Ii&&Ii.__read||function(e,t){var r=typeof Symbol=="function"&&e[Symbol.iterator];if(!r)return e;var n=r.call(e),i,o=[],a;try{for(;(t===void 0||t-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(s){a={error:s}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(a)throw a.error}}return o},bh=Ii&&Ii.__values||function(e){var t=typeof Symbol=="function"&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&typeof e.length=="number")return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},ux,lx;Object.defineProperty(Ii,"__esModule",{value:!0});var uc=ox(),Z$=ax(),Yr=Symbol("normalizedHeaders"),Sh=Symbol("rawHeaderNames"),eQ=function(){function e(t){var r=this;if(this[ux]={},this[lx]=new Map,["Headers","HeadersPolyfill"].includes(t?.constructor.name)||t instanceof e){var n=t;n.forEach(function(i,o){r.append(o,i)},this)}else Array.isArray(t)?t.forEach(function(i){var o=sx(i,2),a=o[0],s=o[1];r.append(a,Array.isArray(s)?s.join(", "):s)}):t&&Object.getOwnPropertyNames(t).forEach(function(i){var o=t[i];r.append(i,Array.isArray(o)?o.join(", "):o)})}return e.prototype[ux=Yr,lx=Sh,Symbol.iterator]=function(){return this.entries()},e.prototype.keys=function(){var t,r,n,i,o,a;return DE(this,function(s){switch(s.label){case 0:s.trys.push([0,5,6,7]),t=bh(Object.keys(this[Yr])),r=t.next(),s.label=1;case 1:return r.done?[3,4]:(n=r.value,[4,n]);case 2:s.sent(),s.label=3;case 3:return r=t.next(),[3,1];case 4:return[3,7];case 5:return i=s.sent(),o={error:i},[3,7];case 6:try{r&&!r.done&&(a=t.return)&&a.call(t)}finally{if(o)throw o.error}return[7];case 7:return[2]}})},e.prototype.values=function(){var t,r,n,i,o,a;return DE(this,function(s){switch(s.label){case 0:s.trys.push([0,5,6,7]),t=bh(Object.values(this[Yr])),r=t.next(),s.label=1;case 1:return r.done?[3,4]:(n=r.value,[4,n]);case 2:s.sent(),s.label=3;case 3:return r=t.next(),[3,1];case 4:return[3,7];case 5:return i=s.sent(),o={error:i},[3,7];case 6:try{r&&!r.done&&(a=t.return)&&a.call(t)}finally{if(o)throw o.error}return[7];case 7:return[2]}})},e.prototype.entries=function(){var t,r,n,i,o,a;return DE(this,function(s){switch(s.label){case 0:s.trys.push([0,5,6,7]),t=bh(Object.keys(this[Yr])),r=t.next(),s.label=1;case 1:return r.done?[3,4]:(n=r.value,[4,[n,this.get(n)]]);case 2:s.sent(),s.label=3;case 3:return r=t.next(),[3,1];case 4:return[3,7];case 5:return i=s.sent(),o={error:i},[3,7];case 6:try{r&&!r.done&&(a=t.return)&&a.call(t)}finally{if(o)throw o.error}return[7];case 7:return[2]}})},e.prototype.get=function(t){return this[Yr][uc.normalizeHeaderName(t)]||null},e.prototype.set=function(t,r){var n=uc.normalizeHeaderName(t);this[Yr][n]=Z$.normalizeHeaderValue(r),this[Sh].set(n,t)},e.prototype.append=function(t,r){var n=uc.normalizeHeaderName(t),i=this.has(n)?this.get(n)+", "+r:r;this.set(t,i)},e.prototype.delete=function(t){if(!!this.has(t)){var r=uc.normalizeHeaderName(t);delete this[Yr][r],this[Sh].delete(r)}},e.prototype.all=function(){return this[Yr]},e.prototype.raw=function(){var t,r,n={};try{for(var i=bh(this.entries()),o=i.next();!o.done;o=i.next()){var a=sx(o.value,2),s=a[0],u=a[1];n[this[Sh].get(s)]=u}}catch(l){t={error:l}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(t)throw t.error}}return n},e.prototype.has=function(t){return this[Yr].hasOwnProperty(uc.normalizeHeaderName(t))},e.prototype.forEach=function(t,r){for(var n in this[Yr])this[Yr].hasOwnProperty(n)&&t.call(r,this[Yr][n],n,this)},e}();Ii.default=eQ});var AE=y(wh=>{"use strict";Object.defineProperty(wh,"__esModule",{value:!0});wh.headersToList=void 0;function tQ(e){var t=[];return e.forEach(function(r,n){var i=r.includes(",")?r.split(",").map(function(o){return o.trim()}):r;t.push([n,i])}),t}wh.headersToList=tQ});var cx=y(Vs=>{"use strict";var rQ=Vs&&Vs.__read||function(e,t){var r=typeof Symbol=="function"&&e[Symbol.iterator];if(!r)return e;var n=r.call(e),i,o=[],a;try{for(;(t===void 0||t-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(s){a={error:s}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(a)throw a.error}}return o};Object.defineProperty(Vs,"__esModule",{value:!0});Vs.headersToString=void 0;var nQ=AE();function iQ(e){var t=nQ.headersToList(e),r=t.map(function(n){var i=rQ(n,2),o=i[0],a=i[1],s=[].concat(a);return o+": "+s.join(", ")});return r.join(`\r
`)}Vs.headersToString=iQ});var fx=y(Oh=>{"use strict";Object.defineProperty(Oh,"__esModule",{value:!0});Oh.headersToObject=void 0;var oQ=["user-agent"];function aQ(e){var t={};return e.forEach(function(r,n){var i=!oQ.includes(n.toLowerCase())&&r.includes(",");t[n]=i?r.split(",").map(function(o){return o.trim()}):r}),t}Oh.headersToObject=aQ});var px=y(Nh=>{"use strict";Object.defineProperty(Nh,"__esModule",{value:!0});Nh.stringToHeaders=void 0;var sQ=lc();function uQ(e){var t=e.trim().split(/[\r\n]+/);return t.reduce(function(r,n){if(n.trim()==="")return r;var i=n.split(": "),o=i.shift(),a=i.join(": ");return r.append(o,a),r},new sQ.default)}Nh.stringToHeaders=uQ});var dx=y(Gs=>{"use strict";var lQ=Gs&&Gs.__read||function(e,t){var r=typeof Symbol=="function"&&e[Symbol.iterator];if(!r)return e;var n=r.call(e),i,o=[],a;try{for(;(t===void 0||t-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(s){a={error:s}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(a)throw a.error}}return o};Object.defineProperty(Gs,"__esModule",{value:!0});Gs.listToHeaders=void 0;var cQ=lc();function fQ(e){var t=new cQ.default;return e.forEach(function(r){var n=lQ(r,2),i=n[0],o=n[1],a=[].concat(o);a.forEach(function(s){t.append(i,s)})}),t}Gs.listToHeaders=fQ});var Rh=y(Ih=>{"use strict";Object.defineProperty(Ih,"__esModule",{value:!0});Ih.reduceHeadersObject=void 0;function pQ(e,t,r){return Object.keys(e).reduce(function(n,i){return t(n,i,e[i])},r)}Ih.reduceHeadersObject=pQ});var hx=y(Lh=>{"use strict";Object.defineProperty(Lh,"__esModule",{value:!0});Lh.objectToHeaders=void 0;var dQ=lc(),hQ=Rh();function mQ(e){return hQ.reduceHeadersObject(e,function(t,r,n){var i=[].concat(n).filter(Boolean);return i.forEach(function(o){t.append(r,o)}),t},new dQ.default)}Lh.objectToHeaders=mQ});var mx=y($s=>{"use strict";var vQ=$s&&$s.__read||function(e,t){var r=typeof Symbol=="function"&&e[Symbol.iterator];if(!r)return e;var n=r.call(e),i,o=[],a;try{for(;(t===void 0||t-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(s){a={error:s}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(a)throw a.error}}return o};Object.defineProperty($s,"__esModule",{value:!0});$s.flattenHeadersList=void 0;function yQ(e){return e.map(function(t){var r=vQ(t,2),n=r[0],i=r[1];return[n,[].concat(i).join("; ")]})}$s.flattenHeadersList=yQ});var vx=y(Ph=>{"use strict";Object.defineProperty(Ph,"__esModule",{value:!0});Ph.flattenHeadersObject=void 0;var gQ=Rh();function EQ(e){return gQ.reduceHeadersObject(e,function(t,r,n){return t[r]=[].concat(n).join("; "),t},{})}Ph.flattenHeadersObject=EQ});var Tn=y(We=>{"use strict";Object.defineProperty(We,"__esModule",{value:!0});We.flattenHeadersObject=We.flattenHeadersList=We.reduceHeadersObject=We.objectToHeaders=We.listToHeaders=We.stringToHeaders=We.headersToObject=We.headersToList=We.headersToString=We.Headers=void 0;var TQ=lc();Object.defineProperty(We,"Headers",{enumerable:!0,get:function(){return TQ.default}});var _Q=cx();Object.defineProperty(We,"headersToString",{enumerable:!0,get:function(){return _Q.headersToString}});var bQ=AE();Object.defineProperty(We,"headersToList",{enumerable:!0,get:function(){return bQ.headersToList}});var SQ=fx();Object.defineProperty(We,"headersToObject",{enumerable:!0,get:function(){return SQ.headersToObject}});var wQ=px();Object.defineProperty(We,"stringToHeaders",{enumerable:!0,get:function(){return wQ.stringToHeaders}});var OQ=dx();Object.defineProperty(We,"listToHeaders",{enumerable:!0,get:function(){return OQ.listToHeaders}});var NQ=hx();Object.defineProperty(We,"objectToHeaders",{enumerable:!0,get:function(){return NQ.objectToHeaders}});var IQ=Rh();Object.defineProperty(We,"reduceHeadersObject",{enumerable:!0,get:function(){return IQ.reduceHeadersObject}});var RQ=mx();Object.defineProperty(We,"flattenHeadersList",{enumerable:!0,get:function(){return RQ.flattenHeadersList}});var LQ=vx();Object.defineProperty(We,"flattenHeadersObject",{enumerable:!0,get:function(){return LQ.flattenHeadersObject}})});var Ch=y(jE=>{"use strict";jE.parse=CQ;jE.serialize=kQ;var PQ=decodeURIComponent,xQ=encodeURIComponent,xh=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;function CQ(e,t){if(typeof e!="string")throw new TypeError("argument str must be a string");for(var r={},n=t||{},i=e.split(";"),o=n.decode||PQ,a=0;a<i.length;a++){var s=i[a],u=s.indexOf("=");if(!(u<0)){var l=s.substring(0,u).trim();if(r[l]==null){var c=s.substring(u+1,s.length).trim();c[0]==='"'&&(c=c.slice(1,-1)),r[l]=DQ(c,o)}}}return r}function kQ(e,t,r){var n=r||{},i=n.encode||xQ;if(typeof i!="function")throw new TypeError("option encode is invalid");if(!xh.test(e))throw new TypeError("argument name is invalid");var o=i(t);if(o&&!xh.test(o))throw new TypeError("argument val is invalid");var a=e+"="+o;if(n.maxAge!=null){var s=n.maxAge-0;if(isNaN(s)||!isFinite(s))throw new TypeError("option maxAge is invalid");a+="; Max-Age="+Math.floor(s)}if(n.domain){if(!xh.test(n.domain))throw new TypeError("option domain is invalid");a+="; Domain="+n.domain}if(n.path){if(!xh.test(n.path))throw new TypeError("option path is invalid");a+="; Path="+n.path}if(n.expires){if(typeof n.expires.toUTCString!="function")throw new TypeError("option expires is invalid");a+="; Expires="+n.expires.toUTCString()}if(n.httpOnly&&(a+="; HttpOnly"),n.secure&&(a+="; Secure"),n.sameSite){var u=typeof n.sameSite=="string"?n.sameSite.toLowerCase():n.sameSite;switch(u){case!0:a+="; SameSite=Strict";break;case"lax":a+="; SameSite=Lax";break;case"strict":a+="; SameSite=Strict";break;case"none":a+="; SameSite=None";break;default:throw new TypeError("option sameSite is invalid")}}return a}function DQ(e,t){try{return t(e)}catch{return e}}});var Dh=y((kh,yx)=>{(function(e,t){typeof kh=="object"&&typeof yx<"u"?t(kh):typeof define=="function"&&define.amd?define(["exports"],t):(e=typeof globalThis<"u"?globalThis:e||self,t(e.IsNodeProcess={}))})(kh,function(e){"use strict";function t(){return typeof navigator<"u"&&navigator.product==="ReactNative"?!0:!!(typeof process<"u"&&process.versions&&process.versions.node)}e.isNodeProcess=t,Object.defineProperty(e,"__esModule",{value:!0})})});var Ex=y((Qs,gx)=>{"use strict";var AQ=function(){if(typeof self<"u")return self;if(typeof window<"u")return window;if(typeof Ri<"u")return Ri;throw new Error("unable to locate global object")},Ri=AQ();gx.exports=Qs=Ri.fetch;Ri.fetch&&(Qs.default=Ri.fetch.bind(Ri));Qs.Headers=Ri.Headers;Qs.Request=Ri.Request;Qs.Response=Ri.Response});var Px=y((Jre,FE)=>{"use strict";var Ks=typeof Reflect=="object"?Reflect:null,Tx=Ks&&typeof Ks.apply=="function"?Ks.apply:function(t,r,n){return Function.prototype.apply.call(t,r,n)},Ah;Ks&&typeof Ks.ownKeys=="function"?Ah=Ks.ownKeys:Object.getOwnPropertySymbols?Ah=function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:Ah=function(t){return Object.getOwnPropertyNames(t)};function jQ(e){console&&console.warn&&console.warn(e)}var bx=Number.isNaN||function(t){return t!==t};function _e(){_e.init.call(this)}FE.exports=_e;FE.exports.once=UQ;_e.EventEmitter=_e;_e.prototype._events=void 0;_e.prototype._eventsCount=0;_e.prototype._maxListeners=void 0;var _x=10;function jh(e){if(typeof e!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}Object.defineProperty(_e,"defaultMaxListeners",{enumerable:!0,get:function(){return _x},set:function(e){if(typeof e!="number"||e<0||bx(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");_x=e}});_e.init=function(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0};_e.prototype.setMaxListeners=function(t){if(typeof t!="number"||t<0||bx(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this};function Sx(e){return e._maxListeners===void 0?_e.defaultMaxListeners:e._maxListeners}_e.prototype.getMaxListeners=function(){return Sx(this)};_e.prototype.emit=function(t){for(var r=[],n=1;n<arguments.length;n++)r.push(arguments[n]);var i=t==="error",o=this._events;if(o!==void 0)i=i&&o.error===void 0;else if(!i)return!1;if(i){var a;if(r.length>0&&(a=r[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var u=o[t];if(u===void 0)return!1;if(typeof u=="function")Tx(u,this,r);else for(var l=u.length,c=Rx(u,l),n=0;n<l;++n)Tx(c[n],this,r);return!0};function wx(e,t,r,n){var i,o,a;if(jh(r),o=e._events,o===void 0?(o=e._events=Object.create(null),e._eventsCount=0):(o.newListener!==void 0&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),a=o[t]),a===void 0)a=o[t]=r,++e._eventsCount;else if(typeof a=="function"?a=o[t]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),i=Sx(e),i>0&&a.length>i&&!a.warned){a.warned=!0;var s=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");s.name="MaxListenersExceededWarning",s.emitter=e,s.type=t,s.count=a.length,jQ(s)}return e}_e.prototype.addListener=function(t,r){return wx(this,t,r,!1)};_e.prototype.on=_e.prototype.addListener;_e.prototype.prependListener=function(t,r){return wx(this,t,r,!0)};function FQ(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function Ox(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=FQ.bind(n);return i.listener=r,n.wrapFn=i,i}_e.prototype.once=function(t,r){return jh(r),this.on(t,Ox(this,t,r)),this};_e.prototype.prependOnceListener=function(t,r){return jh(r),this.prependListener(t,Ox(this,t,r)),this};_e.prototype.removeListener=function(t,r){var n,i,o,a,s;if(jh(r),i=this._events,i===void 0)return this;if(n=i[t],n===void 0)return this;if(n===r||n.listener===r)--this._eventsCount===0?this._events=Object.create(null):(delete i[t],i.removeListener&&this.emit("removeListener",t,n.listener||r));else if(typeof n!="function"){for(o=-1,a=n.length-1;a>=0;a--)if(n[a]===r||n[a].listener===r){s=n[a].listener,o=a;break}if(o<0)return this;o===0?n.shift():MQ(n,o),n.length===1&&(i[t]=n[0]),i.removeListener!==void 0&&this.emit("removeListener",t,s||r)}return this};_e.prototype.off=_e.prototype.removeListener;_e.prototype.removeAllListeners=function(t){var r,n,i;if(n=this._events,n===void 0)return this;if(n.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):n[t]!==void 0&&(--this._eventsCount===0?this._events=Object.create(null):delete n[t]),this;if(arguments.length===0){var o=Object.keys(n),a;for(i=0;i<o.length;++i)a=o[i],a!=="removeListener"&&this.removeAllListeners(a);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(r=n[t],typeof r=="function")this.removeListener(t,r);else if(r!==void 0)for(i=r.length-1;i>=0;i--)this.removeListener(t,r[i]);return this};function Nx(e,t,r){var n=e._events;if(n===void 0)return[];var i=n[t];return i===void 0?[]:typeof i=="function"?r?[i.listener||i]:[i]:r?qQ(i):Rx(i,i.length)}_e.prototype.listeners=function(t){return Nx(this,t,!0)};_e.prototype.rawListeners=function(t){return Nx(this,t,!1)};_e.listenerCount=function(e,t){return typeof e.listenerCount=="function"?e.listenerCount(t):Ix.call(e,t)};_e.prototype.listenerCount=Ix;function Ix(e){var t=this._events;if(t!==void 0){var r=t[e];if(typeof r=="function")return 1;if(r!==void 0)return r.length}return 0}_e.prototype.eventNames=function(){return this._eventsCount>0?Ah(this._events):[]};function Rx(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function MQ(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}function qQ(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}function UQ(e,t){return new Promise(function(r,n){function i(a){e.removeListener(t,o),n(a)}function o(){typeof e.removeListener=="function"&&e.removeListener("error",i),r([].slice.call(arguments))}Lx(e,t,o,{once:!0}),t!=="error"&&VQ(e,i,{once:!0})})}function VQ(e,t,r){typeof e.on=="function"&&Lx(e,"error",t,r)}function Lx(e,t,r,n){if(typeof e.on=="function")n.once?e.once(t,r):e.on(t,r);else if(typeof e.addEventListener=="function")e.addEventListener(t,function i(o){n.once&&e.removeEventListener(t,i),r(o)});else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e)}});var xx=y(So=>{"use strict";var GQ=So&&So.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(n[o]=i[o])},e(t,r)};return function(t,r){e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),$Q=So&&So.__spreadArrays||function(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;for(var n=Array(e),i=0,t=0;t<r;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)n[i]=o[a];return n};So.__esModule=!0;So.StrictEventEmitter=void 0;var QQ=Px(),KQ=function(e){GQ(t,e);function t(){return e.call(this)||this}return t.prototype.on=function(r,n){return e.prototype.on.call(this,r.toString(),n)},t.prototype.once=function(r,n){return e.prototype.on.call(this,r.toString(),n)},t.prototype.off=function(r,n){return e.prototype.off.call(this,r.toString(),n)},t.prototype.emit=function(r){for(var n=[],i=1;i<arguments.length;i++)n[i-1]=arguments[i];return e.prototype.emit.apply(this,$Q([r.toString()],n))},t.prototype.addListener=function(r,n){return e.prototype.addListener.call(this,r.toString(),n)},t.prototype.prependListener=function(r,n){return e.prototype.prependListener.call(this,r.toString(),n)},t.prototype.prependOnceListener=function(r,n){return e.prototype.prependOnceListener.call(this,r.toString(),n)},t.prototype.removeListener=function(r,n){return e.prototype.removeListener.call(this,r.toString(),n)},t.prototype.removeAllListeners=function(r){return e.prototype.removeAllListeners.call(this,r?r.toString():void 0)},t.prototype.eventNames=function(){return e.prototype.eventNames.call(this)},t.prototype.listeners=function(r){return e.prototype.listeners.call(this,r.toString())},t.prototype.rawListeners=function(r){return e.prototype.rawListeners.call(this,r.toString())},t.prototype.listenerCount=function(r){return e.prototype.listenerCount.call(this,r.toString())},t}(QQ.EventEmitter);So.StrictEventEmitter=KQ});var ME=y(ya=>{"use strict";var BQ=ya&&ya.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),HQ=ya&&ya.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&BQ(t,e,r)};ya.__esModule=!0;HQ(xx(),ya)});var Cx=y(qE=>{"use strict";Object.defineProperty(qE,"__esModule",{value:!0});qE.until=async e=>{try{let t=await e().catch(r=>{throw r});return[null,t]}catch(t){return[t,null]}}});var Bs=y(UE=>{"use strict";Object.defineProperty(UE,"__esModule",{value:!0});var zQ=Cx();UE.until=zQ.until});var VE=y(Fh=>{"use strict";Object.defineProperty(Fh,"__esModule",{value:!0});Fh.format=void 0;var WQ=/(%?)(%([sdjo]))/g;function YQ(e,t){switch(t){case"s":return e;case"d":case"i":return Number(e);case"j":return JSON.stringify(e);case"o":{if(typeof e=="string")return e;var r=JSON.stringify(e);return r==="{}"||r==="[]"||/^\[object .+?\]$/.test(r)?e:r}}}function XQ(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(t.length===0)return e;var n=0,i=e.replace(WQ,function(o,a,s,u){var l=t[n],c=YQ(l,u);return a?o:(n++,c)});return n<t.length&&(i+=" "+t.slice(n).join(" ")),i=i.replace(/%{2,2}/g,"%"),i}Fh.format=XQ});var Fx=y(Dr=>{"use strict";var JQ=Dr&&Dr.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(n[o]=i[o])},e(t,r)};return function(t,r){if(typeof r!="function"&&r!==null)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),kx=Dr&&Dr.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(Dr,"__esModule",{value:!0});Dr.invariant=Dr.createInvariantWith=Dr.InvariantError=void 0;var Dx=VE(),ZQ=2;function Ax(e){if(!!e.stack){var t=e.stack.split(`
`);t.splice(1,ZQ),e.stack=t.join(`
`)}}var jx=function(e){JQ(t,e);function t(r){for(var n=[],i=1;i<arguments.length;i++)n[i-1]=arguments[i];var o=e.call(this,r)||this;return o.message=r,o.name="Invariant Violation",o.message=Dx.format.apply(void 0,kx([r],n)),Ax(o),o}return t}(Error);Dr.InvariantError=jx;function GE(e){var t=function(r,n){for(var i=[],o=2;o<arguments.length;o++)i[o-2]=arguments[o];if(!r){var a=Dx.format.apply(void 0,kx([n],i)),s=!!e.prototype.name,u=s?new e(a):e(a);throw Ax(u),u}};return t}Dr.createInvariantWith=GE;function e8(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];return GE(e).apply(void 0,t)}Dr.invariant=GE(jx);Dr.invariant.as=e8});var Hs=y(wo=>{"use strict";var t8=wo&&wo.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),Mx=wo&&wo.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&t8(t,e,r)};Object.defineProperty(wo,"__esModule",{value:!0});Mx(Fx(),wo);Mx(VE(),wo)});var Ux=y((ane,cc)=>{"use strict";var zs={decodeValues:!0,map:!1,silent:!1};function $E(e){return typeof e=="string"&&!!e.trim()}function QE(e,t){var r=e.split(";").filter($E),n=r.shift().split("="),i=n.shift(),o=n.join("=");t=t?Object.assign({},zs,t):zs;try{o=t.decodeValues?decodeURIComponent(o):o}catch(s){console.error("set-cookie-parser encountered an error while decoding a cookie with value '"+o+"'. Set options.decodeValues to false to disable this feature.",s)}var a={name:i,value:o};return r.forEach(function(s){var u=s.split("="),l=u.shift().trimLeft().toLowerCase(),c=u.join("=");l==="expires"?a.expires=new Date(c):l==="max-age"?a.maxAge=parseInt(c,10):l==="secure"?a.secure=!0:l==="httponly"?a.httpOnly=!0:l==="samesite"?a.sameSite=c:a[l]=c}),a}function qx(e,t){if(t=t?Object.assign({},zs,t):zs,!e)return t.map?{}:[];if(e.headers&&e.headers["set-cookie"])e=e.headers["set-cookie"];else if(e.headers){var r=e.headers[Object.keys(e.headers).find(function(i){return i.toLowerCase()==="set-cookie"})];!r&&e.headers.cookie&&!t.silent&&console.warn("Warning: set-cookie-parser appears to have been called on a request object. It is designed to parse Set-Cookie headers from responses, not Cookie headers from requests. Set the option {silent: true} to suppress this warning."),e=r}if(Array.isArray(e)||(e=[e]),t=t?Object.assign({},zs,t):zs,t.map){var n={};return e.filter($E).reduce(function(i,o){var a=QE(o,t);return i[a.name]=a,i},n)}else return e.filter($E).map(function(i){return QE(i,t)})}function r8(e){if(Array.isArray(e))return e;if(typeof e!="string")return[];var t=[],r=0,n,i,o,a,s;function u(){for(;r<e.length&&/\s/.test(e.charAt(r));)r+=1;return r<e.length}function l(){return i=e.charAt(r),i!=="="&&i!==";"&&i!==","}for(;r<e.length;){for(n=r,s=!1;u();)if(i=e.charAt(r),i===","){for(o=r,r+=1,u(),a=r;r<e.length&&l();)r+=1;r<e.length&&e.charAt(r)==="="?(s=!0,r=a,t.push(e.substring(n,o)),n=r):r=o+1}else r+=1;(!s||r>=e.length)&&t.push(e.substring(n,e.length))}return t}cc.exports=qx;cc.exports.parse=qx;cc.exports.parseString=QE;cc.exports.splitCookiesString=r8});var Qx=y(fr=>{"use strict";var Vx=fr&&fr.__rest||function(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function")for(var i=0,n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(e,n[i])&&(r[n[i]]=e[n[i]]);return r};Object.defineProperty(fr,"__esModule",{value:!0});fr.store=fr.PERSISTENCY_KEY=void 0;var Gx=Ux();fr.PERSISTENCY_KEY="MSW_COOKIE_STORE";function $x(){try{if(localStorage==null)return!1;let e=fr.PERSISTENCY_KEY+"_test";return localStorage.setItem(e,"test"),localStorage.getItem(e),localStorage.removeItem(e),!0}catch{return!1}}var KE=class{constructor(){this.store=new Map}add(t,r){if(t.credentials==="omit")return;let n=new URL(t.url),i=r.headers.get("set-cookie");if(!i)return;let o=Date.now(),a=Gx.parse(i).map(u=>{var{maxAge:l}=u,c=Vx(u,["maxAge"]);return Object.assign(Object.assign({},c),{expires:l===void 0?c.expires:new Date(o+l*1e3),maxAge:l})}),s=this.store.get(n.origin)||new Map;a.forEach(u=>{this.store.set(n.origin,s.set(u.name,u))})}get(t){this.deleteExpiredCookies();let r=new URL(t.url),n=this.store.get(r.origin)||new Map;switch(t.credentials){case"include":return typeof document>"u"||Gx.parse(document.cookie).forEach(o=>{n.set(o.name,o)}),n;case"same-origin":return n;default:return new Map}}getAll(){return this.deleteExpiredCookies(),this.store}deleteAll(t){let r=new URL(t.url);this.store.delete(r.origin)}clear(){this.store.clear()}hydrate(){if(!$x())return;let t=localStorage.getItem(fr.PERSISTENCY_KEY);if(!!t)try{JSON.parse(t).forEach(([n,i])=>{this.store.set(n,new Map(i.map(o=>{var[a,s]=o,{expires:u}=s,l=Vx(s,["expires"]);return[a,u===void 0?l:Object.assign(Object.assign({},l),{expires:new Date(u)})]})))})}catch(r){console.warn(`
[virtual-cookie] Failed to parse a stored cookie from the localStorage (key "${fr.PERSISTENCY_KEY}").

Stored value:
${localStorage.getItem(fr.PERSISTENCY_KEY)}

Thrown exception:
${r}

Invalid value has been removed from localStorage to prevent subsequent failed parsing attempts.`),localStorage.removeItem(fr.PERSISTENCY_KEY)}}persist(){if(!$x())return;let t=Array.from(this.store.entries()).map(([r,n])=>[r,Array.from(n.entries())]);localStorage.setItem(fr.PERSISTENCY_KEY,JSON.stringify(t))}deleteExpiredCookies(){let t=Date.now();this.store.forEach((r,n)=>{r.forEach(({expires:i,name:o})=>{i!==void 0&&i.getTime()<=t&&r.delete(o)}),r.size===0&&this.store.delete(n)})}};fr.store=new KE});var BE=y(ga=>{"use strict";var n8=ga&&ga.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),i8=ga&&ga.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&n8(t,e,r)};Object.defineProperty(ga,"__esModule",{value:!0});i8(Qx(),ga)});var Bx=y((lne,Kx)=>{"use strict";Kx.exports=function(){function e(t,r,n,i,o){return t<r||n<r?t>n?n+1:t+1:i===o?r:r+1}return function(t,r){if(t===r)return 0;if(t.length>r.length){var n=t;t=r,r=n}for(var i=t.length,o=r.length;i>0&&t.charCodeAt(i-1)===r.charCodeAt(o-1);)i--,o--;for(var a=0;a<i&&t.charCodeAt(a)===r.charCodeAt(a);)a++;if(i-=a,o-=a,i===0||o<3)return o;var s=0,u,l,c,f,p,d,m,E,b,h,v,g,_=[];for(u=0;u<i;u++)_.push(u+1),_.push(t.charCodeAt(a+u));for(var N=_.length-1;s<o-3;)for(b=r.charCodeAt(a+(l=s)),h=r.charCodeAt(a+(c=s+1)),v=r.charCodeAt(a+(f=s+2)),g=r.charCodeAt(a+(p=s+3)),d=s+=4,u=0;u<N;u+=2)m=_[u],E=_[u+1],l=e(m,l,c,b,E),c=e(l,c,f,h,E),f=e(c,f,p,v,E),d=e(f,p,d,g,E),_[u]=d,p=f,f=c,c=l,l=m;for(;s<o;)for(b=r.charCodeAt(a+(l=s)),d=++s,u=0;u<N;u+=2)m=_[u],_[u]=d=e(m,l,d,b,_[u+1]),l=m;return d}}()});var Hx=y(Ws=>{"use strict";Object.defineProperty(Ws,"__esModule",{value:!0});Ws.versionInfo=Ws.version=void 0;var o8="16.5.0";Ws.version=o8;var a8=Object.freeze({major:16,minor:5,patch:0,preReleaseTag:null});Ws.versionInfo=a8});var Zt=y(HE=>{"use strict";Object.defineProperty(HE,"__esModule",{value:!0});HE.devAssert=s8;function s8(e,t){if(!Boolean(e))throw new Error(t)}});var Mh=y(zE=>{"use strict";Object.defineProperty(zE,"__esModule",{value:!0});zE.isPromise=u8;function u8(e){return typeof e?.then=="function"}});var Xn=y(WE=>{"use strict";Object.defineProperty(WE,"__esModule",{value:!0});WE.isObjectLike=l8;function l8(e){return typeof e=="object"&&e!==null}});var jt=y(YE=>{"use strict";Object.defineProperty(YE,"__esModule",{value:!0});YE.invariant=c8;function c8(e,t){if(!Boolean(e))throw new Error(t??"Unexpected invariant triggered.")}});var qh=y(XE=>{"use strict";Object.defineProperty(XE,"__esModule",{value:!0});XE.getLocation=d8;var f8=jt(),p8=/\r\n|[\n\r]/g;function d8(e,t){let r=0,n=1;for(let i of e.body.matchAll(p8)){if(typeof i.index=="number"||(0,f8.invariant)(!1),i.index>=t)break;r=i.index+i[0].length,n+=1}return{line:n,column:t+1-r}}});var JE=y(Uh=>{"use strict";Object.defineProperty(Uh,"__esModule",{value:!0});Uh.printLocation=m8;Uh.printSourceLocation=Wx;var h8=qh();function m8(e){return Wx(e.source,(0,h8.getLocation)(e.source,e.start))}function Wx(e,t){let r=e.locationOffset.column-1,n="".padStart(r)+e.body,i=t.line-1,o=e.locationOffset.line-1,a=t.line+o,s=t.line===1?r:0,u=t.column+s,l=`${e.name}:${a}:${u}
`,c=n.split(/\r\n|[\n\r]/g),f=c[i];if(f.length>120){let p=Math.floor(u/80),d=u%80,m=[];for(let E=0;E<f.length;E+=80)m.push(f.slice(E,E+80));return l+zx([[`${a} |`,m[0]],...m.slice(1,p+1).map(E=>["|",E]),["|","^".padStart(d)],["|",m[p+1]]])}return l+zx([[`${a-1} |`,c[i-1]],[`${a} |`,f],["|","^".padStart(u)],[`${a+1} |`,c[i+1]]])}function zx(e){let t=e.filter(([n,i])=>i!==void 0),r=Math.max(...t.map(([n])=>n.length));return t.map(([n,i])=>n.padStart(r)+(i?" "+i:"")).join(`
`)}});var Q=y(Ys=>{"use strict";Object.defineProperty(Ys,"__esModule",{value:!0});Ys.GraphQLError=void 0;Ys.formatError=E8;Ys.printError=g8;var v8=Xn(),Yx=qh(),Xx=JE();function y8(e){let t=e[0];return t==null||"kind"in t||"length"in t?{nodes:t,source:e[1],positions:e[2],path:e[3],originalError:e[4],extensions:e[5]}:t}var fc=class extends Error{constructor(t,...r){var n,i,o;let{nodes:a,source:s,positions:u,path:l,originalError:c,extensions:f}=y8(r);super(t),this.name="GraphQLError",this.path=l??void 0,this.originalError=c??void 0,this.nodes=Jx(Array.isArray(a)?a:a?[a]:void 0);let p=Jx((n=this.nodes)===null||n===void 0?void 0:n.map(m=>m.loc).filter(m=>m!=null));this.source=s??(p==null||(i=p[0])===null||i===void 0?void 0:i.source),this.positions=u??p?.map(m=>m.start),this.locations=u&&s?u.map(m=>(0,Yx.getLocation)(s,m)):p?.map(m=>(0,Yx.getLocation)(m.source,m.start));let d=(0,v8.isObjectLike)(c?.extensions)?c?.extensions:void 0;this.extensions=(o=f??d)!==null&&o!==void 0?o:Object.create(null),Object.defineProperties(this,{message:{writable:!0,enumerable:!0},name:{enumerable:!1},nodes:{enumerable:!1},source:{enumerable:!1},positions:{enumerable:!1},originalError:{enumerable:!1}}),c!=null&&c.stack?Object.defineProperty(this,"stack",{value:c.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(this,fc):Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}get[Symbol.toStringTag](){return"GraphQLError"}toString(){let t=this.message;if(this.nodes)for(let r of this.nodes)r.loc&&(t+=`

`+(0,Xx.printLocation)(r.loc));else if(this.source&&this.locations)for(let r of this.locations)t+=`

`+(0,Xx.printSourceLocation)(this.source,r);return t}toJSON(){let t={message:this.message};return this.locations!=null&&(t.locations=this.locations),this.path!=null&&(t.path=this.path),this.extensions!=null&&Object.keys(this.extensions).length>0&&(t.extensions=this.extensions),t}};Ys.GraphQLError=fc;function Jx(e){return e===void 0||e.length===0?void 0:e}function g8(e){return e.toString()}function E8(e){return e.toJSON()}});var Vh=y(ZE=>{"use strict";Object.defineProperty(ZE,"__esModule",{value:!0});ZE.syntaxError=_8;var T8=Q();function _8(e,t,r){return new T8.GraphQLError(`Syntax Error: ${r}`,{source:e,positions:[t]})}});var Jn=y(Xr=>{"use strict";Object.defineProperty(Xr,"__esModule",{value:!0});Xr.Token=Xr.QueryDocumentKeys=Xr.OperationTypeNode=Xr.Location=void 0;Xr.isNode=S8;var eT=class{constructor(t,r,n){this.start=t.start,this.end=r.end,this.startToken=t,this.endToken=r,this.source=n}get[Symbol.toStringTag](){return"Location"}toJSON(){return{start:this.start,end:this.end}}};Xr.Location=eT;var tT=class{constructor(t,r,n,i,o,a){this.kind=t,this.start=r,this.end=n,this.line=i,this.column=o,this.value=a,this.prev=null,this.next=null}get[Symbol.toStringTag](){return"Token"}toJSON(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}}};Xr.Token=tT;var Zx={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]};Xr.QueryDocumentKeys=Zx;var b8=new Set(Object.keys(Zx));function S8(e){let t=e?.kind;return typeof t=="string"&&b8.has(t)}var rT;Xr.OperationTypeNode=rT;(function(e){e.QUERY="query",e.MUTATION="mutation",e.SUBSCRIPTION="subscription"})(rT||(Xr.OperationTypeNode=rT={}))});var Xs=y(pc=>{"use strict";Object.defineProperty(pc,"__esModule",{value:!0});pc.DirectiveLocation=void 0;var nT;pc.DirectiveLocation=nT;(function(e){e.QUERY="QUERY",e.MUTATION="MUTATION",e.SUBSCRIPTION="SUBSCRIPTION",e.FIELD="FIELD",e.FRAGMENT_DEFINITION="FRAGMENT_DEFINITION",e.FRAGMENT_SPREAD="FRAGMENT_SPREAD",e.INLINE_FRAGMENT="INLINE_FRAGMENT",e.VARIABLE_DEFINITION="VARIABLE_DEFINITION",e.SCHEMA="SCHEMA",e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.FIELD_DEFINITION="FIELD_DEFINITION",e.ARGUMENT_DEFINITION="ARGUMENT_DEFINITION",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.ENUM_VALUE="ENUM_VALUE",e.INPUT_OBJECT="INPUT_OBJECT",e.INPUT_FIELD_DEFINITION="INPUT_FIELD_DEFINITION"})(nT||(pc.DirectiveLocation=nT={}))});var le=y(dc=>{"use strict";Object.defineProperty(dc,"__esModule",{value:!0});dc.Kind=void 0;var iT;dc.Kind=iT;(function(e){e.NAME="Name",e.DOCUMENT="Document",e.OPERATION_DEFINITION="OperationDefinition",e.VARIABLE_DEFINITION="VariableDefinition",e.SELECTION_SET="SelectionSet",e.FIELD="Field",e.ARGUMENT="Argument",e.FRAGMENT_SPREAD="FragmentSpread",e.INLINE_FRAGMENT="InlineFragment",e.FRAGMENT_DEFINITION="FragmentDefinition",e.VARIABLE="Variable",e.INT="IntValue",e.FLOAT="FloatValue",e.STRING="StringValue",e.BOOLEAN="BooleanValue",e.NULL="NullValue",e.ENUM="EnumValue",e.LIST="ListValue",e.OBJECT="ObjectValue",e.OBJECT_FIELD="ObjectField",e.DIRECTIVE="Directive",e.NAMED_TYPE="NamedType",e.LIST_TYPE="ListType",e.NON_NULL_TYPE="NonNullType",e.SCHEMA_DEFINITION="SchemaDefinition",e.OPERATION_TYPE_DEFINITION="OperationTypeDefinition",e.SCALAR_TYPE_DEFINITION="ScalarTypeDefinition",e.OBJECT_TYPE_DEFINITION="ObjectTypeDefinition",e.FIELD_DEFINITION="FieldDefinition",e.INPUT_VALUE_DEFINITION="InputValueDefinition",e.INTERFACE_TYPE_DEFINITION="InterfaceTypeDefinition",e.UNION_TYPE_DEFINITION="UnionTypeDefinition",e.ENUM_TYPE_DEFINITION="EnumTypeDefinition",e.ENUM_VALUE_DEFINITION="EnumValueDefinition",e.INPUT_OBJECT_TYPE_DEFINITION="InputObjectTypeDefinition",e.DIRECTIVE_DEFINITION="DirectiveDefinition",e.SCHEMA_EXTENSION="SchemaExtension",e.SCALAR_TYPE_EXTENSION="ScalarTypeExtension",e.OBJECT_TYPE_EXTENSION="ObjectTypeExtension",e.INTERFACE_TYPE_EXTENSION="InterfaceTypeExtension",e.UNION_TYPE_EXTENSION="UnionTypeExtension",e.ENUM_TYPE_EXTENSION="EnumTypeExtension",e.INPUT_OBJECT_TYPE_EXTENSION="InputObjectTypeExtension"})(iT||(dc.Kind=iT={}))});var Gh=y(Ea=>{"use strict";Object.defineProperty(Ea,"__esModule",{value:!0});Ea.isDigit=eC;Ea.isLetter=oT;Ea.isNameContinue=N8;Ea.isNameStart=O8;Ea.isWhiteSpace=w8;function w8(e){return e===9||e===32}function eC(e){return e>=48&&e<=57}function oT(e){return e>=97&&e<=122||e>=65&&e<=90}function O8(e){return oT(e)||e===95}function N8(e){return oT(e)||eC(e)||e===95}});var mc=y(hc=>{"use strict";Object.defineProperty(hc,"__esModule",{value:!0});hc.dedentBlockStringLines=I8;hc.isPrintableAsBlockString=L8;hc.printBlockString=P8;var aT=Gh();function I8(e){var t;let r=Number.MAX_SAFE_INTEGER,n=null,i=-1;for(let a=0;a<e.length;++a){var o;let s=e[a],u=R8(s);u!==s.length&&(n=(o=n)!==null&&o!==void 0?o:a,i=a,a!==0&&u<r&&(r=u))}return e.map((a,s)=>s===0?a:a.slice(r)).slice((t=n)!==null&&t!==void 0?t:0,i+1)}function R8(e){let t=0;for(;t<e.length&&(0,aT.isWhiteSpace)(e.charCodeAt(t));)++t;return t}function L8(e){if(e==="")return!0;let t=!0,r=!1,n=!0,i=!1;for(let o=0;o<e.length;++o)switch(e.codePointAt(o)){case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 11:case 12:case 14:case 15:return!1;case 13:return!1;case 10:if(t&&!i)return!1;i=!0,t=!0,r=!1;break;case 9:case 32:r||(r=t);break;default:n&&(n=r),t=!1}return!(t||n&&i)}function P8(e,t){let r=e.replace(/"""/g,'\\"""'),n=r.split(/\r\n|[\n\r]/g),i=n.length===1,o=n.length>1&&n.slice(1).every(d=>d.length===0||(0,aT.isWhiteSpace)(d.charCodeAt(0))),a=r.endsWith('\\"""'),s=e.endsWith('"')&&!a,u=e.endsWith("\\"),l=s||u,c=!(t!=null&&t.minimize)&&(!i||e.length>70||l||o||a),f="",p=i&&(0,aT.isWhiteSpace)(e.charCodeAt(0));return(c&&!p||o)&&(f+=`
`),f+=r,(c||l)&&(f+=`
`),'"""'+f+'"""'}});var yc=y(vc=>{"use strict";Object.defineProperty(vc,"__esModule",{value:!0});vc.TokenKind=void 0;var sT;vc.TokenKind=sT;(function(e){e.SOF="<SOF>",e.EOF="<EOF>",e.BANG="!",e.DOLLAR="$",e.AMP="&",e.PAREN_L="(",e.PAREN_R=")",e.SPREAD="...",e.COLON=":",e.EQUALS="=",e.AT="@",e.BRACKET_L="[",e.BRACKET_R="]",e.BRACE_L="{",e.PIPE="|",e.BRACE_R="}",e.NAME="Name",e.INT="Int",e.FLOAT="Float",e.STRING="String",e.BLOCK_STRING="BlockString",e.COMMENT="Comment"})(sT||(vc.TokenKind=sT={}))});var Qh=y(Ec=>{"use strict";Object.defineProperty(Ec,"__esModule",{value:!0});Ec.Lexer=void 0;Ec.isPunctuatorTokenKind=C8;var _n=Vh(),rC=Jn(),x8=mc(),Ta=Gh(),Z=yc(),lT=class{constructor(t){let r=new rC.Token(Z.TokenKind.SOF,0,0,0,0);this.source=t,this.lastToken=r,this.token=r,this.line=1,this.lineStart=0}get[Symbol.toStringTag](){return"Lexer"}advance(){return this.lastToken=this.token,this.token=this.lookahead()}lookahead(){let t=this.token;if(t.kind!==Z.TokenKind.EOF)do if(t.next)t=t.next;else{let r=k8(this,t.end);t.next=r,r.prev=t,t=r}while(t.kind===Z.TokenKind.COMMENT);return t}};Ec.Lexer=lT;function C8(e){return e===Z.TokenKind.BANG||e===Z.TokenKind.DOLLAR||e===Z.TokenKind.AMP||e===Z.TokenKind.PAREN_L||e===Z.TokenKind.PAREN_R||e===Z.TokenKind.SPREAD||e===Z.TokenKind.COLON||e===Z.TokenKind.EQUALS||e===Z.TokenKind.AT||e===Z.TokenKind.BRACKET_L||e===Z.TokenKind.BRACKET_R||e===Z.TokenKind.BRACE_L||e===Z.TokenKind.PIPE||e===Z.TokenKind.BRACE_R}function Js(e){return e>=0&&e<=55295||e>=57344&&e<=1114111}function $h(e,t){return nC(e.charCodeAt(t))&&iC(e.charCodeAt(t+1))}function nC(e){return e>=55296&&e<=56319}function iC(e){return e>=56320&&e<=57343}function _a(e,t){let r=e.source.body.codePointAt(t);if(r===void 0)return Z.TokenKind.EOF;if(r>=32&&r<=126){let n=String.fromCodePoint(r);return n==='"'?`'"'`:`"${n}"`}return"U+"+r.toString(16).toUpperCase().padStart(4,"0")}function it(e,t,r,n,i){let o=e.line,a=1+r-e.lineStart;return new rC.Token(t,r,n,o,a,i)}function k8(e,t){let r=e.source.body,n=r.length,i=t;for(;i<n;){let o=r.charCodeAt(i);switch(o){case 65279:case 9:case 32:case 44:++i;continue;case 10:++i,++e.line,e.lineStart=i;continue;case 13:r.charCodeAt(i+1)===10?i+=2:++i,++e.line,e.lineStart=i;continue;case 35:return D8(e,i);case 33:return it(e,Z.TokenKind.BANG,i,i+1);case 36:return it(e,Z.TokenKind.DOLLAR,i,i+1);case 38:return it(e,Z.TokenKind.AMP,i,i+1);case 40:return it(e,Z.TokenKind.PAREN_L,i,i+1);case 41:return it(e,Z.TokenKind.PAREN_R,i,i+1);case 46:if(r.charCodeAt(i+1)===46&&r.charCodeAt(i+2)===46)return it(e,Z.TokenKind.SPREAD,i,i+3);break;case 58:return it(e,Z.TokenKind.COLON,i,i+1);case 61:return it(e,Z.TokenKind.EQUALS,i,i+1);case 64:return it(e,Z.TokenKind.AT,i,i+1);case 91:return it(e,Z.TokenKind.BRACKET_L,i,i+1);case 93:return it(e,Z.TokenKind.BRACKET_R,i,i+1);case 123:return it(e,Z.TokenKind.BRACE_L,i,i+1);case 124:return it(e,Z.TokenKind.PIPE,i,i+1);case 125:return it(e,Z.TokenKind.BRACE_R,i,i+1);case 34:return r.charCodeAt(i+1)===34&&r.charCodeAt(i+2)===34?U8(e,i):j8(e,i)}if((0,Ta.isDigit)(o)||o===45)return A8(e,i,o);if((0,Ta.isNameStart)(o))return V8(e,i);throw(0,_n.syntaxError)(e.source,i,o===39?`Unexpected single quote character ('), did you mean to use a double quote (")?`:Js(o)||$h(r,i)?`Unexpected character: ${_a(e,i)}.`:`Invalid character: ${_a(e,i)}.`)}return it(e,Z.TokenKind.EOF,n,n)}function D8(e,t){let r=e.source.body,n=r.length,i=t+1;for(;i<n;){let o=r.charCodeAt(i);if(o===10||o===13)break;if(Js(o))++i;else if($h(r,i))i+=2;else break}return it(e,Z.TokenKind.COMMENT,t,i,r.slice(t+1,i))}function A8(e,t,r){let n=e.source.body,i=t,o=r,a=!1;if(o===45&&(o=n.charCodeAt(++i)),o===48){if(o=n.charCodeAt(++i),(0,Ta.isDigit)(o))throw(0,_n.syntaxError)(e.source,i,`Invalid number, unexpected digit after 0: ${_a(e,i)}.`)}else i=uT(e,i,o),o=n.charCodeAt(i);if(o===46&&(a=!0,o=n.charCodeAt(++i),i=uT(e,i,o),o=n.charCodeAt(i)),(o===69||o===101)&&(a=!0,o=n.charCodeAt(++i),(o===43||o===45)&&(o=n.charCodeAt(++i)),i=uT(e,i,o),o=n.charCodeAt(i)),o===46||(0,Ta.isNameStart)(o))throw(0,_n.syntaxError)(e.source,i,`Invalid number, expected digit but got: ${_a(e,i)}.`);return it(e,a?Z.TokenKind.FLOAT:Z.TokenKind.INT,t,i,n.slice(t,i))}function uT(e,t,r){if(!(0,Ta.isDigit)(r))throw(0,_n.syntaxError)(e.source,t,`Invalid number, expected digit but got: ${_a(e,t)}.`);let n=e.source.body,i=t+1;for(;(0,Ta.isDigit)(n.charCodeAt(i));)++i;return i}function j8(e,t){let r=e.source.body,n=r.length,i=t+1,o=i,a="";for(;i<n;){let s=r.charCodeAt(i);if(s===34)return a+=r.slice(o,i),it(e,Z.TokenKind.STRING,t,i+1,a);if(s===92){a+=r.slice(o,i);let u=r.charCodeAt(i+1)===117?r.charCodeAt(i+2)===123?F8(e,i):M8(e,i):q8(e,i);a+=u.value,i+=u.size,o=i;continue}if(s===10||s===13)break;if(Js(s))++i;else if($h(r,i))i+=2;else throw(0,_n.syntaxError)(e.source,i,`Invalid character within String: ${_a(e,i)}.`)}throw(0,_n.syntaxError)(e.source,i,"Unterminated string.")}function F8(e,t){let r=e.source.body,n=0,i=3;for(;i<12;){let o=r.charCodeAt(t+i++);if(o===125){if(i<5||!Js(n))break;return{value:String.fromCodePoint(n),size:i}}if(n=n<<4|gc(o),n<0)break}throw(0,_n.syntaxError)(e.source,t,`Invalid Unicode escape sequence: "${r.slice(t,t+i)}".`)}function M8(e,t){let r=e.source.body,n=tC(r,t+2);if(Js(n))return{value:String.fromCodePoint(n),size:6};if(nC(n)&&r.charCodeAt(t+6)===92&&r.charCodeAt(t+7)===117){let i=tC(r,t+8);if(iC(i))return{value:String.fromCodePoint(n,i),size:12}}throw(0,_n.syntaxError)(e.source,t,`Invalid Unicode escape sequence: "${r.slice(t,t+6)}".`)}function tC(e,t){return gc(e.charCodeAt(t))<<12|gc(e.charCodeAt(t+1))<<8|gc(e.charCodeAt(t+2))<<4|gc(e.charCodeAt(t+3))}function gc(e){return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:-1}function q8(e,t){let r=e.source.body;switch(r.charCodeAt(t+1)){case 34:return{value:'"',size:2};case 92:return{value:"\\",size:2};case 47:return{value:"/",size:2};case 98:return{value:"\b",size:2};case 102:return{value:"\f",size:2};case 110:return{value:`
`,size:2};case 114:return{value:"\r",size:2};case 116:return{value:"	",size:2}}throw(0,_n.syntaxError)(e.source,t,`Invalid character escape sequence: "${r.slice(t,t+2)}".`)}function U8(e,t){let r=e.source.body,n=r.length,i=e.lineStart,o=t+3,a=o,s="",u=[];for(;o<n;){let l=r.charCodeAt(o);if(l===34&&r.charCodeAt(o+1)===34&&r.charCodeAt(o+2)===34){s+=r.slice(a,o),u.push(s);let c=it(e,Z.TokenKind.BLOCK_STRING,t,o+3,(0,x8.dedentBlockStringLines)(u).join(`
`));return e.line+=u.length-1,e.lineStart=i,c}if(l===92&&r.charCodeAt(o+1)===34&&r.charCodeAt(o+2)===34&&r.charCodeAt(o+3)===34){s+=r.slice(a,o),a=o+1,o+=4;continue}if(l===10||l===13){s+=r.slice(a,o),u.push(s),l===13&&r.charCodeAt(o+1)===10?o+=2:++o,s="",a=o,i=o;continue}if(Js(l))++o;else if($h(r,o))o+=2;else throw(0,_n.syntaxError)(e.source,o,`Invalid character within String: ${_a(e,o)}.`)}throw(0,_n.syntaxError)(e.source,o,"Unterminated string.")}function V8(e,t){let r=e.source.body,n=r.length,i=t+1;for(;i<n;){let o=r.charCodeAt(i);if((0,Ta.isNameContinue)(o))++i;else break}return it(e,Z.TokenKind.NAME,t,i,r.slice(t,i))}});var ye=y(cT=>{"use strict";Object.defineProperty(cT,"__esModule",{value:!0});cT.inspect=$8;var G8=10,oC=2;function $8(e){return Kh(e,[])}function Kh(e,t){switch(typeof e){case"string":return JSON.stringify(e);case"function":return e.name?`[function ${e.name}]`:"[function]";case"object":return Q8(e,t);default:return String(e)}}function Q8(e,t){if(e===null)return"null";if(t.includes(e))return"[Circular]";let r=[...t,e];if(K8(e)){let n=e.toJSON();if(n!==e)return typeof n=="string"?n:Kh(n,r)}else if(Array.isArray(e))return H8(e,r);return B8(e,r)}function K8(e){return typeof e.toJSON=="function"}function B8(e,t){let r=Object.entries(e);if(r.length===0)return"{}";if(t.length>oC)return"["+z8(e)+"]";let n=r.map(([i,o])=>i+": "+Kh(o,t));return"{ "+n.join(", ")+" }"}function H8(e,t){if(e.length===0)return"[]";if(t.length>oC)return"[Array]";let r=Math.min(G8,e.length),n=e.length-r,i=[];for(let o=0;o<r;++o)i.push(Kh(e[o],t));return n===1?i.push("... 1 more item"):n>1&&i.push(`... ${n} more items`),"["+i.join(", ")+"]"}function z8(e){let t=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if(t==="Object"&&typeof e.constructor=="function"){let r=e.constructor.name;if(typeof r=="string"&&r!=="")return r}return t}});var Tc=y(Bh=>{"use strict";Object.defineProperty(Bh,"__esModule",{value:!0});Bh.instanceOf=void 0;var Ine=ye(),W8=function(t,r){return t instanceof r};Bh.instanceOf=W8});var zh=y(_c=>{"use strict";Object.defineProperty(_c,"__esModule",{value:!0});_c.Source=void 0;_c.isSource=J8;var fT=Zt(),Y8=ye(),X8=Tc(),Hh=class{constructor(t,r="GraphQL request",n={line:1,column:1}){typeof t=="string"||(0,fT.devAssert)(!1,`Body must be a string. Received: ${(0,Y8.inspect)(t)}.`),this.body=t,this.name=r,this.locationOffset=n,this.locationOffset.line>0||(0,fT.devAssert)(!1,"line in locationOffset is 1-indexed and must be positive."),this.locationOffset.column>0||(0,fT.devAssert)(!1,"column in locationOffset is 1-indexed and must be positive.")}get[Symbol.toStringTag](){return"Source"}};_c.Source=Hh;function J8(e){return(0,X8.instanceOf)(e,Hh)}});var eu=y(Oo=>{"use strict";Object.defineProperty(Oo,"__esModule",{value:!0});Oo.Parser=void 0;Oo.parse=e4;Oo.parseConstValue=r4;Oo.parseType=n4;Oo.parseValue=t4;var Zs=Vh(),bc=Jn(),Z8=Xs(),H=le(),sC=Qh(),aC=zh(),k=yc();function e4(e,t){return new ba(e,t).parseDocument()}function t4(e,t){let r=new ba(e,t);r.expectToken(k.TokenKind.SOF);let n=r.parseValueLiteral(!1);return r.expectToken(k.TokenKind.EOF),n}function r4(e,t){let r=new ba(e,t);r.expectToken(k.TokenKind.SOF);let n=r.parseConstValueLiteral();return r.expectToken(k.TokenKind.EOF),n}function n4(e,t){let r=new ba(e,t);r.expectToken(k.TokenKind.SOF);let n=r.parseTypeReference();return r.expectToken(k.TokenKind.EOF),n}var ba=class{constructor(t,r){let n=(0,aC.isSource)(t)?t:new aC.Source(t);this._lexer=new sC.Lexer(n),this._options=r}parseName(){let t=this.expectToken(k.TokenKind.NAME);return this.node(t,{kind:H.Kind.NAME,value:t.value})}parseDocument(){return this.node(this._lexer.token,{kind:H.Kind.DOCUMENT,definitions:this.many(k.TokenKind.SOF,this.parseDefinition,k.TokenKind.EOF)})}parseDefinition(){if(this.peek(k.TokenKind.BRACE_L))return this.parseOperationDefinition();let t=this.peekDescription(),r=t?this._lexer.lookahead():this._lexer.token;if(r.kind===k.TokenKind.NAME){switch(r.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}if(t)throw(0,Zs.syntaxError)(this._lexer.source,this._lexer.token.start,"Unexpected description, descriptions are supported only on type definitions.");switch(r.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"extend":return this.parseTypeSystemExtension()}}throw this.unexpected(r)}parseOperationDefinition(){let t=this._lexer.token;if(this.peek(k.TokenKind.BRACE_L))return this.node(t,{kind:H.Kind.OPERATION_DEFINITION,operation:bc.OperationTypeNode.QUERY,name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet()});let r=this.parseOperationType(),n;return this.peek(k.TokenKind.NAME)&&(n=this.parseName()),this.node(t,{kind:H.Kind.OPERATION_DEFINITION,operation:r,name:n,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseOperationType(){let t=this.expectToken(k.TokenKind.NAME);switch(t.value){case"query":return bc.OperationTypeNode.QUERY;case"mutation":return bc.OperationTypeNode.MUTATION;case"subscription":return bc.OperationTypeNode.SUBSCRIPTION}throw this.unexpected(t)}parseVariableDefinitions(){return this.optionalMany(k.TokenKind.PAREN_L,this.parseVariableDefinition,k.TokenKind.PAREN_R)}parseVariableDefinition(){return this.node(this._lexer.token,{kind:H.Kind.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(k.TokenKind.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(k.TokenKind.EQUALS)?this.parseConstValueLiteral():void 0,directives:this.parseConstDirectives()})}parseVariable(){let t=this._lexer.token;return this.expectToken(k.TokenKind.DOLLAR),this.node(t,{kind:H.Kind.VARIABLE,name:this.parseName()})}parseSelectionSet(){return this.node(this._lexer.token,{kind:H.Kind.SELECTION_SET,selections:this.many(k.TokenKind.BRACE_L,this.parseSelection,k.TokenKind.BRACE_R)})}parseSelection(){return this.peek(k.TokenKind.SPREAD)?this.parseFragment():this.parseField()}parseField(){let t=this._lexer.token,r=this.parseName(),n,i;return this.expectOptionalToken(k.TokenKind.COLON)?(n=r,i=this.parseName()):i=r,this.node(t,{kind:H.Kind.FIELD,alias:n,name:i,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(k.TokenKind.BRACE_L)?this.parseSelectionSet():void 0})}parseArguments(t){let r=t?this.parseConstArgument:this.parseArgument;return this.optionalMany(k.TokenKind.PAREN_L,r,k.TokenKind.PAREN_R)}parseArgument(t=!1){let r=this._lexer.token,n=this.parseName();return this.expectToken(k.TokenKind.COLON),this.node(r,{kind:H.Kind.ARGUMENT,name:n,value:this.parseValueLiteral(t)})}parseConstArgument(){return this.parseArgument(!0)}parseFragment(){let t=this._lexer.token;this.expectToken(k.TokenKind.SPREAD);let r=this.expectOptionalKeyword("on");return!r&&this.peek(k.TokenKind.NAME)?this.node(t,{kind:H.Kind.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1)}):this.node(t,{kind:H.Kind.INLINE_FRAGMENT,typeCondition:r?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentDefinition(){var t;let r=this._lexer.token;return this.expectKeyword("fragment"),((t=this._options)===null||t===void 0?void 0:t.allowLegacyFragmentVariables)===!0?this.node(r,{kind:H.Kind.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()}):this.node(r,{kind:H.Kind.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentName(){if(this._lexer.token.value==="on")throw this.unexpected();return this.parseName()}parseValueLiteral(t){let r=this._lexer.token;switch(r.kind){case k.TokenKind.BRACKET_L:return this.parseList(t);case k.TokenKind.BRACE_L:return this.parseObject(t);case k.TokenKind.INT:return this._lexer.advance(),this.node(r,{kind:H.Kind.INT,value:r.value});case k.TokenKind.FLOAT:return this._lexer.advance(),this.node(r,{kind:H.Kind.FLOAT,value:r.value});case k.TokenKind.STRING:case k.TokenKind.BLOCK_STRING:return this.parseStringLiteral();case k.TokenKind.NAME:switch(this._lexer.advance(),r.value){case"true":return this.node(r,{kind:H.Kind.BOOLEAN,value:!0});case"false":return this.node(r,{kind:H.Kind.BOOLEAN,value:!1});case"null":return this.node(r,{kind:H.Kind.NULL});default:return this.node(r,{kind:H.Kind.ENUM,value:r.value})}case k.TokenKind.DOLLAR:if(t)if(this.expectToken(k.TokenKind.DOLLAR),this._lexer.token.kind===k.TokenKind.NAME){let n=this._lexer.token.value;throw(0,Zs.syntaxError)(this._lexer.source,r.start,`Unexpected variable "$${n}" in constant value.`)}else throw this.unexpected(r);return this.parseVariable();default:throw this.unexpected()}}parseConstValueLiteral(){return this.parseValueLiteral(!0)}parseStringLiteral(){let t=this._lexer.token;return this._lexer.advance(),this.node(t,{kind:H.Kind.STRING,value:t.value,block:t.kind===k.TokenKind.BLOCK_STRING})}parseList(t){let r=()=>this.parseValueLiteral(t);return this.node(this._lexer.token,{kind:H.Kind.LIST,values:this.any(k.TokenKind.BRACKET_L,r,k.TokenKind.BRACKET_R)})}parseObject(t){let r=()=>this.parseObjectField(t);return this.node(this._lexer.token,{kind:H.Kind.OBJECT,fields:this.any(k.TokenKind.BRACE_L,r,k.TokenKind.BRACE_R)})}parseObjectField(t){let r=this._lexer.token,n=this.parseName();return this.expectToken(k.TokenKind.COLON),this.node(r,{kind:H.Kind.OBJECT_FIELD,name:n,value:this.parseValueLiteral(t)})}parseDirectives(t){let r=[];for(;this.peek(k.TokenKind.AT);)r.push(this.parseDirective(t));return r}parseConstDirectives(){return this.parseDirectives(!0)}parseDirective(t){let r=this._lexer.token;return this.expectToken(k.TokenKind.AT),this.node(r,{kind:H.Kind.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(t)})}parseTypeReference(){let t=this._lexer.token,r;if(this.expectOptionalToken(k.TokenKind.BRACKET_L)){let n=this.parseTypeReference();this.expectToken(k.TokenKind.BRACKET_R),r=this.node(t,{kind:H.Kind.LIST_TYPE,type:n})}else r=this.parseNamedType();return this.expectOptionalToken(k.TokenKind.BANG)?this.node(t,{kind:H.Kind.NON_NULL_TYPE,type:r}):r}parseNamedType(){return this.node(this._lexer.token,{kind:H.Kind.NAMED_TYPE,name:this.parseName()})}peekDescription(){return this.peek(k.TokenKind.STRING)||this.peek(k.TokenKind.BLOCK_STRING)}parseDescription(){if(this.peekDescription())return this.parseStringLiteral()}parseSchemaDefinition(){let t=this._lexer.token,r=this.parseDescription();this.expectKeyword("schema");let n=this.parseConstDirectives(),i=this.many(k.TokenKind.BRACE_L,this.parseOperationTypeDefinition,k.TokenKind.BRACE_R);return this.node(t,{kind:H.Kind.SCHEMA_DEFINITION,description:r,directives:n,operationTypes:i})}parseOperationTypeDefinition(){let t=this._lexer.token,r=this.parseOperationType();this.expectToken(k.TokenKind.COLON);let n=this.parseNamedType();return this.node(t,{kind:H.Kind.OPERATION_TYPE_DEFINITION,operation:r,type:n})}parseScalarTypeDefinition(){let t=this._lexer.token,r=this.parseDescription();this.expectKeyword("scalar");let n=this.parseName(),i=this.parseConstDirectives();return this.node(t,{kind:H.Kind.SCALAR_TYPE_DEFINITION,description:r,name:n,directives:i})}parseObjectTypeDefinition(){let t=this._lexer.token,r=this.parseDescription();this.expectKeyword("type");let n=this.parseName(),i=this.parseImplementsInterfaces(),o=this.parseConstDirectives(),a=this.parseFieldsDefinition();return this.node(t,{kind:H.Kind.OBJECT_TYPE_DEFINITION,description:r,name:n,interfaces:i,directives:o,fields:a})}parseImplementsInterfaces(){return this.expectOptionalKeyword("implements")?this.delimitedMany(k.TokenKind.AMP,this.parseNamedType):[]}parseFieldsDefinition(){return this.optionalMany(k.TokenKind.BRACE_L,this.parseFieldDefinition,k.TokenKind.BRACE_R)}parseFieldDefinition(){let t=this._lexer.token,r=this.parseDescription(),n=this.parseName(),i=this.parseArgumentDefs();this.expectToken(k.TokenKind.COLON);let o=this.parseTypeReference(),a=this.parseConstDirectives();return this.node(t,{kind:H.Kind.FIELD_DEFINITION,description:r,name:n,arguments:i,type:o,directives:a})}parseArgumentDefs(){return this.optionalMany(k.TokenKind.PAREN_L,this.parseInputValueDef,k.TokenKind.PAREN_R)}parseInputValueDef(){let t=this._lexer.token,r=this.parseDescription(),n=this.parseName();this.expectToken(k.TokenKind.COLON);let i=this.parseTypeReference(),o;this.expectOptionalToken(k.TokenKind.EQUALS)&&(o=this.parseConstValueLiteral());let a=this.parseConstDirectives();return this.node(t,{kind:H.Kind.INPUT_VALUE_DEFINITION,description:r,name:n,type:i,defaultValue:o,directives:a})}parseInterfaceTypeDefinition(){let t=this._lexer.token,r=this.parseDescription();this.expectKeyword("interface");let n=this.parseName(),i=this.parseImplementsInterfaces(),o=this.parseConstDirectives(),a=this.parseFieldsDefinition();return this.node(t,{kind:H.Kind.INTERFACE_TYPE_DEFINITION,description:r,name:n,interfaces:i,directives:o,fields:a})}parseUnionTypeDefinition(){let t=this._lexer.token,r=this.parseDescription();this.expectKeyword("union");let n=this.parseName(),i=this.parseConstDirectives(),o=this.parseUnionMemberTypes();return this.node(t,{kind:H.Kind.UNION_TYPE_DEFINITION,description:r,name:n,directives:i,types:o})}parseUnionMemberTypes(){return this.expectOptionalToken(k.TokenKind.EQUALS)?this.delimitedMany(k.TokenKind.PIPE,this.parseNamedType):[]}parseEnumTypeDefinition(){let t=this._lexer.token,r=this.parseDescription();this.expectKeyword("enum");let n=this.parseName(),i=this.parseConstDirectives(),o=this.parseEnumValuesDefinition();return this.node(t,{kind:H.Kind.ENUM_TYPE_DEFINITION,description:r,name:n,directives:i,values:o})}parseEnumValuesDefinition(){return this.optionalMany(k.TokenKind.BRACE_L,this.parseEnumValueDefinition,k.TokenKind.BRACE_R)}parseEnumValueDefinition(){let t=this._lexer.token,r=this.parseDescription(),n=this.parseEnumValueName(),i=this.parseConstDirectives();return this.node(t,{kind:H.Kind.ENUM_VALUE_DEFINITION,description:r,name:n,directives:i})}parseEnumValueName(){if(this._lexer.token.value==="true"||this._lexer.token.value==="false"||this._lexer.token.value==="null")throw(0,Zs.syntaxError)(this._lexer.source,this._lexer.token.start,`${Wh(this._lexer.token)} is reserved and cannot be used for an enum value.`);return this.parseName()}parseInputObjectTypeDefinition(){let t=this._lexer.token,r=this.parseDescription();this.expectKeyword("input");let n=this.parseName(),i=this.parseConstDirectives(),o=this.parseInputFieldsDefinition();return this.node(t,{kind:H.Kind.INPUT_OBJECT_TYPE_DEFINITION,description:r,name:n,directives:i,fields:o})}parseInputFieldsDefinition(){return this.optionalMany(k.TokenKind.BRACE_L,this.parseInputValueDef,k.TokenKind.BRACE_R)}parseTypeSystemExtension(){let t=this._lexer.lookahead();if(t.kind===k.TokenKind.NAME)switch(t.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(t)}parseSchemaExtension(){let t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");let r=this.parseConstDirectives(),n=this.optionalMany(k.TokenKind.BRACE_L,this.parseOperationTypeDefinition,k.TokenKind.BRACE_R);if(r.length===0&&n.length===0)throw this.unexpected();return this.node(t,{kind:H.Kind.SCHEMA_EXTENSION,directives:r,operationTypes:n})}parseScalarTypeExtension(){let t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");let r=this.parseName(),n=this.parseConstDirectives();if(n.length===0)throw this.unexpected();return this.node(t,{kind:H.Kind.SCALAR_TYPE_EXTENSION,name:r,directives:n})}parseObjectTypeExtension(){let t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");let r=this.parseName(),n=this.parseImplementsInterfaces(),i=this.parseConstDirectives(),o=this.parseFieldsDefinition();if(n.length===0&&i.length===0&&o.length===0)throw this.unexpected();return this.node(t,{kind:H.Kind.OBJECT_TYPE_EXTENSION,name:r,interfaces:n,directives:i,fields:o})}parseInterfaceTypeExtension(){let t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");let r=this.parseName(),n=this.parseImplementsInterfaces(),i=this.parseConstDirectives(),o=this.parseFieldsDefinition();if(n.length===0&&i.length===0&&o.length===0)throw this.unexpected();return this.node(t,{kind:H.Kind.INTERFACE_TYPE_EXTENSION,name:r,interfaces:n,directives:i,fields:o})}parseUnionTypeExtension(){let t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");let r=this.parseName(),n=this.parseConstDirectives(),i=this.parseUnionMemberTypes();if(n.length===0&&i.length===0)throw this.unexpected();return this.node(t,{kind:H.Kind.UNION_TYPE_EXTENSION,name:r,directives:n,types:i})}parseEnumTypeExtension(){let t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");let r=this.parseName(),n=this.parseConstDirectives(),i=this.parseEnumValuesDefinition();if(n.length===0&&i.length===0)throw this.unexpected();return this.node(t,{kind:H.Kind.ENUM_TYPE_EXTENSION,name:r,directives:n,values:i})}parseInputObjectTypeExtension(){let t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");let r=this.parseName(),n=this.parseConstDirectives(),i=this.parseInputFieldsDefinition();if(n.length===0&&i.length===0)throw this.unexpected();return this.node(t,{kind:H.Kind.INPUT_OBJECT_TYPE_EXTENSION,name:r,directives:n,fields:i})}parseDirectiveDefinition(){let t=this._lexer.token,r=this.parseDescription();this.expectKeyword("directive"),this.expectToken(k.TokenKind.AT);let n=this.parseName(),i=this.parseArgumentDefs(),o=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");let a=this.parseDirectiveLocations();return this.node(t,{kind:H.Kind.DIRECTIVE_DEFINITION,description:r,name:n,arguments:i,repeatable:o,locations:a})}parseDirectiveLocations(){return this.delimitedMany(k.TokenKind.PIPE,this.parseDirectiveLocation)}parseDirectiveLocation(){let t=this._lexer.token,r=this.parseName();if(Object.prototype.hasOwnProperty.call(Z8.DirectiveLocation,r.value))return r;throw this.unexpected(t)}node(t,r){var n;return((n=this._options)===null||n===void 0?void 0:n.noLocation)!==!0&&(r.loc=new bc.Location(t,this._lexer.lastToken,this._lexer.source)),r}peek(t){return this._lexer.token.kind===t}expectToken(t){let r=this._lexer.token;if(r.kind===t)return this._lexer.advance(),r;throw(0,Zs.syntaxError)(this._lexer.source,r.start,`Expected ${uC(t)}, found ${Wh(r)}.`)}expectOptionalToken(t){return this._lexer.token.kind===t?(this._lexer.advance(),!0):!1}expectKeyword(t){let r=this._lexer.token;if(r.kind===k.TokenKind.NAME&&r.value===t)this._lexer.advance();else throw(0,Zs.syntaxError)(this._lexer.source,r.start,`Expected "${t}", found ${Wh(r)}.`)}expectOptionalKeyword(t){let r=this._lexer.token;return r.kind===k.TokenKind.NAME&&r.value===t?(this._lexer.advance(),!0):!1}unexpected(t){let r=t??this._lexer.token;return(0,Zs.syntaxError)(this._lexer.source,r.start,`Unexpected ${Wh(r)}.`)}any(t,r,n){this.expectToken(t);let i=[];for(;!this.expectOptionalToken(n);)i.push(r.call(this));return i}optionalMany(t,r,n){if(this.expectOptionalToken(t)){let i=[];do i.push(r.call(this));while(!this.expectOptionalToken(n));return i}return[]}many(t,r,n){this.expectToken(t);let i=[];do i.push(r.call(this));while(!this.expectOptionalToken(n));return i}delimitedMany(t,r){this.expectOptionalToken(t);let n=[];do n.push(r.call(this));while(this.expectOptionalToken(t));return n}};Oo.Parser=ba;function Wh(e){let t=e.value;return uC(e.kind)+(t!=null?` "${t}"`:"")}function uC(e){return(0,sC.isPunctuatorTokenKind)(e)?`"${e}"`:e}});var No=y(pT=>{"use strict";Object.defineProperty(pT,"__esModule",{value:!0});pT.didYouMean=o4;var i4=5;function o4(e,t){let[r,n]=t?[e,t]:[void 0,e],i=" Did you mean ";r&&(i+=r+" ");let o=n.map(u=>`"${u}"`);switch(o.length){case 0:return"";case 1:return i+o[0]+"?";case 2:return i+o[0]+" or "+o[1]+"?"}let a=o.slice(0,i4),s=a.pop();return i+a.join(", ")+", or "+s+"?"}});var lC=y(dT=>{"use strict";Object.defineProperty(dT,"__esModule",{value:!0});dT.identityFunc=a4;function a4(e){return e}});var Io=y(hT=>{"use strict";Object.defineProperty(hT,"__esModule",{value:!0});hT.keyMap=s4;function s4(e,t){let r=Object.create(null);for(let n of e)r[t(n)]=n;return r}});var Sc=y(mT=>{"use strict";Object.defineProperty(mT,"__esModule",{value:!0});mT.keyValMap=u4;function u4(e,t,r){let n=Object.create(null);for(let i of e)n[t(i)]=r(i);return n}});var yT=y(vT=>{"use strict";Object.defineProperty(vT,"__esModule",{value:!0});vT.mapValue=l4;function l4(e,t){let r=Object.create(null);for(let n of Object.keys(e))r[n]=t(e[n],n);return r}});var wc=y(ET=>{"use strict";Object.defineProperty(ET,"__esModule",{value:!0});ET.naturalCompare=c4;function c4(e,t){let r=0,n=0;for(;r<e.length&&n<t.length;){let i=e.charCodeAt(r),o=t.charCodeAt(n);if(Yh(i)&&Yh(o)){let a=0;do++r,a=a*10+i-gT,i=e.charCodeAt(r);while(Yh(i)&&a>0);let s=0;do++n,s=s*10+o-gT,o=t.charCodeAt(n);while(Yh(o)&&s>0);if(a<s)return-1;if(a>s)return 1}else{if(i<o)return-1;if(i>o)return 1;++r,++n}}return e.length-t.length}var gT=48,f4=57;function Yh(e){return!isNaN(e)&&gT<=e&&e<=f4}});var Ro=y(_T=>{"use strict";Object.defineProperty(_T,"__esModule",{value:!0});_T.suggestionList=d4;var p4=wc();function d4(e,t){let r=Object.create(null),n=new TT(e),i=Math.floor(e.length*.4)+1;for(let o of t){let a=n.measure(o,i);a!==void 0&&(r[o]=a)}return Object.keys(r).sort((o,a)=>{let s=r[o]-r[a];return s!==0?s:(0,p4.naturalCompare)(o,a)})}var TT=class{constructor(t){this._input=t,this._inputLowerCase=t.toLowerCase(),this._inputArray=cC(this._inputLowerCase),this._rows=[new Array(t.length+1).fill(0),new Array(t.length+1).fill(0),new Array(t.length+1).fill(0)]}measure(t,r){if(this._input===t)return 0;let n=t.toLowerCase();if(this._inputLowerCase===n)return 1;let i=cC(n),o=this._inputArray;if(i.length<o.length){let c=i;i=o,o=c}let a=i.length,s=o.length;if(a-s>r)return;let u=this._rows;for(let c=0;c<=s;c++)u[0][c]=c;for(let c=1;c<=a;c++){let f=u[(c-1)%3],p=u[c%3],d=p[0]=c;for(let m=1;m<=s;m++){let E=i[c-1]===o[m-1]?0:1,b=Math.min(f[m]+1,p[m-1]+1,f[m-1]+E);if(c>1&&m>1&&i[c-1]===o[m-2]&&i[c-2]===o[m-1]){let h=u[(c-2)%3][m-2];b=Math.min(b,h+1)}b<d&&(d=b),p[m]=b}if(d>r)return}let l=u[a%3][s];return l<=r?l:void 0}};function cC(e){let t=e.length,r=new Array(t);for(let n=0;n<t;++n)r[n]=e.charCodeAt(n);return r}});var Xh=y(bT=>{"use strict";Object.defineProperty(bT,"__esModule",{value:!0});bT.toObjMap=h4;function h4(e){if(e==null)return Object.create(null);if(Object.getPrototypeOf(e)===null)return e;let t=Object.create(null);for(let[r,n]of Object.entries(e))t[r]=n;return t}});var fC=y(ST=>{"use strict";Object.defineProperty(ST,"__esModule",{value:!0});ST.printString=m4;function m4(e){return`"${e.replace(v4,y4)}"`}var v4=/[\x00-\x1f\x22\x5c\x7f-\x9f]/g;function y4(e){return g4[e.charCodeAt(0)]}var g4=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000B","\\f","\\r","\\u000E","\\u000F","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001A","\\u001B","\\u001C","\\u001D","\\u001E","\\u001F","","",'\\"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\u007F","\\u0080","\\u0081","\\u0082","\\u0083","\\u0084","\\u0085","\\u0086","\\u0087","\\u0088","\\u0089","\\u008A","\\u008B","\\u008C","\\u008D","\\u008E","\\u008F","\\u0090","\\u0091","\\u0092","\\u0093","\\u0094","\\u0095","\\u0096","\\u0097","\\u0098","\\u0099","\\u009A","\\u009B","\\u009C","\\u009D","\\u009E","\\u009F"]});var Sa=y(Lo=>{"use strict";Object.defineProperty(Lo,"__esModule",{value:!0});Lo.BREAK=void 0;Lo.getEnterLeaveForKind=Jh;Lo.getVisitFn=S4;Lo.visit=_4;Lo.visitInParallel=b4;var E4=Zt(),T4=ye(),wT=Jn(),pC=le(),tu=Object.freeze({});Lo.BREAK=tu;function _4(e,t,r=wT.QueryDocumentKeys){let n=new Map;for(let h of Object.values(pC.Kind))n.set(h,Jh(t,h));let i,o=Array.isArray(e),a=[e],s=-1,u=[],l=e,c,f,p=[],d=[];do{s++;let h=s===a.length,v=h&&u.length!==0;if(h){if(c=d.length===0?void 0:p[p.length-1],l=f,f=d.pop(),v)if(o){l=l.slice();let _=0;for(let[N,R]of u){let O=N-_;R===null?(l.splice(O,1),_++):l[O]=R}}else{l=Object.defineProperties({},Object.getOwnPropertyDescriptors(l));for(let[_,N]of u)l[_]=N}s=i.index,a=i.keys,u=i.edits,o=i.inArray,i=i.prev}else if(f){if(c=o?s:a[s],l=f[c],l==null)continue;p.push(c)}let g;if(!Array.isArray(l)){var m,E;(0,wT.isNode)(l)||(0,E4.devAssert)(!1,`Invalid AST Node: ${(0,T4.inspect)(l)}.`);let _=h?(m=n.get(l.kind))===null||m===void 0?void 0:m.leave:(E=n.get(l.kind))===null||E===void 0?void 0:E.enter;if(g=_?.call(t,l,c,f,p,d),g===tu)break;if(g===!1){if(!h){p.pop();continue}}else if(g!==void 0&&(u.push([c,g]),!h))if((0,wT.isNode)(g))l=g;else{p.pop();continue}}if(g===void 0&&v&&u.push([c,l]),h)p.pop();else{var b;i={inArray:o,index:s,keys:a,edits:u,prev:i},o=Array.isArray(l),a=o?l:(b=r[l.kind])!==null&&b!==void 0?b:[],s=-1,u=[],f&&d.push(f),f=l}}while(i!==void 0);return u.length!==0?u[u.length-1][1]:e}function b4(e){let t=new Array(e.length).fill(null),r=Object.create(null);for(let n of Object.values(pC.Kind)){let i=!1,o=new Array(e.length).fill(void 0),a=new Array(e.length).fill(void 0);for(let u=0;u<e.length;++u){let{enter:l,leave:c}=Jh(e[u],n);i||(i=l!=null||c!=null),o[u]=l,a[u]=c}if(!i)continue;let s={enter(...u){let l=u[0];for(let f=0;f<e.length;f++)if(t[f]===null){var c;let p=(c=o[f])===null||c===void 0?void 0:c.apply(e[f],u);if(p===!1)t[f]=l;else if(p===tu)t[f]=tu;else if(p!==void 0)return p}},leave(...u){let l=u[0];for(let f=0;f<e.length;f++)if(t[f]===null){var c;let p=(c=a[f])===null||c===void 0?void 0:c.apply(e[f],u);if(p===tu)t[f]=tu;else if(p!==void 0&&p!==!1)return p}else t[f]===l&&(t[f]=null)}};r[n]=s}return r}function Jh(e,t){let r=e[t];return typeof r=="object"?r:typeof r=="function"?{enter:r,leave:void 0}:{enter:e.enter,leave:e.leave}}function S4(e,t,r){let{enter:n,leave:i}=Jh(e,t);return r?i:n}});var Ar=y(OT=>{"use strict";Object.defineProperty(OT,"__esModule",{value:!0});OT.print=I4;var w4=mc(),O4=fC(),N4=Sa();function I4(e){return(0,N4.visit)(e,L4)}var R4=80,L4={Name:{leave:e=>e.value},Variable:{leave:e=>"$"+e.name},Document:{leave:e=>F(e.definitions,`

`)},OperationDefinition:{leave(e){let t=ne("(",F(e.variableDefinitions,", "),")"),r=F([e.operation,F([e.name,t]),F(e.directives," ")]," ");return(r==="query"?"":r+" ")+e.selectionSet}},VariableDefinition:{leave:({variable:e,type:t,defaultValue:r,directives:n})=>e+": "+t+ne(" = ",r)+ne(" ",F(n," "))},SelectionSet:{leave:({selections:e})=>bn(e)},Field:{leave({alias:e,name:t,arguments:r,directives:n,selectionSet:i}){let o=ne("",e,": ")+t,a=o+ne("(",F(r,", "),")");return a.length>R4&&(a=o+ne(`(
`,Zh(F(r,`
`)),`
)`)),F([a,F(n," "),i]," ")}},Argument:{leave:({name:e,value:t})=>e+": "+t},FragmentSpread:{leave:({name:e,directives:t})=>"..."+e+ne(" ",F(t," "))},InlineFragment:{leave:({typeCondition:e,directives:t,selectionSet:r})=>F(["...",ne("on ",e),F(t," "),r]," ")},FragmentDefinition:{leave:({name:e,typeCondition:t,variableDefinitions:r,directives:n,selectionSet:i})=>`fragment ${e}${ne("(",F(r,", "),")")} on ${t} ${ne("",F(n," ")," ")}`+i},IntValue:{leave:({value:e})=>e},FloatValue:{leave:({value:e})=>e},StringValue:{leave:({value:e,block:t})=>t?(0,w4.printBlockString)(e):(0,O4.printString)(e)},BooleanValue:{leave:({value:e})=>e?"true":"false"},NullValue:{leave:()=>"null"},EnumValue:{leave:({value:e})=>e},ListValue:{leave:({values:e})=>"["+F(e,", ")+"]"},ObjectValue:{leave:({fields:e})=>"{"+F(e,", ")+"}"},ObjectField:{leave:({name:e,value:t})=>e+": "+t},Directive:{leave:({name:e,arguments:t})=>"@"+e+ne("(",F(t,", "),")")},NamedType:{leave:({name:e})=>e},ListType:{leave:({type:e})=>"["+e+"]"},NonNullType:{leave:({type:e})=>e+"!"},SchemaDefinition:{leave:({description:e,directives:t,operationTypes:r})=>ne("",e,`
`)+F(["schema",F(t," "),bn(r)]," ")},OperationTypeDefinition:{leave:({operation:e,type:t})=>e+": "+t},ScalarTypeDefinition:{leave:({description:e,name:t,directives:r})=>ne("",e,`
`)+F(["scalar",t,F(r," ")]," ")},ObjectTypeDefinition:{leave:({description:e,name:t,interfaces:r,directives:n,fields:i})=>ne("",e,`
`)+F(["type",t,ne("implements ",F(r," & ")),F(n," "),bn(i)]," ")},FieldDefinition:{leave:({description:e,name:t,arguments:r,type:n,directives:i})=>ne("",e,`
`)+t+(dC(r)?ne(`(
`,Zh(F(r,`
`)),`
)`):ne("(",F(r,", "),")"))+": "+n+ne(" ",F(i," "))},InputValueDefinition:{leave:({description:e,name:t,type:r,defaultValue:n,directives:i})=>ne("",e,`
`)+F([t+": "+r,ne("= ",n),F(i," ")]," ")},InterfaceTypeDefinition:{leave:({description:e,name:t,interfaces:r,directives:n,fields:i})=>ne("",e,`
`)+F(["interface",t,ne("implements ",F(r," & ")),F(n," "),bn(i)]," ")},UnionTypeDefinition:{leave:({description:e,name:t,directives:r,types:n})=>ne("",e,`
`)+F(["union",t,F(r," "),ne("= ",F(n," | "))]," ")},EnumTypeDefinition:{leave:({description:e,name:t,directives:r,values:n})=>ne("",e,`
`)+F(["enum",t,F(r," "),bn(n)]," ")},EnumValueDefinition:{leave:({description:e,name:t,directives:r})=>ne("",e,`
`)+F([t,F(r," ")]," ")},InputObjectTypeDefinition:{leave:({description:e,name:t,directives:r,fields:n})=>ne("",e,`
`)+F(["input",t,F(r," "),bn(n)]," ")},DirectiveDefinition:{leave:({description:e,name:t,arguments:r,repeatable:n,locations:i})=>ne("",e,`
`)+"directive @"+t+(dC(r)?ne(`(
`,Zh(F(r,`
`)),`
)`):ne("(",F(r,", "),")"))+(n?" repeatable":"")+" on "+F(i," | ")},SchemaExtension:{leave:({directives:e,operationTypes:t})=>F(["extend schema",F(e," "),bn(t)]," ")},ScalarTypeExtension:{leave:({name:e,directives:t})=>F(["extend scalar",e,F(t," ")]," ")},ObjectTypeExtension:{leave:({name:e,interfaces:t,directives:r,fields:n})=>F(["extend type",e,ne("implements ",F(t," & ")),F(r," "),bn(n)]," ")},InterfaceTypeExtension:{leave:({name:e,interfaces:t,directives:r,fields:n})=>F(["extend interface",e,ne("implements ",F(t," & ")),F(r," "),bn(n)]," ")},UnionTypeExtension:{leave:({name:e,directives:t,types:r})=>F(["extend union",e,F(t," "),ne("= ",F(r," | "))]," ")},EnumTypeExtension:{leave:({name:e,directives:t,values:r})=>F(["extend enum",e,F(t," "),bn(r)]," ")},InputObjectTypeExtension:{leave:({name:e,directives:t,fields:r})=>F(["extend input",e,F(t," "),bn(r)]," ")}};function F(e,t=""){var r;return(r=e?.filter(n=>n).join(t))!==null&&r!==void 0?r:""}function bn(e){return ne(`{
`,Zh(F(e,`
`)),`
}`)}function ne(e,t,r=""){return t!=null&&t!==""?e+t+r:""}function Zh(e){return ne("  ",e.replace(/\n/g,`
  `))}function dC(e){var t;return(t=e?.some(r=>r.includes(`
`)))!==null&&t!==void 0?t:!1}});var RT=y(IT=>{"use strict";Object.defineProperty(IT,"__esModule",{value:!0});IT.valueFromASTUntyped=NT;var P4=Sc(),Li=le();function NT(e,t){switch(e.kind){case Li.Kind.NULL:return null;case Li.Kind.INT:return parseInt(e.value,10);case Li.Kind.FLOAT:return parseFloat(e.value);case Li.Kind.STRING:case Li.Kind.ENUM:case Li.Kind.BOOLEAN:return e.value;case Li.Kind.LIST:return e.values.map(r=>NT(r,t));case Li.Kind.OBJECT:return(0,P4.keyValMap)(e.fields,r=>r.name.value,r=>NT(r.value,t));case Li.Kind.VARIABLE:return t?.[e.name.value]}}});var Oc=y(tm=>{"use strict";Object.defineProperty(tm,"__esModule",{value:!0});tm.assertEnumValueName=x4;tm.assertName=vC;var hC=Zt(),em=Q(),mC=Gh();function vC(e){if(e!=null||(0,hC.devAssert)(!1,"Must provide name."),typeof e=="string"||(0,hC.devAssert)(!1,"Expected name to be a string."),e.length===0)throw new em.GraphQLError("Expected name to be a non-empty string.");for(let t=1;t<e.length;++t)if(!(0,mC.isNameContinue)(e.charCodeAt(t)))throw new em.GraphQLError(`Names must only contain [_a-zA-Z0-9] but "${e}" does not.`);if(!(0,mC.isNameStart)(e.charCodeAt(0)))throw new em.GraphQLError(`Names must start with [_a-zA-Z] but "${e}" does not.`);return e}function x4(e){if(e==="true"||e==="false"||e==="null")throw new em.GraphQLError(`Enum values cannot be named: ${e}`);return vC(e)}});var ae=y(G=>{"use strict";Object.defineProperty(G,"__esModule",{value:!0});G.GraphQLUnionType=G.GraphQLScalarType=G.GraphQLObjectType=G.GraphQLNonNull=G.GraphQLList=G.GraphQLInterfaceType=G.GraphQLInputObjectType=G.GraphQLEnumType=void 0;G.argsToArgsConfig=RC;G.assertAbstractType=X4;G.assertCompositeType=Y4;G.assertEnumType=$4;G.assertInputObjectType=Q4;G.assertInputType=H4;G.assertInterfaceType=V4;G.assertLeafType=W4;G.assertListType=K4;G.assertNamedType=tK;G.assertNonNullType=B4;G.assertNullableType=Z4;G.assertObjectType=U4;G.assertOutputType=z4;G.assertScalarType=q4;G.assertType=M4;G.assertUnionType=G4;G.assertWrappingType=J4;G.defineArguments=NC;G.getNamedType=rK;G.getNullableType=eK;G.isAbstractType=bC;G.isCompositeType=_C;G.isEnumType=Ia;G.isInputObjectType=Ic;G.isInputType=LT;G.isInterfaceType=Oa;G.isLeafType=TC;G.isListType=dm;G.isNamedType=SC;G.isNonNullType=xo;G.isNullableType=xT;G.isObjectType=nu;G.isOutputType=PT;G.isRequiredArgument=nK;G.isRequiredInputField=sK;G.isScalarType=wa;G.isType=pm;G.isUnionType=Na;G.isWrappingType=Rc;G.resolveObjMapThunk=kT;G.resolveReadonlyArrayThunk=CT;var mt=Zt(),C4=No(),yC=lC(),Oe=ye(),Po=Tc(),k4=Xn(),D4=Io(),EC=Sc(),fm=yT(),A4=Ro(),Zn=Xh(),Nc=Q(),j4=le(),gC=Ar(),F4=RT(),ei=Oc();function pm(e){return wa(e)||nu(e)||Oa(e)||Na(e)||Ia(e)||Ic(e)||dm(e)||xo(e)}function M4(e){if(!pm(e))throw new Error(`Expected ${(0,Oe.inspect)(e)} to be a GraphQL type.`);return e}function wa(e){return(0,Po.instanceOf)(e,om)}function q4(e){if(!wa(e))throw new Error(`Expected ${(0,Oe.inspect)(e)} to be a GraphQL Scalar type.`);return e}function nu(e){return(0,Po.instanceOf)(e,am)}function U4(e){if(!nu(e))throw new Error(`Expected ${(0,Oe.inspect)(e)} to be a GraphQL Object type.`);return e}function Oa(e){return(0,Po.instanceOf)(e,sm)}function V4(e){if(!Oa(e))throw new Error(`Expected ${(0,Oe.inspect)(e)} to be a GraphQL Interface type.`);return e}function Na(e){return(0,Po.instanceOf)(e,um)}function G4(e){if(!Na(e))throw new Error(`Expected ${(0,Oe.inspect)(e)} to be a GraphQL Union type.`);return e}function Ia(e){return(0,Po.instanceOf)(e,lm)}function $4(e){if(!Ia(e))throw new Error(`Expected ${(0,Oe.inspect)(e)} to be a GraphQL Enum type.`);return e}function Ic(e){return(0,Po.instanceOf)(e,cm)}function Q4(e){if(!Ic(e))throw new Error(`Expected ${(0,Oe.inspect)(e)} to be a GraphQL Input Object type.`);return e}function dm(e){return(0,Po.instanceOf)(e,nm)}function K4(e){if(!dm(e))throw new Error(`Expected ${(0,Oe.inspect)(e)} to be a GraphQL List type.`);return e}function xo(e){return(0,Po.instanceOf)(e,im)}function B4(e){if(!xo(e))throw new Error(`Expected ${(0,Oe.inspect)(e)} to be a GraphQL Non-Null type.`);return e}function LT(e){return wa(e)||Ia(e)||Ic(e)||Rc(e)&&LT(e.ofType)}function H4(e){if(!LT(e))throw new Error(`Expected ${(0,Oe.inspect)(e)} to be a GraphQL input type.`);return e}function PT(e){return wa(e)||nu(e)||Oa(e)||Na(e)||Ia(e)||Rc(e)&&PT(e.ofType)}function z4(e){if(!PT(e))throw new Error(`Expected ${(0,Oe.inspect)(e)} to be a GraphQL output type.`);return e}function TC(e){return wa(e)||Ia(e)}function W4(e){if(!TC(e))throw new Error(`Expected ${(0,Oe.inspect)(e)} to be a GraphQL leaf type.`);return e}function _C(e){return nu(e)||Oa(e)||Na(e)}function Y4(e){if(!_C(e))throw new Error(`Expected ${(0,Oe.inspect)(e)} to be a GraphQL composite type.`);return e}function bC(e){return Oa(e)||Na(e)}function X4(e){if(!bC(e))throw new Error(`Expected ${(0,Oe.inspect)(e)} to be a GraphQL abstract type.`);return e}var nm=class{constructor(t){pm(t)||(0,mt.devAssert)(!1,`Expected ${(0,Oe.inspect)(t)} to be a GraphQL type.`),this.ofType=t}get[Symbol.toStringTag](){return"GraphQLList"}toString(){return"["+String(this.ofType)+"]"}toJSON(){return this.toString()}};G.GraphQLList=nm;var im=class{constructor(t){xT(t)||(0,mt.devAssert)(!1,`Expected ${(0,Oe.inspect)(t)} to be a GraphQL nullable type.`),this.ofType=t}get[Symbol.toStringTag](){return"GraphQLNonNull"}toString(){return String(this.ofType)+"!"}toJSON(){return this.toString()}};G.GraphQLNonNull=im;function Rc(e){return dm(e)||xo(e)}function J4(e){if(!Rc(e))throw new Error(`Expected ${(0,Oe.inspect)(e)} to be a GraphQL wrapping type.`);return e}function xT(e){return pm(e)&&!xo(e)}function Z4(e){if(!xT(e))throw new Error(`Expected ${(0,Oe.inspect)(e)} to be a GraphQL nullable type.`);return e}function eK(e){if(e)return xo(e)?e.ofType:e}function SC(e){return wa(e)||nu(e)||Oa(e)||Na(e)||Ia(e)||Ic(e)}function tK(e){if(!SC(e))throw new Error(`Expected ${(0,Oe.inspect)(e)} to be a GraphQL named type.`);return e}function rK(e){if(e){let t=e;for(;Rc(t);)t=t.ofType;return t}}function CT(e){return typeof e=="function"?e():e}function kT(e){return typeof e=="function"?e():e}var om=class{constructor(t){var r,n,i,o;let a=(r=t.parseValue)!==null&&r!==void 0?r:yC.identityFunc;this.name=(0,ei.assertName)(t.name),this.description=t.description,this.specifiedByURL=t.specifiedByURL,this.serialize=(n=t.serialize)!==null&&n!==void 0?n:yC.identityFunc,this.parseValue=a,this.parseLiteral=(i=t.parseLiteral)!==null&&i!==void 0?i:(s,u)=>a((0,F4.valueFromASTUntyped)(s,u)),this.extensions=(0,Zn.toObjMap)(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(o=t.extensionASTNodes)!==null&&o!==void 0?o:[],t.specifiedByURL==null||typeof t.specifiedByURL=="string"||(0,mt.devAssert)(!1,`${this.name} must provide "specifiedByURL" as a string, but got: ${(0,Oe.inspect)(t.specifiedByURL)}.`),t.serialize==null||typeof t.serialize=="function"||(0,mt.devAssert)(!1,`${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`),t.parseLiteral&&(typeof t.parseValue=="function"&&typeof t.parseLiteral=="function"||(0,mt.devAssert)(!1,`${this.name} must provide both "parseValue" and "parseLiteral" functions.`))}get[Symbol.toStringTag](){return"GraphQLScalarType"}toConfig(){return{name:this.name,description:this.description,specifiedByURL:this.specifiedByURL,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}};G.GraphQLScalarType=om;var am=class{constructor(t){var r;this.name=(0,ei.assertName)(t.name),this.description=t.description,this.isTypeOf=t.isTypeOf,this.extensions=(0,Zn.toObjMap)(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(r=t.extensionASTNodes)!==null&&r!==void 0?r:[],this._fields=()=>OC(t),this._interfaces=()=>wC(t),t.isTypeOf==null||typeof t.isTypeOf=="function"||(0,mt.devAssert)(!1,`${this.name} must provide "isTypeOf" as a function, but got: ${(0,Oe.inspect)(t.isTypeOf)}.`)}get[Symbol.toStringTag](){return"GraphQLObjectType"}getFields(){return typeof this._fields=="function"&&(this._fields=this._fields()),this._fields}getInterfaces(){return typeof this._interfaces=="function"&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:IC(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}};G.GraphQLObjectType=am;function wC(e){var t;let r=CT((t=e.interfaces)!==null&&t!==void 0?t:[]);return Array.isArray(r)||(0,mt.devAssert)(!1,`${e.name} interfaces must be an Array or a function which returns an Array.`),r}function OC(e){let t=kT(e.fields);return ru(t)||(0,mt.devAssert)(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),(0,fm.mapValue)(t,(r,n)=>{var i;ru(r)||(0,mt.devAssert)(!1,`${e.name}.${n} field config must be an object.`),r.resolve==null||typeof r.resolve=="function"||(0,mt.devAssert)(!1,`${e.name}.${n} field resolver must be a function if provided, but got: ${(0,Oe.inspect)(r.resolve)}.`);let o=(i=r.args)!==null&&i!==void 0?i:{};return ru(o)||(0,mt.devAssert)(!1,`${e.name}.${n} args must be an object with argument names as keys.`),{name:(0,ei.assertName)(n),description:r.description,type:r.type,args:NC(o),resolve:r.resolve,subscribe:r.subscribe,deprecationReason:r.deprecationReason,extensions:(0,Zn.toObjMap)(r.extensions),astNode:r.astNode}})}function NC(e){return Object.entries(e).map(([t,r])=>({name:(0,ei.assertName)(t),description:r.description,type:r.type,defaultValue:r.defaultValue,deprecationReason:r.deprecationReason,extensions:(0,Zn.toObjMap)(r.extensions),astNode:r.astNode}))}function ru(e){return(0,k4.isObjectLike)(e)&&!Array.isArray(e)}function IC(e){return(0,fm.mapValue)(e,t=>({description:t.description,type:t.type,args:RC(t.args),resolve:t.resolve,subscribe:t.subscribe,deprecationReason:t.deprecationReason,extensions:t.extensions,astNode:t.astNode}))}function RC(e){return(0,EC.keyValMap)(e,t=>t.name,t=>({description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:t.extensions,astNode:t.astNode}))}function nK(e){return xo(e.type)&&e.defaultValue===void 0}var sm=class{constructor(t){var r;this.name=(0,ei.assertName)(t.name),this.description=t.description,this.resolveType=t.resolveType,this.extensions=(0,Zn.toObjMap)(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(r=t.extensionASTNodes)!==null&&r!==void 0?r:[],this._fields=OC.bind(void 0,t),this._interfaces=wC.bind(void 0,t),t.resolveType==null||typeof t.resolveType=="function"||(0,mt.devAssert)(!1,`${this.name} must provide "resolveType" as a function, but got: ${(0,Oe.inspect)(t.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLInterfaceType"}getFields(){return typeof this._fields=="function"&&(this._fields=this._fields()),this._fields}getInterfaces(){return typeof this._interfaces=="function"&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:IC(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}};G.GraphQLInterfaceType=sm;var um=class{constructor(t){var r;this.name=(0,ei.assertName)(t.name),this.description=t.description,this.resolveType=t.resolveType,this.extensions=(0,Zn.toObjMap)(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(r=t.extensionASTNodes)!==null&&r!==void 0?r:[],this._types=iK.bind(void 0,t),t.resolveType==null||typeof t.resolveType=="function"||(0,mt.devAssert)(!1,`${this.name} must provide "resolveType" as a function, but got: ${(0,Oe.inspect)(t.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLUnionType"}getTypes(){return typeof this._types=="function"&&(this._types=this._types()),this._types}toConfig(){return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}};G.GraphQLUnionType=um;function iK(e){let t=CT(e.types);return Array.isArray(t)||(0,mt.devAssert)(!1,`Must provide Array of types or a function which returns such an array for Union ${e.name}.`),t}var lm=class{constructor(t){var r;this.name=(0,ei.assertName)(t.name),this.description=t.description,this.extensions=(0,Zn.toObjMap)(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(r=t.extensionASTNodes)!==null&&r!==void 0?r:[],this._values=oK(this.name,t.values),this._valueLookup=new Map(this._values.map(n=>[n.value,n])),this._nameLookup=(0,D4.keyMap)(this._values,n=>n.name)}get[Symbol.toStringTag](){return"GraphQLEnumType"}getValues(){return this._values}getValue(t){return this._nameLookup[t]}serialize(t){let r=this._valueLookup.get(t);if(r===void 0)throw new Nc.GraphQLError(`Enum "${this.name}" cannot represent value: ${(0,Oe.inspect)(t)}`);return r.name}parseValue(t){if(typeof t!="string"){let n=(0,Oe.inspect)(t);throw new Nc.GraphQLError(`Enum "${this.name}" cannot represent non-string value: ${n}.`+rm(this,n))}let r=this.getValue(t);if(r==null)throw new Nc.GraphQLError(`Value "${t}" does not exist in "${this.name}" enum.`+rm(this,t));return r.value}parseLiteral(t,r){if(t.kind!==j4.Kind.ENUM){let i=(0,gC.print)(t);throw new Nc.GraphQLError(`Enum "${this.name}" cannot represent non-enum value: ${i}.`+rm(this,i),{nodes:t})}let n=this.getValue(t.value);if(n==null){let i=(0,gC.print)(t);throw new Nc.GraphQLError(`Value "${i}" does not exist in "${this.name}" enum.`+rm(this,i),{nodes:t})}return n.value}toConfig(){let t=(0,EC.keyValMap)(this.getValues(),r=>r.name,r=>({description:r.description,value:r.value,deprecationReason:r.deprecationReason,extensions:r.extensions,astNode:r.astNode}));return{name:this.name,description:this.description,values:t,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}};G.GraphQLEnumType=lm;function rm(e,t){let r=e.getValues().map(i=>i.name),n=(0,A4.suggestionList)(t,r);return(0,C4.didYouMean)("the enum value",n)}function oK(e,t){return ru(t)||(0,mt.devAssert)(!1,`${e} values must be an object with value names as keys.`),Object.entries(t).map(([r,n])=>(ru(n)||(0,mt.devAssert)(!1,`${e}.${r} must refer to an object with a "value" key representing an internal value but got: ${(0,Oe.inspect)(n)}.`),{name:(0,ei.assertEnumValueName)(r),description:n.description,value:n.value!==void 0?n.value:r,deprecationReason:n.deprecationReason,extensions:(0,Zn.toObjMap)(n.extensions),astNode:n.astNode}))}var cm=class{constructor(t){var r;this.name=(0,ei.assertName)(t.name),this.description=t.description,this.extensions=(0,Zn.toObjMap)(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(r=t.extensionASTNodes)!==null&&r!==void 0?r:[],this._fields=aK.bind(void 0,t)}get[Symbol.toStringTag](){return"GraphQLInputObjectType"}getFields(){return typeof this._fields=="function"&&(this._fields=this._fields()),this._fields}toConfig(){let t=(0,fm.mapValue)(this.getFields(),r=>({description:r.description,type:r.type,defaultValue:r.defaultValue,deprecationReason:r.deprecationReason,extensions:r.extensions,astNode:r.astNode}));return{name:this.name,description:this.description,fields:t,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}};G.GraphQLInputObjectType=cm;function aK(e){let t=kT(e.fields);return ru(t)||(0,mt.devAssert)(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),(0,fm.mapValue)(t,(r,n)=>(!("resolve"in r)||(0,mt.devAssert)(!1,`${e.name}.${n} field has a resolve property, but Input Types cannot define resolvers.`),{name:(0,ei.assertName)(n),description:r.description,type:r.type,defaultValue:r.defaultValue,deprecationReason:r.deprecationReason,extensions:(0,Zn.toObjMap)(r.extensions),astNode:r.astNode}))}function sK(e){return xo(e.type)&&e.defaultValue===void 0}});var Pc=y(Lc=>{"use strict";Object.defineProperty(Lc,"__esModule",{value:!0});Lc.doTypesOverlap=uK;Lc.isEqualType=DT;Lc.isTypeSubTypeOf=hm;var Ft=ae();function DT(e,t){return e===t?!0:(0,Ft.isNonNullType)(e)&&(0,Ft.isNonNullType)(t)||(0,Ft.isListType)(e)&&(0,Ft.isListType)(t)?DT(e.ofType,t.ofType):!1}function hm(e,t,r){return t===r?!0:(0,Ft.isNonNullType)(r)?(0,Ft.isNonNullType)(t)?hm(e,t.ofType,r.ofType):!1:(0,Ft.isNonNullType)(t)?hm(e,t.ofType,r):(0,Ft.isListType)(r)?(0,Ft.isListType)(t)?hm(e,t.ofType,r.ofType):!1:(0,Ft.isListType)(t)?!1:(0,Ft.isAbstractType)(r)&&((0,Ft.isInterfaceType)(t)||(0,Ft.isObjectType)(t))&&e.isSubType(r,t)}function uK(e,t,r){return t===r?!0:(0,Ft.isAbstractType)(t)?(0,Ft.isAbstractType)(r)?e.getPossibleTypes(t).some(n=>e.isSubType(r,n)):e.isSubType(t,r):(0,Ft.isAbstractType)(r)?e.isSubType(r,t):!1}});var ti=y(ut=>{"use strict";Object.defineProperty(ut,"__esModule",{value:!0});ut.GraphQLString=ut.GraphQLInt=ut.GraphQLID=ut.GraphQLFloat=ut.GraphQLBoolean=ut.GRAPHQL_MIN_INT=ut.GRAPHQL_MAX_INT=void 0;ut.isSpecifiedScalarType=lK;ut.specifiedScalarTypes=void 0;var Sn=ye(),LC=Xn(),vt=Q(),Ra=le(),xc=Ar(),Cc=ae(),mm=2147483647;ut.GRAPHQL_MAX_INT=mm;var vm=-2147483648;ut.GRAPHQL_MIN_INT=vm;var PC=new Cc.GraphQLScalarType({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize(e){let t=kc(e);if(typeof t=="boolean")return t?1:0;let r=t;if(typeof t=="string"&&t!==""&&(r=Number(t)),typeof r!="number"||!Number.isInteger(r))throw new vt.GraphQLError(`Int cannot represent non-integer value: ${(0,Sn.inspect)(t)}`);if(r>mm||r<vm)throw new vt.GraphQLError("Int cannot represent non 32-bit signed integer value: "+(0,Sn.inspect)(t));return r},parseValue(e){if(typeof e!="number"||!Number.isInteger(e))throw new vt.GraphQLError(`Int cannot represent non-integer value: ${(0,Sn.inspect)(e)}`);if(e>mm||e<vm)throw new vt.GraphQLError(`Int cannot represent non 32-bit signed integer value: ${e}`);return e},parseLiteral(e){if(e.kind!==Ra.Kind.INT)throw new vt.GraphQLError(`Int cannot represent non-integer value: ${(0,xc.print)(e)}`,{nodes:e});let t=parseInt(e.value,10);if(t>mm||t<vm)throw new vt.GraphQLError(`Int cannot represent non 32-bit signed integer value: ${e.value}`,{nodes:e});return t}});ut.GraphQLInt=PC;var xC=new Cc.GraphQLScalarType({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize(e){let t=kc(e);if(typeof t=="boolean")return t?1:0;let r=t;if(typeof t=="string"&&t!==""&&(r=Number(t)),typeof r!="number"||!Number.isFinite(r))throw new vt.GraphQLError(`Float cannot represent non numeric value: ${(0,Sn.inspect)(t)}`);return r},parseValue(e){if(typeof e!="number"||!Number.isFinite(e))throw new vt.GraphQLError(`Float cannot represent non numeric value: ${(0,Sn.inspect)(e)}`);return e},parseLiteral(e){if(e.kind!==Ra.Kind.FLOAT&&e.kind!==Ra.Kind.INT)throw new vt.GraphQLError(`Float cannot represent non numeric value: ${(0,xc.print)(e)}`,e);return parseFloat(e.value)}});ut.GraphQLFloat=xC;var CC=new Cc.GraphQLScalarType({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize(e){let t=kc(e);if(typeof t=="string")return t;if(typeof t=="boolean")return t?"true":"false";if(typeof t=="number"&&Number.isFinite(t))return t.toString();throw new vt.GraphQLError(`String cannot represent value: ${(0,Sn.inspect)(e)}`)},parseValue(e){if(typeof e!="string")throw new vt.GraphQLError(`String cannot represent a non string value: ${(0,Sn.inspect)(e)}`);return e},parseLiteral(e){if(e.kind!==Ra.Kind.STRING)throw new vt.GraphQLError(`String cannot represent a non string value: ${(0,xc.print)(e)}`,{nodes:e});return e.value}});ut.GraphQLString=CC;var kC=new Cc.GraphQLScalarType({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize(e){let t=kc(e);if(typeof t=="boolean")return t;if(Number.isFinite(t))return t!==0;throw new vt.GraphQLError(`Boolean cannot represent a non boolean value: ${(0,Sn.inspect)(t)}`)},parseValue(e){if(typeof e!="boolean")throw new vt.GraphQLError(`Boolean cannot represent a non boolean value: ${(0,Sn.inspect)(e)}`);return e},parseLiteral(e){if(e.kind!==Ra.Kind.BOOLEAN)throw new vt.GraphQLError(`Boolean cannot represent a non boolean value: ${(0,xc.print)(e)}`,{nodes:e});return e.value}});ut.GraphQLBoolean=kC;var DC=new Cc.GraphQLScalarType({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize(e){let t=kc(e);if(typeof t=="string")return t;if(Number.isInteger(t))return String(t);throw new vt.GraphQLError(`ID cannot represent value: ${(0,Sn.inspect)(e)}`)},parseValue(e){if(typeof e=="string")return e;if(typeof e=="number"&&Number.isInteger(e))return e.toString();throw new vt.GraphQLError(`ID cannot represent value: ${(0,Sn.inspect)(e)}`)},parseLiteral(e){if(e.kind!==Ra.Kind.STRING&&e.kind!==Ra.Kind.INT)throw new vt.GraphQLError("ID cannot represent a non-string and non-integer value: "+(0,xc.print)(e),{nodes:e});return e.value}});ut.GraphQLID=DC;var AC=Object.freeze([CC,PC,xC,kC,DC]);ut.specifiedScalarTypes=AC;function lK(e){return AC.some(({name:t})=>e.name===t)}function kc(e){if((0,LC.isObjectLike)(e)){if(typeof e.valueOf=="function"){let t=e.valueOf();if(!(0,LC.isObjectLike)(t))return t}if(typeof e.toJSON=="function")return e.toJSON()}return e}});var pr=y(lt=>{"use strict";Object.defineProperty(lt,"__esModule",{value:!0});lt.GraphQLSpecifiedByDirective=lt.GraphQLSkipDirective=lt.GraphQLIncludeDirective=lt.GraphQLDirective=lt.GraphQLDeprecatedDirective=lt.DEFAULT_DEPRECATION_REASON=void 0;lt.assertDirective=mK;lt.isDirective=FC;lt.isSpecifiedDirective=vK;lt.specifiedDirectives=void 0;var jC=Zt(),cK=ye(),fK=Tc(),pK=Xn(),dK=Xh(),wn=Xs(),hK=Oc(),Dc=ae(),ym=ti();function FC(e){return(0,fK.instanceOf)(e,Co)}function mK(e){if(!FC(e))throw new Error(`Expected ${(0,cK.inspect)(e)} to be a GraphQL directive.`);return e}var Co=class{constructor(t){var r,n;this.name=(0,hK.assertName)(t.name),this.description=t.description,this.locations=t.locations,this.isRepeatable=(r=t.isRepeatable)!==null&&r!==void 0?r:!1,this.extensions=(0,dK.toObjMap)(t.extensions),this.astNode=t.astNode,Array.isArray(t.locations)||(0,jC.devAssert)(!1,`@${t.name} locations must be an Array.`);let i=(n=t.args)!==null&&n!==void 0?n:{};(0,pK.isObjectLike)(i)&&!Array.isArray(i)||(0,jC.devAssert)(!1,`@${t.name} args must be an object with argument names as keys.`),this.args=(0,Dc.defineArguments)(i)}get[Symbol.toStringTag](){return"GraphQLDirective"}toConfig(){return{name:this.name,description:this.description,locations:this.locations,args:(0,Dc.argsToArgsConfig)(this.args),isRepeatable:this.isRepeatable,extensions:this.extensions,astNode:this.astNode}}toString(){return"@"+this.name}toJSON(){return this.toString()}};lt.GraphQLDirective=Co;var MC=new Co({name:"include",description:"Directs the executor to include this field or fragment only when the `if` argument is true.",locations:[wn.DirectiveLocation.FIELD,wn.DirectiveLocation.FRAGMENT_SPREAD,wn.DirectiveLocation.INLINE_FRAGMENT],args:{if:{type:new Dc.GraphQLNonNull(ym.GraphQLBoolean),description:"Included when true."}}});lt.GraphQLIncludeDirective=MC;var qC=new Co({name:"skip",description:"Directs the executor to skip this field or fragment when the `if` argument is true.",locations:[wn.DirectiveLocation.FIELD,wn.DirectiveLocation.FRAGMENT_SPREAD,wn.DirectiveLocation.INLINE_FRAGMENT],args:{if:{type:new Dc.GraphQLNonNull(ym.GraphQLBoolean),description:"Skipped when true."}}});lt.GraphQLSkipDirective=qC;var UC="No longer supported";lt.DEFAULT_DEPRECATION_REASON=UC;var VC=new Co({name:"deprecated",description:"Marks an element of a GraphQL schema as no longer supported.",locations:[wn.DirectiveLocation.FIELD_DEFINITION,wn.DirectiveLocation.ARGUMENT_DEFINITION,wn.DirectiveLocation.INPUT_FIELD_DEFINITION,wn.DirectiveLocation.ENUM_VALUE],args:{reason:{type:ym.GraphQLString,description:"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",defaultValue:UC}}});lt.GraphQLDeprecatedDirective=VC;var GC=new Co({name:"specifiedBy",description:"Exposes a URL that specifies the behavior of this scalar.",locations:[wn.DirectiveLocation.SCALAR],args:{url:{type:new Dc.GraphQLNonNull(ym.GraphQLString),description:"The URL that specifies the behavior of this scalar."}}});lt.GraphQLSpecifiedByDirective=GC;var $C=Object.freeze([MC,qC,VC,GC]);lt.specifiedDirectives=$C;function vK(e){return $C.some(({name:t})=>t===e.name)}});var gm=y(AT=>{"use strict";Object.defineProperty(AT,"__esModule",{value:!0});AT.isIterableObject=yK;function yK(e){return typeof e=="object"&&typeof e?.[Symbol.iterator]=="function"}});var Fc=y(jT=>{"use strict";Object.defineProperty(jT,"__esModule",{value:!0});jT.astFromValue=jc;var QC=ye(),gK=jt(),EK=gm(),TK=Xn(),Jr=le(),Ac=ae(),_K=ti();function jc(e,t){if((0,Ac.isNonNullType)(t)){let r=jc(e,t.ofType);return r?.kind===Jr.Kind.NULL?null:r}if(e===null)return{kind:Jr.Kind.NULL};if(e===void 0)return null;if((0,Ac.isListType)(t)){let r=t.ofType;if((0,EK.isIterableObject)(e)){let n=[];for(let i of e){let o=jc(i,r);o!=null&&n.push(o)}return{kind:Jr.Kind.LIST,values:n}}return jc(e,r)}if((0,Ac.isInputObjectType)(t)){if(!(0,TK.isObjectLike)(e))return null;let r=[];for(let n of Object.values(t.getFields())){let i=jc(e[n.name],n.type);i&&r.push({kind:Jr.Kind.OBJECT_FIELD,name:{kind:Jr.Kind.NAME,value:n.name},value:i})}return{kind:Jr.Kind.OBJECT,fields:r}}if((0,Ac.isLeafType)(t)){let r=t.serialize(e);if(r==null)return null;if(typeof r=="boolean")return{kind:Jr.Kind.BOOLEAN,value:r};if(typeof r=="number"&&Number.isFinite(r)){let n=String(r);return KC.test(n)?{kind:Jr.Kind.INT,value:n}:{kind:Jr.Kind.FLOAT,value:n}}if(typeof r=="string")return(0,Ac.isEnumType)(t)?{kind:Jr.Kind.ENUM,value:r}:t===_K.GraphQLID&&KC.test(r)?{kind:Jr.Kind.INT,value:r}:{kind:Jr.Kind.STRING,value:r};throw new TypeError(`Cannot convert value to AST: ${(0,QC.inspect)(r)}.`)}(0,gK.invariant)(!1,"Unexpected input type: "+(0,QC.inspect)(t))}var KC=/^-?(?:0|[1-9][0-9]*)$/});var en=y(ge=>{"use strict";Object.defineProperty(ge,"__esModule",{value:!0});ge.introspectionTypes=ge.__TypeKind=ge.__Type=ge.__Schema=ge.__InputValue=ge.__Field=ge.__EnumValue=ge.__DirectiveLocation=ge.__Directive=ge.TypeNameMetaFieldDef=ge.TypeMetaFieldDef=ge.TypeKind=ge.SchemaMetaFieldDef=void 0;ge.isIntrospectionType=LK;var bK=ye(),SK=jt(),ct=Xs(),wK=Ar(),OK=Fc(),M=ae(),Ne=ti(),FT=new M.GraphQLObjectType({name:"__Schema",description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:()=>({description:{type:Ne.GraphQLString,resolve:e=>e.description},types:{description:"A list of all types supported by this server.",type:new M.GraphQLNonNull(new M.GraphQLList(new M.GraphQLNonNull(Zr))),resolve(e){return Object.values(e.getTypeMap())}},queryType:{description:"The type that query operations will be rooted at.",type:new M.GraphQLNonNull(Zr),resolve:e=>e.getQueryType()},mutationType:{description:"If this server supports mutation, the type that mutation operations will be rooted at.",type:Zr,resolve:e=>e.getMutationType()},subscriptionType:{description:"If this server support subscription, the type that subscription operations will be rooted at.",type:Zr,resolve:e=>e.getSubscriptionType()},directives:{description:"A list of all directives supported by this server.",type:new M.GraphQLNonNull(new M.GraphQLList(new M.GraphQLNonNull(MT))),resolve:e=>e.getDirectives()}})});ge.__Schema=FT;var MT=new M.GraphQLObjectType({name:"__Directive",description:`A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.`,fields:()=>({name:{type:new M.GraphQLNonNull(Ne.GraphQLString),resolve:e=>e.name},description:{type:Ne.GraphQLString,resolve:e=>e.description},isRepeatable:{type:new M.GraphQLNonNull(Ne.GraphQLBoolean),resolve:e=>e.isRepeatable},locations:{type:new M.GraphQLNonNull(new M.GraphQLList(new M.GraphQLNonNull(qT))),resolve:e=>e.locations},args:{type:new M.GraphQLNonNull(new M.GraphQLList(new M.GraphQLNonNull(Mc))),args:{includeDeprecated:{type:Ne.GraphQLBoolean,defaultValue:!1}},resolve(e,{includeDeprecated:t}){return t?e.args:e.args.filter(r=>r.deprecationReason==null)}}})});ge.__Directive=MT;var qT=new M.GraphQLEnumType({name:"__DirectiveLocation",description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",values:{QUERY:{value:ct.DirectiveLocation.QUERY,description:"Location adjacent to a query operation."},MUTATION:{value:ct.DirectiveLocation.MUTATION,description:"Location adjacent to a mutation operation."},SUBSCRIPTION:{value:ct.DirectiveLocation.SUBSCRIPTION,description:"Location adjacent to a subscription operation."},FIELD:{value:ct.DirectiveLocation.FIELD,description:"Location adjacent to a field."},FRAGMENT_DEFINITION:{value:ct.DirectiveLocation.FRAGMENT_DEFINITION,description:"Location adjacent to a fragment definition."},FRAGMENT_SPREAD:{value:ct.DirectiveLocation.FRAGMENT_SPREAD,description:"Location adjacent to a fragment spread."},INLINE_FRAGMENT:{value:ct.DirectiveLocation.INLINE_FRAGMENT,description:"Location adjacent to an inline fragment."},VARIABLE_DEFINITION:{value:ct.DirectiveLocation.VARIABLE_DEFINITION,description:"Location adjacent to a variable definition."},SCHEMA:{value:ct.DirectiveLocation.SCHEMA,description:"Location adjacent to a schema definition."},SCALAR:{value:ct.DirectiveLocation.SCALAR,description:"Location adjacent to a scalar definition."},OBJECT:{value:ct.DirectiveLocation.OBJECT,description:"Location adjacent to an object type definition."},FIELD_DEFINITION:{value:ct.DirectiveLocation.FIELD_DEFINITION,description:"Location adjacent to a field definition."},ARGUMENT_DEFINITION:{value:ct.DirectiveLocation.ARGUMENT_DEFINITION,description:"Location adjacent to an argument definition."},INTERFACE:{value:ct.DirectiveLocation.INTERFACE,description:"Location adjacent to an interface definition."},UNION:{value:ct.DirectiveLocation.UNION,description:"Location adjacent to a union definition."},ENUM:{value:ct.DirectiveLocation.ENUM,description:"Location adjacent to an enum definition."},ENUM_VALUE:{value:ct.DirectiveLocation.ENUM_VALUE,description:"Location adjacent to an enum value definition."},INPUT_OBJECT:{value:ct.DirectiveLocation.INPUT_OBJECT,description:"Location adjacent to an input object type definition."},INPUT_FIELD_DEFINITION:{value:ct.DirectiveLocation.INPUT_FIELD_DEFINITION,description:"Location adjacent to an input object field definition."}}});ge.__DirectiveLocation=qT;var Zr=new M.GraphQLObjectType({name:"__Type",description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:()=>({kind:{type:new M.GraphQLNonNull(GT),resolve(e){if((0,M.isScalarType)(e))return ft.SCALAR;if((0,M.isObjectType)(e))return ft.OBJECT;if((0,M.isInterfaceType)(e))return ft.INTERFACE;if((0,M.isUnionType)(e))return ft.UNION;if((0,M.isEnumType)(e))return ft.ENUM;if((0,M.isInputObjectType)(e))return ft.INPUT_OBJECT;if((0,M.isListType)(e))return ft.LIST;if((0,M.isNonNullType)(e))return ft.NON_NULL;(0,SK.invariant)(!1,`Unexpected type: "${(0,bK.inspect)(e)}".`)}},name:{type:Ne.GraphQLString,resolve:e=>"name"in e?e.name:void 0},description:{type:Ne.GraphQLString,resolve:e=>"description"in e?e.description:void 0},specifiedByURL:{type:Ne.GraphQLString,resolve:e=>"specifiedByURL"in e?e.specifiedByURL:void 0},fields:{type:new M.GraphQLList(new M.GraphQLNonNull(UT)),args:{includeDeprecated:{type:Ne.GraphQLBoolean,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if((0,M.isObjectType)(e)||(0,M.isInterfaceType)(e)){let r=Object.values(e.getFields());return t?r:r.filter(n=>n.deprecationReason==null)}}},interfaces:{type:new M.GraphQLList(new M.GraphQLNonNull(Zr)),resolve(e){if((0,M.isObjectType)(e)||(0,M.isInterfaceType)(e))return e.getInterfaces()}},possibleTypes:{type:new M.GraphQLList(new M.GraphQLNonNull(Zr)),resolve(e,t,r,{schema:n}){if((0,M.isAbstractType)(e))return n.getPossibleTypes(e)}},enumValues:{type:new M.GraphQLList(new M.GraphQLNonNull(VT)),args:{includeDeprecated:{type:Ne.GraphQLBoolean,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if((0,M.isEnumType)(e)){let r=e.getValues();return t?r:r.filter(n=>n.deprecationReason==null)}}},inputFields:{type:new M.GraphQLList(new M.GraphQLNonNull(Mc)),args:{includeDeprecated:{type:Ne.GraphQLBoolean,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if((0,M.isInputObjectType)(e)){let r=Object.values(e.getFields());return t?r:r.filter(n=>n.deprecationReason==null)}}},ofType:{type:Zr,resolve:e=>"ofType"in e?e.ofType:void 0}})});ge.__Type=Zr;var UT=new M.GraphQLObjectType({name:"__Field",description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:()=>({name:{type:new M.GraphQLNonNull(Ne.GraphQLString),resolve:e=>e.name},description:{type:Ne.GraphQLString,resolve:e=>e.description},args:{type:new M.GraphQLNonNull(new M.GraphQLList(new M.GraphQLNonNull(Mc))),args:{includeDeprecated:{type:Ne.GraphQLBoolean,defaultValue:!1}},resolve(e,{includeDeprecated:t}){return t?e.args:e.args.filter(r=>r.deprecationReason==null)}},type:{type:new M.GraphQLNonNull(Zr),resolve:e=>e.type},isDeprecated:{type:new M.GraphQLNonNull(Ne.GraphQLBoolean),resolve:e=>e.deprecationReason!=null},deprecationReason:{type:Ne.GraphQLString,resolve:e=>e.deprecationReason}})});ge.__Field=UT;var Mc=new M.GraphQLObjectType({name:"__InputValue",description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:()=>({name:{type:new M.GraphQLNonNull(Ne.GraphQLString),resolve:e=>e.name},description:{type:Ne.GraphQLString,resolve:e=>e.description},type:{type:new M.GraphQLNonNull(Zr),resolve:e=>e.type},defaultValue:{type:Ne.GraphQLString,description:"A GraphQL-formatted string representing the default value for this input value.",resolve(e){let{type:t,defaultValue:r}=e,n=(0,OK.astFromValue)(r,t);return n?(0,wK.print)(n):null}},isDeprecated:{type:new M.GraphQLNonNull(Ne.GraphQLBoolean),resolve:e=>e.deprecationReason!=null},deprecationReason:{type:Ne.GraphQLString,resolve:e=>e.deprecationReason}})});ge.__InputValue=Mc;var VT=new M.GraphQLObjectType({name:"__EnumValue",description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:()=>({name:{type:new M.GraphQLNonNull(Ne.GraphQLString),resolve:e=>e.name},description:{type:Ne.GraphQLString,resolve:e=>e.description},isDeprecated:{type:new M.GraphQLNonNull(Ne.GraphQLBoolean),resolve:e=>e.deprecationReason!=null},deprecationReason:{type:Ne.GraphQLString,resolve:e=>e.deprecationReason}})});ge.__EnumValue=VT;var ft;ge.TypeKind=ft;(function(e){e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.INPUT_OBJECT="INPUT_OBJECT",e.LIST="LIST",e.NON_NULL="NON_NULL"})(ft||(ge.TypeKind=ft={}));var GT=new M.GraphQLEnumType({name:"__TypeKind",description:"An enum describing what kind of type a given `__Type` is.",values:{SCALAR:{value:ft.SCALAR,description:"Indicates this type is a scalar."},OBJECT:{value:ft.OBJECT,description:"Indicates this type is an object. `fields` and `interfaces` are valid fields."},INTERFACE:{value:ft.INTERFACE,description:"Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."},UNION:{value:ft.UNION,description:"Indicates this type is a union. `possibleTypes` is a valid field."},ENUM:{value:ft.ENUM,description:"Indicates this type is an enum. `enumValues` is a valid field."},INPUT_OBJECT:{value:ft.INPUT_OBJECT,description:"Indicates this type is an input object. `inputFields` is a valid field."},LIST:{value:ft.LIST,description:"Indicates this type is a list. `ofType` is a valid field."},NON_NULL:{value:ft.NON_NULL,description:"Indicates this type is a non-null. `ofType` is a valid field."}}});ge.__TypeKind=GT;var NK={name:"__schema",type:new M.GraphQLNonNull(FT),description:"Access the current type schema of this server.",args:[],resolve:(e,t,r,{schema:n})=>n,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0};ge.SchemaMetaFieldDef=NK;var IK={name:"__type",type:Zr,description:"Request the type information of a single type.",args:[{name:"name",description:void 0,type:new M.GraphQLNonNull(Ne.GraphQLString),defaultValue:void 0,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0}],resolve:(e,{name:t},r,{schema:n})=>n.getType(t),deprecationReason:void 0,extensions:Object.create(null),astNode:void 0};ge.TypeMetaFieldDef=IK;var RK={name:"__typename",type:new M.GraphQLNonNull(Ne.GraphQLString),description:"The name of the current Object type at runtime.",args:[],resolve:(e,t,r,{parentType:n})=>n.name,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0};ge.TypeNameMetaFieldDef=RK;var BC=Object.freeze([FT,MT,qT,Zr,UT,Mc,VT,GT]);ge.introspectionTypes=BC;function LK(e){return BC.some(({name:t})=>e.name===t)}});var La=y(iu=>{"use strict";Object.defineProperty(iu,"__esModule",{value:!0});iu.GraphQLSchema=void 0;iu.assertSchema=DK;iu.isSchema=zC;var Em=Zt(),QT=ye(),PK=Tc(),xK=Xn(),CK=Xh(),$T=Jn(),On=ae(),HC=pr(),kK=en();function zC(e){return(0,PK.instanceOf)(e,Tm)}function DK(e){if(!zC(e))throw new Error(`Expected ${(0,QT.inspect)(e)} to be a GraphQL schema.`);return e}var Tm=class{constructor(t){var r,n;this.__validationErrors=t.assumeValid===!0?[]:void 0,(0,xK.isObjectLike)(t)||(0,Em.devAssert)(!1,"Must provide configuration object."),!t.types||Array.isArray(t.types)||(0,Em.devAssert)(!1,`"types" must be Array if provided but got: ${(0,QT.inspect)(t.types)}.`),!t.directives||Array.isArray(t.directives)||(0,Em.devAssert)(!1,`"directives" must be Array if provided but got: ${(0,QT.inspect)(t.directives)}.`),this.description=t.description,this.extensions=(0,CK.toObjMap)(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(r=t.extensionASTNodes)!==null&&r!==void 0?r:[],this._queryType=t.query,this._mutationType=t.mutation,this._subscriptionType=t.subscription,this._directives=(n=t.directives)!==null&&n!==void 0?n:HC.specifiedDirectives;let i=new Set(t.types);if(t.types!=null)for(let o of t.types)i.delete(o),Nn(o,i);this._queryType!=null&&Nn(this._queryType,i),this._mutationType!=null&&Nn(this._mutationType,i),this._subscriptionType!=null&&Nn(this._subscriptionType,i);for(let o of this._directives)if((0,HC.isDirective)(o))for(let a of o.args)Nn(a.type,i);Nn(kK.__Schema,i),this._typeMap=Object.create(null),this._subTypeMap=Object.create(null),this._implementationsMap=Object.create(null);for(let o of i){if(o==null)continue;let a=o.name;if(a||(0,Em.devAssert)(!1,"One of the provided types for building the Schema is missing a name."),this._typeMap[a]!==void 0)throw new Error(`Schema must contain uniquely named types but contains multiple types named "${a}".`);if(this._typeMap[a]=o,(0,On.isInterfaceType)(o)){for(let s of o.getInterfaces())if((0,On.isInterfaceType)(s)){let u=this._implementationsMap[s.name];u===void 0&&(u=this._implementationsMap[s.name]={objects:[],interfaces:[]}),u.interfaces.push(o)}}else if((0,On.isObjectType)(o)){for(let s of o.getInterfaces())if((0,On.isInterfaceType)(s)){let u=this._implementationsMap[s.name];u===void 0&&(u=this._implementationsMap[s.name]={objects:[],interfaces:[]}),u.objects.push(o)}}}}get[Symbol.toStringTag](){return"GraphQLSchema"}getQueryType(){return this._queryType}getMutationType(){return this._mutationType}getSubscriptionType(){return this._subscriptionType}getRootType(t){switch(t){case $T.OperationTypeNode.QUERY:return this.getQueryType();case $T.OperationTypeNode.MUTATION:return this.getMutationType();case $T.OperationTypeNode.SUBSCRIPTION:return this.getSubscriptionType()}}getTypeMap(){return this._typeMap}getType(t){return this.getTypeMap()[t]}getPossibleTypes(t){return(0,On.isUnionType)(t)?t.getTypes():this.getImplementations(t).objects}getImplementations(t){let r=this._implementationsMap[t.name];return r??{objects:[],interfaces:[]}}isSubType(t,r){let n=this._subTypeMap[t.name];if(n===void 0){if(n=Object.create(null),(0,On.isUnionType)(t))for(let i of t.getTypes())n[i.name]=!0;else{let i=this.getImplementations(t);for(let o of i.objects)n[o.name]=!0;for(let o of i.interfaces)n[o.name]=!0}this._subTypeMap[t.name]=n}return n[r.name]!==void 0}getDirectives(){return this._directives}getDirective(t){return this.getDirectives().find(r=>r.name===t)}toConfig(){return{description:this.description,query:this.getQueryType(),mutation:this.getMutationType(),subscription:this.getSubscriptionType(),types:Object.values(this.getTypeMap()),directives:this.getDirectives(),extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes,assumeValid:this.__validationErrors!==void 0}}};iu.GraphQLSchema=Tm;function Nn(e,t){let r=(0,On.getNamedType)(e);if(!t.has(r)){if(t.add(r),(0,On.isUnionType)(r))for(let n of r.getTypes())Nn(n,t);else if((0,On.isObjectType)(r)||(0,On.isInterfaceType)(r)){for(let n of r.getInterfaces())Nn(n,t);for(let n of Object.values(r.getFields())){Nn(n.type,t);for(let i of n.args)Nn(i.type,t)}}else if((0,On.isInputObjectType)(r))for(let n of Object.values(r.getFields()))Nn(n.type,t)}return t}});var Uc=y(_m=>{"use strict";Object.defineProperty(_m,"__esModule",{value:!0});_m.assertValidSchema=MK;_m.validateSchema=ek;var Mt=ye(),AK=Q(),KT=Jn(),WC=Pc(),tt=ae(),ZC=pr(),jK=en(),FK=La();function ek(e){if((0,FK.assertSchema)(e),e.__validationErrors)return e.__validationErrors;let t=new HT(e);qK(t),UK(t),VK(t);let r=t.getErrors();return e.__validationErrors=r,r}function MK(e){let t=ek(e);if(t.length!==0)throw new Error(t.map(r=>r.message).join(`

`))}var HT=class{constructor(t){this._errors=[],this.schema=t}reportError(t,r){let n=Array.isArray(r)?r.filter(Boolean):r;this._errors.push(new AK.GraphQLError(t,{nodes:n}))}getErrors(){return this._errors}};function qK(e){let t=e.schema,r=t.getQueryType();if(!r)e.reportError("Query root type must be provided.",t.astNode);else if(!(0,tt.isObjectType)(r)){var n;e.reportError(`Query root type must be Object type, it cannot be ${(0,Mt.inspect)(r)}.`,(n=BT(t,KT.OperationTypeNode.QUERY))!==null&&n!==void 0?n:r.astNode)}let i=t.getMutationType();if(i&&!(0,tt.isObjectType)(i)){var o;e.reportError(`Mutation root type must be Object type if provided, it cannot be ${(0,Mt.inspect)(i)}.`,(o=BT(t,KT.OperationTypeNode.MUTATION))!==null&&o!==void 0?o:i.astNode)}let a=t.getSubscriptionType();if(a&&!(0,tt.isObjectType)(a)){var s;e.reportError(`Subscription root type must be Object type if provided, it cannot be ${(0,Mt.inspect)(a)}.`,(s=BT(t,KT.OperationTypeNode.SUBSCRIPTION))!==null&&s!==void 0?s:a.astNode)}}function BT(e,t){var r;return(r=[e.astNode,...e.extensionASTNodes].flatMap(n=>{var i;return(i=n?.operationTypes)!==null&&i!==void 0?i:[]}).find(n=>n.operation===t))===null||r===void 0?void 0:r.type}function UK(e){for(let r of e.schema.getDirectives()){if(!(0,ZC.isDirective)(r)){e.reportError(`Expected directive but got: ${(0,Mt.inspect)(r)}.`,r?.astNode);continue}Pa(e,r);for(let n of r.args)if(Pa(e,n),(0,tt.isInputType)(n.type)||e.reportError(`The type of @${r.name}(${n.name}:) must be Input Type but got: ${(0,Mt.inspect)(n.type)}.`,n.astNode),(0,tt.isRequiredArgument)(n)&&n.deprecationReason!=null){var t;e.reportError(`Required argument @${r.name}(${n.name}:) cannot be deprecated.`,[zT(n.astNode),(t=n.astNode)===null||t===void 0?void 0:t.type])}}}function Pa(e,t){t.name.startsWith("__")&&e.reportError(`Name "${t.name}" must not begin with "__", which is reserved by GraphQL introspection.`,t.astNode)}function VK(e){let t=HK(e),r=e.schema.getTypeMap();for(let n of Object.values(r)){if(!(0,tt.isNamedType)(n)){e.reportError(`Expected GraphQL named type but got: ${(0,Mt.inspect)(n)}.`,n.astNode);continue}(0,jK.isIntrospectionType)(n)||Pa(e,n),(0,tt.isObjectType)(n)||(0,tt.isInterfaceType)(n)?(YC(e,n),XC(e,n)):(0,tt.isUnionType)(n)?QK(e,n):(0,tt.isEnumType)(n)?KK(e,n):(0,tt.isInputObjectType)(n)&&(BK(e,n),t(n))}}function YC(e,t){let r=Object.values(t.getFields());r.length===0&&e.reportError(`Type ${t.name} must define one or more fields.`,[t.astNode,...t.extensionASTNodes]);for(let a of r){if(Pa(e,a),!(0,tt.isOutputType)(a.type)){var n;e.reportError(`The type of ${t.name}.${a.name} must be Output Type but got: ${(0,Mt.inspect)(a.type)}.`,(n=a.astNode)===null||n===void 0?void 0:n.type)}for(let s of a.args){let u=s.name;if(Pa(e,s),!(0,tt.isInputType)(s.type)){var i;e.reportError(`The type of ${t.name}.${a.name}(${u}:) must be Input Type but got: ${(0,Mt.inspect)(s.type)}.`,(i=s.astNode)===null||i===void 0?void 0:i.type)}if((0,tt.isRequiredArgument)(s)&&s.deprecationReason!=null){var o;e.reportError(`Required argument ${t.name}.${a.name}(${u}:) cannot be deprecated.`,[zT(s.astNode),(o=s.astNode)===null||o===void 0?void 0:o.type])}}}}function XC(e,t){let r=Object.create(null);for(let n of t.getInterfaces()){if(!(0,tt.isInterfaceType)(n)){e.reportError(`Type ${(0,Mt.inspect)(t)} must only implement Interface types, it cannot implement ${(0,Mt.inspect)(n)}.`,qc(t,n));continue}if(t===n){e.reportError(`Type ${t.name} cannot implement itself because it would create a circular reference.`,qc(t,n));continue}if(r[n.name]){e.reportError(`Type ${t.name} can only implement ${n.name} once.`,qc(t,n));continue}r[n.name]=!0,$K(e,t,n),GK(e,t,n)}}function GK(e,t,r){let n=t.getFields();for(let u of Object.values(r.getFields())){let l=u.name,c=n[l];if(!c){e.reportError(`Interface field ${r.name}.${l} expected but ${t.name} does not provide it.`,[u.astNode,t.astNode,...t.extensionASTNodes]);continue}if(!(0,WC.isTypeSubTypeOf)(e.schema,c.type,u.type)){var i,o;e.reportError(`Interface field ${r.name}.${l} expects type ${(0,Mt.inspect)(u.type)} but ${t.name}.${l} is type ${(0,Mt.inspect)(c.type)}.`,[(i=u.astNode)===null||i===void 0?void 0:i.type,(o=c.astNode)===null||o===void 0?void 0:o.type])}for(let f of u.args){let p=f.name,d=c.args.find(m=>m.name===p);if(!d){e.reportError(`Interface field argument ${r.name}.${l}(${p}:) expected but ${t.name}.${l} does not provide it.`,[f.astNode,c.astNode]);continue}if(!(0,WC.isEqualType)(f.type,d.type)){var a,s;e.reportError(`Interface field argument ${r.name}.${l}(${p}:) expects type ${(0,Mt.inspect)(f.type)} but ${t.name}.${l}(${p}:) is type ${(0,Mt.inspect)(d.type)}.`,[(a=f.astNode)===null||a===void 0?void 0:a.type,(s=d.astNode)===null||s===void 0?void 0:s.type])}}for(let f of c.args){let p=f.name;!u.args.find(m=>m.name===p)&&(0,tt.isRequiredArgument)(f)&&e.reportError(`Object field ${t.name}.${l} includes required argument ${p} that is missing from the Interface field ${r.name}.${l}.`,[f.astNode,u.astNode])}}}function $K(e,t,r){let n=t.getInterfaces();for(let i of r.getInterfaces())n.includes(i)||e.reportError(i===t?`Type ${t.name} cannot implement ${r.name} because it would create a circular reference.`:`Type ${t.name} must implement ${i.name} because it is implemented by ${r.name}.`,[...qc(r,i),...qc(t,r)])}function QK(e,t){let r=t.getTypes();r.length===0&&e.reportError(`Union type ${t.name} must define one or more member types.`,[t.astNode,...t.extensionASTNodes]);let n=Object.create(null);for(let i of r){if(n[i.name]){e.reportError(`Union type ${t.name} can only include type ${i.name} once.`,JC(t,i.name));continue}n[i.name]=!0,(0,tt.isObjectType)(i)||e.reportError(`Union type ${t.name} can only include Object types, it cannot include ${(0,Mt.inspect)(i)}.`,JC(t,String(i)))}}function KK(e,t){let r=t.getValues();r.length===0&&e.reportError(`Enum type ${t.name} must define one or more values.`,[t.astNode,...t.extensionASTNodes]);for(let n of r)Pa(e,n)}function BK(e,t){let r=Object.values(t.getFields());r.length===0&&e.reportError(`Input Object type ${t.name} must define one or more fields.`,[t.astNode,...t.extensionASTNodes]);for(let o of r){if(Pa(e,o),!(0,tt.isInputType)(o.type)){var n;e.reportError(`The type of ${t.name}.${o.name} must be Input Type but got: ${(0,Mt.inspect)(o.type)}.`,(n=o.astNode)===null||n===void 0?void 0:n.type)}if((0,tt.isRequiredInputField)(o)&&o.deprecationReason!=null){var i;e.reportError(`Required input field ${t.name}.${o.name} cannot be deprecated.`,[zT(o.astNode),(i=o.astNode)===null||i===void 0?void 0:i.type])}}}function HK(e){let t=Object.create(null),r=[],n=Object.create(null);return i;function i(o){if(t[o.name])return;t[o.name]=!0,n[o.name]=r.length;let a=Object.values(o.getFields());for(let s of a)if((0,tt.isNonNullType)(s.type)&&(0,tt.isInputObjectType)(s.type.ofType)){let u=s.type.ofType,l=n[u.name];if(r.push(s),l===void 0)i(u);else{let c=r.slice(l),f=c.map(p=>p.name).join(".");e.reportError(`Cannot reference Input Object "${u.name}" within itself through a series of non-null fields: "${f}".`,c.map(p=>p.astNode))}r.pop()}n[o.name]=void 0}}function qc(e,t){let{astNode:r,extensionASTNodes:n}=e;return(r!=null?[r,...n]:n).flatMap(o=>{var a;return(a=o.interfaces)!==null&&a!==void 0?a:[]}).filter(o=>o.name.value===t.name)}function JC(e,t){let{astNode:r,extensionASTNodes:n}=e;return(r!=null?[r,...n]:n).flatMap(o=>{var a;return(a=o.types)!==null&&a!==void 0?a:[]}).filter(o=>o.name.value===t)}function zT(e){var t;return e==null||(t=e.directives)===null||t===void 0?void 0:t.find(r=>r.name.value===ZC.GraphQLDeprecatedDirective.name)}});var ri=y(XT=>{"use strict";Object.defineProperty(XT,"__esModule",{value:!0});XT.typeFromAST=YT;var WT=le(),tk=ae();function YT(e,t){switch(t.kind){case WT.Kind.LIST_TYPE:{let r=YT(e,t.type);return r&&new tk.GraphQLList(r)}case WT.Kind.NON_NULL_TYPE:{let r=YT(e,t.type);return r&&new tk.GraphQLNonNull(r)}case WT.Kind.NAMED_TYPE:return e.getType(t.name.value)}}});var bm=y(Vc=>{"use strict";Object.defineProperty(Vc,"__esModule",{value:!0});Vc.TypeInfo=void 0;Vc.visitWithTypeInfo=YK;var zK=Jn(),Ye=le(),rk=Sa(),Xe=ae(),ou=en(),nk=ri(),JT=class{constructor(t,r,n){this._schema=t,this._typeStack=[],this._parentTypeStack=[],this._inputTypeStack=[],this._fieldDefStack=[],this._defaultValueStack=[],this._directive=null,this._argument=null,this._enumValue=null,this._getFieldDef=n??WK,r&&((0,Xe.isInputType)(r)&&this._inputTypeStack.push(r),(0,Xe.isCompositeType)(r)&&this._parentTypeStack.push(r),(0,Xe.isOutputType)(r)&&this._typeStack.push(r))}get[Symbol.toStringTag](){return"TypeInfo"}getType(){if(this._typeStack.length>0)return this._typeStack[this._typeStack.length-1]}getParentType(){if(this._parentTypeStack.length>0)return this._parentTypeStack[this._parentTypeStack.length-1]}getInputType(){if(this._inputTypeStack.length>0)return this._inputTypeStack[this._inputTypeStack.length-1]}getParentInputType(){if(this._inputTypeStack.length>1)return this._inputTypeStack[this._inputTypeStack.length-2]}getFieldDef(){if(this._fieldDefStack.length>0)return this._fieldDefStack[this._fieldDefStack.length-1]}getDefaultValue(){if(this._defaultValueStack.length>0)return this._defaultValueStack[this._defaultValueStack.length-1]}getDirective(){return this._directive}getArgument(){return this._argument}getEnumValue(){return this._enumValue}enter(t){let r=this._schema;switch(t.kind){case Ye.Kind.SELECTION_SET:{let i=(0,Xe.getNamedType)(this.getType());this._parentTypeStack.push((0,Xe.isCompositeType)(i)?i:void 0);break}case Ye.Kind.FIELD:{let i=this.getParentType(),o,a;i&&(o=this._getFieldDef(r,i,t),o&&(a=o.type)),this._fieldDefStack.push(o),this._typeStack.push((0,Xe.isOutputType)(a)?a:void 0);break}case Ye.Kind.DIRECTIVE:this._directive=r.getDirective(t.name.value);break;case Ye.Kind.OPERATION_DEFINITION:{let i=r.getRootType(t.operation);this._typeStack.push((0,Xe.isObjectType)(i)?i:void 0);break}case Ye.Kind.INLINE_FRAGMENT:case Ye.Kind.FRAGMENT_DEFINITION:{let i=t.typeCondition,o=i?(0,nk.typeFromAST)(r,i):(0,Xe.getNamedType)(this.getType());this._typeStack.push((0,Xe.isOutputType)(o)?o:void 0);break}case Ye.Kind.VARIABLE_DEFINITION:{let i=(0,nk.typeFromAST)(r,t.type);this._inputTypeStack.push((0,Xe.isInputType)(i)?i:void 0);break}case Ye.Kind.ARGUMENT:{var n;let i,o,a=(n=this.getDirective())!==null&&n!==void 0?n:this.getFieldDef();a&&(i=a.args.find(s=>s.name===t.name.value),i&&(o=i.type)),this._argument=i,this._defaultValueStack.push(i?i.defaultValue:void 0),this._inputTypeStack.push((0,Xe.isInputType)(o)?o:void 0);break}case Ye.Kind.LIST:{let i=(0,Xe.getNullableType)(this.getInputType()),o=(0,Xe.isListType)(i)?i.ofType:i;this._defaultValueStack.push(void 0),this._inputTypeStack.push((0,Xe.isInputType)(o)?o:void 0);break}case Ye.Kind.OBJECT_FIELD:{let i=(0,Xe.getNamedType)(this.getInputType()),o,a;(0,Xe.isInputObjectType)(i)&&(a=i.getFields()[t.name.value],a&&(o=a.type)),this._defaultValueStack.push(a?a.defaultValue:void 0),this._inputTypeStack.push((0,Xe.isInputType)(o)?o:void 0);break}case Ye.Kind.ENUM:{let i=(0,Xe.getNamedType)(this.getInputType()),o;(0,Xe.isEnumType)(i)&&(o=i.getValue(t.value)),this._enumValue=o;break}default:}}leave(t){switch(t.kind){case Ye.Kind.SELECTION_SET:this._parentTypeStack.pop();break;case Ye.Kind.FIELD:this._fieldDefStack.pop(),this._typeStack.pop();break;case Ye.Kind.DIRECTIVE:this._directive=null;break;case Ye.Kind.OPERATION_DEFINITION:case Ye.Kind.INLINE_FRAGMENT:case Ye.Kind.FRAGMENT_DEFINITION:this._typeStack.pop();break;case Ye.Kind.VARIABLE_DEFINITION:this._inputTypeStack.pop();break;case Ye.Kind.ARGUMENT:this._argument=null,this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case Ye.Kind.LIST:case Ye.Kind.OBJECT_FIELD:this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case Ye.Kind.ENUM:this._enumValue=null;break;default:}}};Vc.TypeInfo=JT;function WK(e,t,r){let n=r.name.value;if(n===ou.SchemaMetaFieldDef.name&&e.getQueryType()===t)return ou.SchemaMetaFieldDef;if(n===ou.TypeMetaFieldDef.name&&e.getQueryType()===t)return ou.TypeMetaFieldDef;if(n===ou.TypeNameMetaFieldDef.name&&(0,Xe.isCompositeType)(t))return ou.TypeNameMetaFieldDef;if((0,Xe.isObjectType)(t)||(0,Xe.isInterfaceType)(t))return t.getFields()[n]}function YK(e,t){return{enter(...r){let n=r[0];e.enter(n);let i=(0,rk.getEnterLeaveForKind)(t,n.kind).enter;if(i){let o=i.apply(t,r);return o!==void 0&&(e.leave(n),(0,zK.isNode)(o)&&e.enter(o)),o}},leave(...r){let n=r[0],i=(0,rk.getEnterLeaveForKind)(t,n.kind).leave,o;return i&&(o=i.apply(t,r)),e.leave(n),o}}}});var xa=y(tn=>{"use strict";Object.defineProperty(tn,"__esModule",{value:!0});tn.isConstValueNode=ZT;tn.isDefinitionNode=XK;tn.isExecutableDefinitionNode=ik;tn.isSelectionNode=JK;tn.isTypeDefinitionNode=sk;tn.isTypeExtensionNode=lk;tn.isTypeNode=ZK;tn.isTypeSystemDefinitionNode=ak;tn.isTypeSystemExtensionNode=uk;tn.isValueNode=ok;var se=le();function XK(e){return ik(e)||ak(e)||uk(e)}function ik(e){return e.kind===se.Kind.OPERATION_DEFINITION||e.kind===se.Kind.FRAGMENT_DEFINITION}function JK(e){return e.kind===se.Kind.FIELD||e.kind===se.Kind.FRAGMENT_SPREAD||e.kind===se.Kind.INLINE_FRAGMENT}function ok(e){return e.kind===se.Kind.VARIABLE||e.kind===se.Kind.INT||e.kind===se.Kind.FLOAT||e.kind===se.Kind.STRING||e.kind===se.Kind.BOOLEAN||e.kind===se.Kind.NULL||e.kind===se.Kind.ENUM||e.kind===se.Kind.LIST||e.kind===se.Kind.OBJECT}function ZT(e){return ok(e)&&(e.kind===se.Kind.LIST?e.values.some(ZT):e.kind===se.Kind.OBJECT?e.fields.some(t=>ZT(t.value)):e.kind!==se.Kind.VARIABLE)}function ZK(e){return e.kind===se.Kind.NAMED_TYPE||e.kind===se.Kind.LIST_TYPE||e.kind===se.Kind.NON_NULL_TYPE}function ak(e){return e.kind===se.Kind.SCHEMA_DEFINITION||sk(e)||e.kind===se.Kind.DIRECTIVE_DEFINITION}function sk(e){return e.kind===se.Kind.SCALAR_TYPE_DEFINITION||e.kind===se.Kind.OBJECT_TYPE_DEFINITION||e.kind===se.Kind.INTERFACE_TYPE_DEFINITION||e.kind===se.Kind.UNION_TYPE_DEFINITION||e.kind===se.Kind.ENUM_TYPE_DEFINITION||e.kind===se.Kind.INPUT_OBJECT_TYPE_DEFINITION}function uk(e){return e.kind===se.Kind.SCHEMA_EXTENSION||lk(e)}function lk(e){return e.kind===se.Kind.SCALAR_TYPE_EXTENSION||e.kind===se.Kind.OBJECT_TYPE_EXTENSION||e.kind===se.Kind.INTERFACE_TYPE_EXTENSION||e.kind===se.Kind.UNION_TYPE_EXTENSION||e.kind===se.Kind.ENUM_TYPE_EXTENSION||e.kind===se.Kind.INPUT_OBJECT_TYPE_EXTENSION}});var t_=y(e_=>{"use strict";Object.defineProperty(e_,"__esModule",{value:!0});e_.ExecutableDefinitionsRule=rB;var eB=Q(),ck=le(),tB=xa();function rB(e){return{Document(t){for(let r of t.definitions)if(!(0,tB.isExecutableDefinitionNode)(r)){let n=r.kind===ck.Kind.SCHEMA_DEFINITION||r.kind===ck.Kind.SCHEMA_EXTENSION?"schema":'"'+r.name.value+'"';e.reportError(new eB.GraphQLError(`The ${n} definition is not executable.`,{nodes:r}))}return!1}}}});var n_=y(r_=>{"use strict";Object.defineProperty(r_,"__esModule",{value:!0});r_.FieldsOnCorrectTypeRule=aB;var fk=No(),nB=wc(),iB=Ro(),oB=Q(),Gc=ae();function aB(e){return{Field(t){let r=e.getParentType();if(r&&!e.getFieldDef()){let i=e.getSchema(),o=t.name.value,a=(0,fk.didYouMean)("to use an inline fragment on",sB(i,r,o));a===""&&(a=(0,fk.didYouMean)(uB(r,o))),e.reportError(new oB.GraphQLError(`Cannot query field "${o}" on type "${r.name}".`+a,{nodes:t}))}}}}function sB(e,t,r){if(!(0,Gc.isAbstractType)(t))return[];let n=new Set,i=Object.create(null);for(let a of e.getPossibleTypes(t))if(!!a.getFields()[r]){n.add(a),i[a.name]=1;for(let s of a.getInterfaces()){var o;!s.getFields()[r]||(n.add(s),i[s.name]=((o=i[s.name])!==null&&o!==void 0?o:0)+1)}}return[...n].sort((a,s)=>{let u=i[s.name]-i[a.name];return u!==0?u:(0,Gc.isInterfaceType)(a)&&e.isSubType(a,s)?-1:(0,Gc.isInterfaceType)(s)&&e.isSubType(s,a)?1:(0,nB.naturalCompare)(a.name,s.name)}).map(a=>a.name)}function uB(e,t){if((0,Gc.isObjectType)(e)||(0,Gc.isInterfaceType)(e)){let r=Object.keys(e.getFields());return(0,iB.suggestionList)(t,r)}return[]}});var o_=y(i_=>{"use strict";Object.defineProperty(i_,"__esModule",{value:!0});i_.FragmentsOnCompositeTypesRule=lB;var pk=Q(),dk=Ar(),hk=ae(),mk=ri();function lB(e){return{InlineFragment(t){let r=t.typeCondition;if(r){let n=(0,mk.typeFromAST)(e.getSchema(),r);if(n&&!(0,hk.isCompositeType)(n)){let i=(0,dk.print)(r);e.reportError(new pk.GraphQLError(`Fragment cannot condition on non composite type "${i}".`,{nodes:r}))}}},FragmentDefinition(t){let r=(0,mk.typeFromAST)(e.getSchema(),t.typeCondition);if(r&&!(0,hk.isCompositeType)(r)){let n=(0,dk.print)(t.typeCondition);e.reportError(new pk.GraphQLError(`Fragment "${t.name.value}" cannot condition on non composite type "${n}".`,{nodes:t.typeCondition}))}}}}});var a_=y(Sm=>{"use strict";Object.defineProperty(Sm,"__esModule",{value:!0});Sm.KnownArgumentNamesOnDirectivesRule=Ek;Sm.KnownArgumentNamesRule=pB;var vk=No(),yk=Ro(),gk=Q(),cB=le(),fB=pr();function pB(e){return{...Ek(e),Argument(t){let r=e.getArgument(),n=e.getFieldDef(),i=e.getParentType();if(!r&&n&&i){let o=t.name.value,a=n.args.map(u=>u.name),s=(0,yk.suggestionList)(o,a);e.reportError(new gk.GraphQLError(`Unknown argument "${o}" on field "${i.name}.${n.name}".`+(0,vk.didYouMean)(s),{nodes:t}))}}}}function Ek(e){let t=Object.create(null),r=e.getSchema(),n=r?r.getDirectives():fB.specifiedDirectives;for(let a of n)t[a.name]=a.args.map(s=>s.name);let i=e.getDocument().definitions;for(let a of i)if(a.kind===cB.Kind.DIRECTIVE_DEFINITION){var o;let s=(o=a.arguments)!==null&&o!==void 0?o:[];t[a.name.value]=s.map(u=>u.name.value)}return{Directive(a){let s=a.name.value,u=t[s];if(a.arguments&&u)for(let l of a.arguments){let c=l.name.value;if(!u.includes(c)){let f=(0,yk.suggestionList)(c,u);e.reportError(new gk.GraphQLError(`Unknown argument "${c}" on directive "@${s}".`+(0,vk.didYouMean)(f),{nodes:l}))}}return!1}}}});var c_=y(l_=>{"use strict";Object.defineProperty(l_,"__esModule",{value:!0});l_.KnownDirectivesRule=mB;var dB=ye(),s_=jt(),Tk=Q(),u_=Jn(),pt=Xs(),Fe=le(),hB=pr();function mB(e){let t=Object.create(null),r=e.getSchema(),n=r?r.getDirectives():hB.specifiedDirectives;for(let o of n)t[o.name]=o.locations;let i=e.getDocument().definitions;for(let o of i)o.kind===Fe.Kind.DIRECTIVE_DEFINITION&&(t[o.name.value]=o.locations.map(a=>a.value));return{Directive(o,a,s,u,l){let c=o.name.value,f=t[c];if(!f){e.reportError(new Tk.GraphQLError(`Unknown directive "@${c}".`,{nodes:o}));return}let p=vB(l);p&&!f.includes(p)&&e.reportError(new Tk.GraphQLError(`Directive "@${c}" may not be used on ${p}.`,{nodes:o}))}}}function vB(e){let t=e[e.length-1];switch("kind"in t||(0,s_.invariant)(!1),t.kind){case Fe.Kind.OPERATION_DEFINITION:return yB(t.operation);case Fe.Kind.FIELD:return pt.DirectiveLocation.FIELD;case Fe.Kind.FRAGMENT_SPREAD:return pt.DirectiveLocation.FRAGMENT_SPREAD;case Fe.Kind.INLINE_FRAGMENT:return pt.DirectiveLocation.INLINE_FRAGMENT;case Fe.Kind.FRAGMENT_DEFINITION:return pt.DirectiveLocation.FRAGMENT_DEFINITION;case Fe.Kind.VARIABLE_DEFINITION:return pt.DirectiveLocation.VARIABLE_DEFINITION;case Fe.Kind.SCHEMA_DEFINITION:case Fe.Kind.SCHEMA_EXTENSION:return pt.DirectiveLocation.SCHEMA;case Fe.Kind.SCALAR_TYPE_DEFINITION:case Fe.Kind.SCALAR_TYPE_EXTENSION:return pt.DirectiveLocation.SCALAR;case Fe.Kind.OBJECT_TYPE_DEFINITION:case Fe.Kind.OBJECT_TYPE_EXTENSION:return pt.DirectiveLocation.OBJECT;case Fe.Kind.FIELD_DEFINITION:return pt.DirectiveLocation.FIELD_DEFINITION;case Fe.Kind.INTERFACE_TYPE_DEFINITION:case Fe.Kind.INTERFACE_TYPE_EXTENSION:return pt.DirectiveLocation.INTERFACE;case Fe.Kind.UNION_TYPE_DEFINITION:case Fe.Kind.UNION_TYPE_EXTENSION:return pt.DirectiveLocation.UNION;case Fe.Kind.ENUM_TYPE_DEFINITION:case Fe.Kind.ENUM_TYPE_EXTENSION:return pt.DirectiveLocation.ENUM;case Fe.Kind.ENUM_VALUE_DEFINITION:return pt.DirectiveLocation.ENUM_VALUE;case Fe.Kind.INPUT_OBJECT_TYPE_DEFINITION:case Fe.Kind.INPUT_OBJECT_TYPE_EXTENSION:return pt.DirectiveLocation.INPUT_OBJECT;case Fe.Kind.INPUT_VALUE_DEFINITION:{let r=e[e.length-3];return"kind"in r||(0,s_.invariant)(!1),r.kind===Fe.Kind.INPUT_OBJECT_TYPE_DEFINITION?pt.DirectiveLocation.INPUT_FIELD_DEFINITION:pt.DirectiveLocation.ARGUMENT_DEFINITION}default:(0,s_.invariant)(!1,"Unexpected kind: "+(0,dB.inspect)(t.kind))}}function yB(e){switch(e){case u_.OperationTypeNode.QUERY:return pt.DirectiveLocation.QUERY;case u_.OperationTypeNode.MUTATION:return pt.DirectiveLocation.MUTATION;case u_.OperationTypeNode.SUBSCRIPTION:return pt.DirectiveLocation.SUBSCRIPTION}}});var p_=y(f_=>{"use strict";Object.defineProperty(f_,"__esModule",{value:!0});f_.KnownFragmentNamesRule=EB;var gB=Q();function EB(e){return{FragmentSpread(t){let r=t.name.value;e.getFragment(r)||e.reportError(new gB.GraphQLError(`Unknown fragment "${r}".`,{nodes:t.name}))}}}});var m_=y(h_=>{"use strict";Object.defineProperty(h_,"__esModule",{value:!0});h_.KnownTypeNamesRule=OB;var TB=No(),_B=Ro(),bB=Q(),d_=xa(),SB=en(),wB=ti();function OB(e){let t=e.getSchema(),r=t?t.getTypeMap():Object.create(null),n=Object.create(null);for(let o of e.getDocument().definitions)(0,d_.isTypeDefinitionNode)(o)&&(n[o.name.value]=!0);let i=[...Object.keys(r),...Object.keys(n)];return{NamedType(o,a,s,u,l){let c=o.name.value;if(!r[c]&&!n[c]){var f;let p=(f=l[2])!==null&&f!==void 0?f:s,d=p!=null&&NB(p);if(d&&_k.includes(c))return;let m=(0,_B.suggestionList)(c,d?_k.concat(i):i);e.reportError(new bB.GraphQLError(`Unknown type "${c}".`+(0,TB.didYouMean)(m),{nodes:o}))}}}}var _k=[...wB.specifiedScalarTypes,...SB.introspectionTypes].map(e=>e.name);function NB(e){return"kind"in e&&((0,d_.isTypeSystemDefinitionNode)(e)||(0,d_.isTypeSystemExtensionNode)(e))}});var y_=y(v_=>{"use strict";Object.defineProperty(v_,"__esModule",{value:!0});v_.LoneAnonymousOperationRule=LB;var IB=Q(),RB=le();function LB(e){let t=0;return{Document(r){t=r.definitions.filter(n=>n.kind===RB.Kind.OPERATION_DEFINITION).length},OperationDefinition(r){!r.name&&t>1&&e.reportError(new IB.GraphQLError("This anonymous operation must be the only defined operation.",{nodes:r}))}}}});var E_=y(g_=>{"use strict";Object.defineProperty(g_,"__esModule",{value:!0});g_.LoneSchemaDefinitionRule=PB;var bk=Q();function PB(e){var t,r,n;let i=e.getSchema(),o=(t=(r=(n=i?.astNode)!==null&&n!==void 0?n:i?.getQueryType())!==null&&r!==void 0?r:i?.getMutationType())!==null&&t!==void 0?t:i?.getSubscriptionType(),a=0;return{SchemaDefinition(s){if(o){e.reportError(new bk.GraphQLError("Cannot define a new schema within a schema extension.",{nodes:s}));return}a>0&&e.reportError(new bk.GraphQLError("Must provide only one schema definition.",{nodes:s})),++a}}}});var __=y(T_=>{"use strict";Object.defineProperty(T_,"__esModule",{value:!0});T_.NoFragmentCyclesRule=CB;var xB=Q();function CB(e){let t=Object.create(null),r=[],n=Object.create(null);return{OperationDefinition:()=>!1,FragmentDefinition(o){return i(o),!1}};function i(o){if(t[o.name.value])return;let a=o.name.value;t[a]=!0;let s=e.getFragmentSpreads(o.selectionSet);if(s.length!==0){n[a]=r.length;for(let u of s){let l=u.name.value,c=n[l];if(r.push(u),c===void 0){let f=e.getFragment(l);f&&i(f)}else{let f=r.slice(c),p=f.slice(0,-1).map(d=>'"'+d.name.value+'"').join(", ");e.reportError(new xB.GraphQLError(`Cannot spread fragment "${l}" within itself`+(p!==""?` via ${p}.`:"."),{nodes:f}))}r.pop()}n[a]=void 0}}}});var S_=y(b_=>{"use strict";Object.defineProperty(b_,"__esModule",{value:!0});b_.NoUndefinedVariablesRule=DB;var kB=Q();function DB(e){let t=Object.create(null);return{OperationDefinition:{enter(){t=Object.create(null)},leave(r){let n=e.getRecursiveVariableUsages(r);for(let{node:i}of n){let o=i.name.value;t[o]!==!0&&e.reportError(new kB.GraphQLError(r.name?`Variable "$${o}" is not defined by operation "${r.name.value}".`:`Variable "$${o}" is not defined.`,{nodes:[i,r]}))}}},VariableDefinition(r){t[r.variable.name.value]=!0}}}});var O_=y(w_=>{"use strict";Object.defineProperty(w_,"__esModule",{value:!0});w_.NoUnusedFragmentsRule=jB;var AB=Q();function jB(e){let t=[],r=[];return{OperationDefinition(n){return t.push(n),!1},FragmentDefinition(n){return r.push(n),!1},Document:{leave(){let n=Object.create(null);for(let i of t)for(let o of e.getRecursivelyReferencedFragments(i))n[o.name.value]=!0;for(let i of r){let o=i.name.value;n[o]!==!0&&e.reportError(new AB.GraphQLError(`Fragment "${o}" is never used.`,{nodes:i}))}}}}}});var I_=y(N_=>{"use strict";Object.defineProperty(N_,"__esModule",{value:!0});N_.NoUnusedVariablesRule=MB;var FB=Q();function MB(e){let t=[];return{OperationDefinition:{enter(){t=[]},leave(r){let n=Object.create(null),i=e.getRecursiveVariableUsages(r);for(let{node:o}of i)n[o.name.value]=!0;for(let o of t){let a=o.variable.name.value;n[a]!==!0&&e.reportError(new FB.GraphQLError(r.name?`Variable "$${a}" is never used in operation "${r.name.value}".`:`Variable "$${a}" is never used.`,{nodes:o}))}}},VariableDefinition(r){t.push(r)}}}});var P_=y(L_=>{"use strict";Object.defineProperty(L_,"__esModule",{value:!0});L_.sortValueNode=R_;var qB=wc(),Pi=le();function R_(e){switch(e.kind){case Pi.Kind.OBJECT:return{...e,fields:UB(e.fields)};case Pi.Kind.LIST:return{...e,values:e.values.map(R_)};case Pi.Kind.INT:case Pi.Kind.FLOAT:case Pi.Kind.STRING:case Pi.Kind.BOOLEAN:case Pi.Kind.NULL:case Pi.Kind.ENUM:case Pi.Kind.VARIABLE:return e}}function UB(e){return e.map(t=>({...t,value:R_(t.value)})).sort((t,r)=>(0,qB.naturalCompare)(t.name.value,r.name.value))}});var j_=y(A_=>{"use strict";Object.defineProperty(A_,"__esModule",{value:!0});A_.OverlappingFieldsCanBeMergedRule=QB;var Sk=ye(),VB=Q(),$c=le(),GB=Ar(),dr=ae(),$B=P_(),Ok=ri();function Nk(e){return Array.isArray(e)?e.map(([t,r])=>`subfields "${t}" conflict because `+Nk(r)).join(" and "):e}function QB(e){let t=new k_,r=new Map;return{SelectionSet(n){let i=KB(e,r,t,e.getParentType(),n);for(let[[o,a],s,u]of i){let l=Nk(a);e.reportError(new VB.GraphQLError(`Fields "${o}" conflict because ${l}. Use different aliases on the fields to fetch both if this was intentional.`,{nodes:s.concat(u)}))}}}}function KB(e,t,r,n,i){let o=[],[a,s]=Nm(e,t,n,i);if(HB(e,o,t,r,a),s.length!==0)for(let u=0;u<s.length;u++){wm(e,o,t,r,!1,a,s[u]);for(let l=u+1;l<s.length;l++)Om(e,o,t,r,!1,s[u],s[l])}return o}function wm(e,t,r,n,i,o,a){let s=e.getFragment(a);if(!s)return;let[u,l]=C_(e,r,s);if(o!==u){D_(e,t,r,n,i,o,u);for(let c of l)n.has(c,a,i)||(n.add(c,a,i),wm(e,t,r,n,i,o,c))}}function Om(e,t,r,n,i,o,a){if(o===a||n.has(o,a,i))return;n.add(o,a,i);let s=e.getFragment(o),u=e.getFragment(a);if(!s||!u)return;let[l,c]=C_(e,r,s),[f,p]=C_(e,r,u);D_(e,t,r,n,i,l,f);for(let d of p)Om(e,t,r,n,i,o,d);for(let d of c)Om(e,t,r,n,i,d,a)}function BB(e,t,r,n,i,o,a,s){let u=[],[l,c]=Nm(e,t,i,o),[f,p]=Nm(e,t,a,s);D_(e,u,t,r,n,l,f);for(let d of p)wm(e,u,t,r,n,l,d);for(let d of c)wm(e,u,t,r,n,f,d);for(let d of c)for(let m of p)Om(e,u,t,r,n,d,m);return u}function HB(e,t,r,n,i){for(let[o,a]of Object.entries(i))if(a.length>1)for(let s=0;s<a.length;s++)for(let u=s+1;u<a.length;u++){let l=Ik(e,r,n,!1,o,a[s],a[u]);l&&t.push(l)}}function D_(e,t,r,n,i,o,a){for(let[s,u]of Object.entries(o)){let l=a[s];if(l)for(let c of u)for(let f of l){let p=Ik(e,r,n,i,s,c,f);p&&t.push(p)}}}function Ik(e,t,r,n,i,o,a){let[s,u,l]=o,[c,f,p]=a,d=n||s!==c&&(0,dr.isObjectType)(s)&&(0,dr.isObjectType)(c);if(!d){let v=u.name.value,g=f.name.value;if(v!==g)return[[i,`"${v}" and "${g}" are different fields`],[u],[f]];if(wk(u)!==wk(f))return[[i,"they have differing arguments"],[u],[f]]}let m=l?.type,E=p?.type;if(m&&E&&x_(m,E))return[[i,`they return conflicting types "${(0,Sk.inspect)(m)}" and "${(0,Sk.inspect)(E)}"`],[u],[f]];let b=u.selectionSet,h=f.selectionSet;if(b&&h){let v=BB(e,t,r,d,(0,dr.getNamedType)(m),b,(0,dr.getNamedType)(E),h);return zB(v,i,u,f)}}function wk(e){var t;let r=(t=e.arguments)!==null&&t!==void 0?t:[],n={kind:$c.Kind.OBJECT,fields:r.map(i=>({kind:$c.Kind.OBJECT_FIELD,name:i.name,value:i.value}))};return(0,GB.print)((0,$B.sortValueNode)(n))}function x_(e,t){return(0,dr.isListType)(e)?(0,dr.isListType)(t)?x_(e.ofType,t.ofType):!0:(0,dr.isListType)(t)?!0:(0,dr.isNonNullType)(e)?(0,dr.isNonNullType)(t)?x_(e.ofType,t.ofType):!0:(0,dr.isNonNullType)(t)?!0:(0,dr.isLeafType)(e)||(0,dr.isLeafType)(t)?e!==t:!1}function Nm(e,t,r,n){let i=t.get(n);if(i)return i;let o=Object.create(null),a=Object.create(null);Rk(e,r,n,o,a);let s=[o,Object.keys(a)];return t.set(n,s),s}function C_(e,t,r){let n=t.get(r.selectionSet);if(n)return n;let i=(0,Ok.typeFromAST)(e.getSchema(),r.typeCondition);return Nm(e,t,i,r.selectionSet)}function Rk(e,t,r,n,i){for(let o of r.selections)switch(o.kind){case $c.Kind.FIELD:{let a=o.name.value,s;((0,dr.isObjectType)(t)||(0,dr.isInterfaceType)(t))&&(s=t.getFields()[a]);let u=o.alias?o.alias.value:a;n[u]||(n[u]=[]),n[u].push([t,o,s]);break}case $c.Kind.FRAGMENT_SPREAD:i[o.name.value]=!0;break;case $c.Kind.INLINE_FRAGMENT:{let a=o.typeCondition,s=a?(0,Ok.typeFromAST)(e.getSchema(),a):t;Rk(e,s,o.selectionSet,n,i);break}}}function zB(e,t,r,n){if(e.length>0)return[[t,e.map(([i])=>i)],[r,...e.map(([,i])=>i).flat()],[n,...e.map(([,,i])=>i).flat()]]}var k_=class{constructor(){this._data=new Map}has(t,r,n){var i;let[o,a]=t<r?[t,r]:[r,t],s=(i=this._data.get(o))===null||i===void 0?void 0:i.get(a);return s===void 0?!1:n?!0:n===s}add(t,r,n){let[i,o]=t<r?[t,r]:[r,t],a=this._data.get(i);a===void 0?this._data.set(i,new Map([[o,n]])):a.set(o,n)}}});var q_=y(M_=>{"use strict";Object.defineProperty(M_,"__esModule",{value:!0});M_.PossibleFragmentSpreadsRule=YB;var Im=ye(),Lk=Q(),F_=ae(),Pk=Pc(),WB=ri();function YB(e){return{InlineFragment(t){let r=e.getType(),n=e.getParentType();if((0,F_.isCompositeType)(r)&&(0,F_.isCompositeType)(n)&&!(0,Pk.doTypesOverlap)(e.getSchema(),r,n)){let i=(0,Im.inspect)(n),o=(0,Im.inspect)(r);e.reportError(new Lk.GraphQLError(`Fragment cannot be spread here as objects of type "${i}" can never be of type "${o}".`,{nodes:t}))}},FragmentSpread(t){let r=t.name.value,n=XB(e,r),i=e.getParentType();if(n&&i&&!(0,Pk.doTypesOverlap)(e.getSchema(),n,i)){let o=(0,Im.inspect)(i),a=(0,Im.inspect)(n);e.reportError(new Lk.GraphQLError(`Fragment "${r}" cannot be spread here as objects of type "${o}" can never be of type "${a}".`,{nodes:t}))}}}}function XB(e,t){let r=e.getFragment(t);if(r){let n=(0,WB.typeFromAST)(e.getSchema(),r.typeCondition);if((0,F_.isCompositeType)(n))return n}}});var V_=y(U_=>{"use strict";Object.defineProperty(U_,"__esModule",{value:!0});U_.PossibleTypeExtensionsRule=t7;var JB=No(),Ck=ye(),kk=jt(),ZB=Ro(),xk=Q(),Ge=le(),e7=xa(),au=ae();function t7(e){let t=e.getSchema(),r=Object.create(null);for(let i of e.getDocument().definitions)(0,e7.isTypeDefinitionNode)(i)&&(r[i.name.value]=i);return{ScalarTypeExtension:n,ObjectTypeExtension:n,InterfaceTypeExtension:n,UnionTypeExtension:n,EnumTypeExtension:n,InputObjectTypeExtension:n};function n(i){let o=i.name.value,a=r[o],s=t?.getType(o),u;if(a?u=r7[a.kind]:s&&(u=n7(s)),u){if(u!==i.kind){let l=i7(i.kind);e.reportError(new xk.GraphQLError(`Cannot extend non-${l} type "${o}".`,{nodes:a?[a,i]:i}))}}else{let l=Object.keys({...r,...t?.getTypeMap()}),c=(0,ZB.suggestionList)(o,l);e.reportError(new xk.GraphQLError(`Cannot extend type "${o}" because it is not defined.`+(0,JB.didYouMean)(c),{nodes:i.name}))}}}var r7={[Ge.Kind.SCALAR_TYPE_DEFINITION]:Ge.Kind.SCALAR_TYPE_EXTENSION,[Ge.Kind.OBJECT_TYPE_DEFINITION]:Ge.Kind.OBJECT_TYPE_EXTENSION,[Ge.Kind.INTERFACE_TYPE_DEFINITION]:Ge.Kind.INTERFACE_TYPE_EXTENSION,[Ge.Kind.UNION_TYPE_DEFINITION]:Ge.Kind.UNION_TYPE_EXTENSION,[Ge.Kind.ENUM_TYPE_DEFINITION]:Ge.Kind.ENUM_TYPE_EXTENSION,[Ge.Kind.INPUT_OBJECT_TYPE_DEFINITION]:Ge.Kind.INPUT_OBJECT_TYPE_EXTENSION};function n7(e){if((0,au.isScalarType)(e))return Ge.Kind.SCALAR_TYPE_EXTENSION;if((0,au.isObjectType)(e))return Ge.Kind.OBJECT_TYPE_EXTENSION;if((0,au.isInterfaceType)(e))return Ge.Kind.INTERFACE_TYPE_EXTENSION;if((0,au.isUnionType)(e))return Ge.Kind.UNION_TYPE_EXTENSION;if((0,au.isEnumType)(e))return Ge.Kind.ENUM_TYPE_EXTENSION;if((0,au.isInputObjectType)(e))return Ge.Kind.INPUT_OBJECT_TYPE_EXTENSION;(0,kk.invariant)(!1,"Unexpected type: "+(0,Ck.inspect)(e))}function i7(e){switch(e){case Ge.Kind.SCALAR_TYPE_EXTENSION:return"scalar";case Ge.Kind.OBJECT_TYPE_EXTENSION:return"object";case Ge.Kind.INTERFACE_TYPE_EXTENSION:return"interface";case Ge.Kind.UNION_TYPE_EXTENSION:return"union";case Ge.Kind.ENUM_TYPE_EXTENSION:return"enum";case Ge.Kind.INPUT_OBJECT_TYPE_EXTENSION:return"input object";default:(0,kk.invariant)(!1,"Unexpected kind: "+(0,Ck.inspect)(e))}}});var $_=y(Rm=>{"use strict";Object.defineProperty(Rm,"__esModule",{value:!0});Rm.ProvidedRequiredArgumentsOnDirectivesRule=Mk;Rm.ProvidedRequiredArgumentsRule=s7;var Ak=ye(),Dk=Io(),jk=Q(),Fk=le(),o7=Ar(),G_=ae(),a7=pr();function s7(e){return{...Mk(e),Field:{leave(t){var r;let n=e.getFieldDef();if(!n)return!1;let i=new Set((r=t.arguments)===null||r===void 0?void 0:r.map(o=>o.name.value));for(let o of n.args)if(!i.has(o.name)&&(0,G_.isRequiredArgument)(o)){let a=(0,Ak.inspect)(o.type);e.reportError(new jk.GraphQLError(`Field "${n.name}" argument "${o.name}" of type "${a}" is required, but it was not provided.`,{nodes:t}))}}}}}function Mk(e){var t;let r=Object.create(null),n=e.getSchema(),i=(t=n?.getDirectives())!==null&&t!==void 0?t:a7.specifiedDirectives;for(let s of i)r[s.name]=(0,Dk.keyMap)(s.args.filter(G_.isRequiredArgument),u=>u.name);let o=e.getDocument().definitions;for(let s of o)if(s.kind===Fk.Kind.DIRECTIVE_DEFINITION){var a;let u=(a=s.arguments)!==null&&a!==void 0?a:[];r[s.name.value]=(0,Dk.keyMap)(u.filter(u7),l=>l.name.value)}return{Directive:{leave(s){let u=s.name.value,l=r[u];if(l){var c;let f=(c=s.arguments)!==null&&c!==void 0?c:[],p=new Set(f.map(d=>d.name.value));for(let[d,m]of Object.entries(l))if(!p.has(d)){let E=(0,G_.isType)(m.type)?(0,Ak.inspect)(m.type):(0,o7.print)(m.type);e.reportError(new jk.GraphQLError(`Directive "@${u}" argument "${d}" of type "${E}" is required, but it was not provided.`,{nodes:s}))}}}}}}function u7(e){return e.type.kind===Fk.Kind.NON_NULL_TYPE&&e.defaultValue==null}});var K_=y(Q_=>{"use strict";Object.defineProperty(Q_,"__esModule",{value:!0});Q_.ScalarLeafsRule=l7;var qk=ye(),Uk=Q(),Vk=ae();function l7(e){return{Field(t){let r=e.getType(),n=t.selectionSet;if(r){if((0,Vk.isLeafType)((0,Vk.getNamedType)(r))){if(n){let i=t.name.value,o=(0,qk.inspect)(r);e.reportError(new Uk.GraphQLError(`Field "${i}" must not have a selection since type "${o}" has no subfields.`,{nodes:n}))}}else if(!n){let i=t.name.value,o=(0,qk.inspect)(r);e.reportError(new Uk.GraphQLError(`Field "${i}" of type "${o}" must have a selection of subfields. Did you mean "${i} { ... }"?`,{nodes:t}))}}}}}});var H_=y(B_=>{"use strict";Object.defineProperty(B_,"__esModule",{value:!0});B_.printPathArray=c7;function c7(e){return e.map(t=>typeof t=="number"?"["+t.toString()+"]":"."+t).join("")}});var Qc=y(Lm=>{"use strict";Object.defineProperty(Lm,"__esModule",{value:!0});Lm.addPath=f7;Lm.pathToArray=p7;function f7(e,t,r){return{prev:e,key:t,typename:r}}function p7(e){let t=[],r=e;for(;r;)t.push(r.key),r=r.prev;return t.reverse()}});var W_=y(z_=>{"use strict";Object.defineProperty(z_,"__esModule",{value:!0});z_.coerceInputValue=E7;var d7=No(),Pm=ye(),h7=jt(),m7=gm(),v7=Xn(),xi=Qc(),y7=H_(),g7=Ro(),Ca=Q(),Kc=ae();function E7(e,t,r=T7){return Bc(e,t,r,void 0)}function T7(e,t,r){let n="Invalid value "+(0,Pm.inspect)(t);throw e.length>0&&(n+=` at "value${(0,y7.printPathArray)(e)}"`),r.message=n+": "+r.message,r}function Bc(e,t,r,n){if((0,Kc.isNonNullType)(t)){if(e!=null)return Bc(e,t.ofType,r,n);r((0,xi.pathToArray)(n),e,new Ca.GraphQLError(`Expected non-nullable type "${(0,Pm.inspect)(t)}" not to be null.`));return}if(e==null)return null;if((0,Kc.isListType)(t)){let i=t.ofType;return(0,m7.isIterableObject)(e)?Array.from(e,(o,a)=>{let s=(0,xi.addPath)(n,a,void 0);return Bc(o,i,r,s)}):[Bc(e,i,r,n)]}if((0,Kc.isInputObjectType)(t)){if(!(0,v7.isObjectLike)(e)){r((0,xi.pathToArray)(n),e,new Ca.GraphQLError(`Expected type "${t.name}" to be an object.`));return}let i={},o=t.getFields();for(let a of Object.values(o)){let s=e[a.name];if(s===void 0){if(a.defaultValue!==void 0)i[a.name]=a.defaultValue;else if((0,Kc.isNonNullType)(a.type)){let u=(0,Pm.inspect)(a.type);r((0,xi.pathToArray)(n),e,new Ca.GraphQLError(`Field "${a.name}" of required type "${u}" was not provided.`))}continue}i[a.name]=Bc(s,a.type,r,(0,xi.addPath)(n,a.name,t.name))}for(let a of Object.keys(e))if(!o[a]){let s=(0,g7.suggestionList)(a,Object.keys(t.getFields()));r((0,xi.pathToArray)(n),e,new Ca.GraphQLError(`Field "${a}" is not defined by type "${t.name}".`+(0,d7.didYouMean)(s)))}return i}if((0,Kc.isLeafType)(t)){let i;try{i=t.parseValue(e)}catch(o){o instanceof Ca.GraphQLError?r((0,xi.pathToArray)(n),e,o):r((0,xi.pathToArray)(n),e,new Ca.GraphQLError(`Expected type "${t.name}". `+o.message,{originalError:o}));return}return i===void 0&&r((0,xi.pathToArray)(n),e,new Ca.GraphQLError(`Expected type "${t.name}".`)),i}(0,h7.invariant)(!1,"Unexpected input type: "+(0,Pm.inspect)(t))}});var zc=y(Y_=>{"use strict";Object.defineProperty(Y_,"__esModule",{value:!0});Y_.valueFromAST=Hc;var _7=ye(),b7=jt(),S7=Io(),su=le(),ka=ae();function Hc(e,t,r){if(!!e){if(e.kind===su.Kind.VARIABLE){let n=e.name.value;if(r==null||r[n]===void 0)return;let i=r[n];return i===null&&(0,ka.isNonNullType)(t)?void 0:i}if((0,ka.isNonNullType)(t))return e.kind===su.Kind.NULL?void 0:Hc(e,t.ofType,r);if(e.kind===su.Kind.NULL)return null;if((0,ka.isListType)(t)){let n=t.ofType;if(e.kind===su.Kind.LIST){let o=[];for(let a of e.values)if(Gk(a,r)){if((0,ka.isNonNullType)(n))return;o.push(null)}else{let s=Hc(a,n,r);if(s===void 0)return;o.push(s)}return o}let i=Hc(e,n,r);return i===void 0?void 0:[i]}if((0,ka.isInputObjectType)(t)){if(e.kind!==su.Kind.OBJECT)return;let n=Object.create(null),i=(0,S7.keyMap)(e.fields,o=>o.name.value);for(let o of Object.values(t.getFields())){let a=i[o.name];if(!a||Gk(a.value,r)){if(o.defaultValue!==void 0)n[o.name]=o.defaultValue;else if((0,ka.isNonNullType)(o.type))return;continue}let s=Hc(a.value,o.type,r);if(s===void 0)return;n[o.name]=s}return n}if((0,ka.isLeafType)(t)){let n;try{n=t.parseLiteral(e,r)}catch{return}return n===void 0?void 0:n}(0,b7.invariant)(!1,"Unexpected input type: "+(0,_7.inspect)(t))}}function Gk(e,t){return e.kind===su.Kind.VARIABLE&&(t==null||t[e.name.value]===void 0)}});var cu=y(Wc=>{"use strict";Object.defineProperty(Wc,"__esModule",{value:!0});Wc.getArgumentValues=Bk;Wc.getDirectiveValues=P7;Wc.getVariableValues=R7;var uu=ye(),w7=Io(),O7=H_(),Ci=Q(),$k=le(),Qk=Ar(),lu=ae(),N7=W_(),I7=ri(),Kk=zc();function R7(e,t,r,n){let i=[],o=n?.maxErrors;try{let a=L7(e,t,r,s=>{if(o!=null&&i.length>=o)throw new Ci.GraphQLError("Too many errors processing variables, error limit reached. Execution aborted.");i.push(s)});if(i.length===0)return{coerced:a}}catch(a){i.push(a)}return{errors:i}}function L7(e,t,r,n){let i={};for(let o of t){let a=o.variable.name.value,s=(0,I7.typeFromAST)(e,o.type);if(!(0,lu.isInputType)(s)){let l=(0,Qk.print)(o.type);n(new Ci.GraphQLError(`Variable "$${a}" expected value of type "${l}" which cannot be used as an input type.`,{nodes:o.type}));continue}if(!Hk(r,a)){if(o.defaultValue)i[a]=(0,Kk.valueFromAST)(o.defaultValue,s);else if((0,lu.isNonNullType)(s)){let l=(0,uu.inspect)(s);n(new Ci.GraphQLError(`Variable "$${a}" of required type "${l}" was not provided.`,{nodes:o}))}continue}let u=r[a];if(u===null&&(0,lu.isNonNullType)(s)){let l=(0,uu.inspect)(s);n(new Ci.GraphQLError(`Variable "$${a}" of non-null type "${l}" must not be null.`,{nodes:o}));continue}i[a]=(0,N7.coerceInputValue)(u,s,(l,c,f)=>{let p=`Variable "$${a}" got invalid value `+(0,uu.inspect)(c);l.length>0&&(p+=` at "${a}${(0,O7.printPathArray)(l)}"`),n(new Ci.GraphQLError(p+"; "+f.message,{nodes:o,originalError:f.originalError}))})}return i}function Bk(e,t,r){var n;let i={},o=(n=t.arguments)!==null&&n!==void 0?n:[],a=(0,w7.keyMap)(o,s=>s.name.value);for(let s of e.args){let u=s.name,l=s.type,c=a[u];if(!c){if(s.defaultValue!==void 0)i[u]=s.defaultValue;else if((0,lu.isNonNullType)(l))throw new Ci.GraphQLError(`Argument "${u}" of required type "${(0,uu.inspect)(l)}" was not provided.`,{nodes:t});continue}let f=c.value,p=f.kind===$k.Kind.NULL;if(f.kind===$k.Kind.VARIABLE){let m=f.name.value;if(r==null||!Hk(r,m)){if(s.defaultValue!==void 0)i[u]=s.defaultValue;else if((0,lu.isNonNullType)(l))throw new Ci.GraphQLError(`Argument "${u}" of required type "${(0,uu.inspect)(l)}" was provided the variable "$${m}" which was not provided a runtime value.`,{nodes:f});continue}p=r[m]==null}if(p&&(0,lu.isNonNullType)(l))throw new Ci.GraphQLError(`Argument "${u}" of non-null type "${(0,uu.inspect)(l)}" must not be null.`,{nodes:f});let d=(0,Kk.valueFromAST)(f,l,r);if(d===void 0)throw new Ci.GraphQLError(`Argument "${u}" has invalid value ${(0,Qk.print)(f)}.`,{nodes:f});i[u]=d}return i}function P7(e,t,r){var n;let i=(n=t.directives)===null||n===void 0?void 0:n.find(o=>o.name.value===e.name);if(i)return Bk(e,i,r)}function Hk(e,t){return Object.prototype.hasOwnProperty.call(e,t)}});var km=y(Cm=>{"use strict";Object.defineProperty(Cm,"__esModule",{value:!0});Cm.collectFields=k7;Cm.collectSubfields=D7;var X_=le(),x7=ae(),zk=pr(),C7=ri(),Wk=cu();function k7(e,t,r,n,i){let o=new Map;return xm(e,t,r,n,i,o,new Set),o}function D7(e,t,r,n,i){let o=new Map,a=new Set;for(let s of i)s.selectionSet&&xm(e,t,r,n,s.selectionSet,o,a);return o}function xm(e,t,r,n,i,o,a){for(let s of i.selections)switch(s.kind){case X_.Kind.FIELD:{if(!J_(r,s))continue;let u=A7(s),l=o.get(u);l!==void 0?l.push(s):o.set(u,[s]);break}case X_.Kind.INLINE_FRAGMENT:{if(!J_(r,s)||!Yk(e,s,n))continue;xm(e,t,r,n,s.selectionSet,o,a);break}case X_.Kind.FRAGMENT_SPREAD:{let u=s.name.value;if(a.has(u)||!J_(r,s))continue;a.add(u);let l=t[u];if(!l||!Yk(e,l,n))continue;xm(e,t,r,n,l.selectionSet,o,a);break}}}function J_(e,t){let r=(0,Wk.getDirectiveValues)(zk.GraphQLSkipDirective,t,e);if(r?.if===!0)return!1;let n=(0,Wk.getDirectiveValues)(zk.GraphQLIncludeDirective,t,e);return n?.if!==!1}function Yk(e,t,r){let n=t.typeCondition;if(!n)return!0;let i=(0,C7.typeFromAST)(e,n);return i===r?!0:(0,x7.isAbstractType)(i)?e.isSubType(i,r):!1}function A7(e){return e.alias?e.alias.value:e.name.value}});var eb=y(Z_=>{"use strict";Object.defineProperty(Z_,"__esModule",{value:!0});Z_.SingleFieldSubscriptionsRule=M7;var Xk=Q(),j7=le(),F7=km();function M7(e){return{OperationDefinition(t){if(t.operation==="subscription"){let r=e.getSchema(),n=r.getSubscriptionType();if(n){let i=t.name?t.name.value:null,o=Object.create(null),a=e.getDocument(),s=Object.create(null);for(let l of a.definitions)l.kind===j7.Kind.FRAGMENT_DEFINITION&&(s[l.name.value]=l);let u=(0,F7.collectFields)(r,s,o,n,t.selectionSet);if(u.size>1){let f=[...u.values()].slice(1).flat();e.reportError(new Xk.GraphQLError(i!=null?`Subscription "${i}" must select only one top level field.`:"Anonymous Subscription must select only one top level field.",{nodes:f}))}for(let l of u.values())l[0].name.value.startsWith("__")&&e.reportError(new Xk.GraphQLError(i!=null?`Subscription "${i}" must not select an introspection top level field.`:"Anonymous Subscription must not select an introspection top level field.",{nodes:l}))}}}}}});var Dm=y(tb=>{"use strict";Object.defineProperty(tb,"__esModule",{value:!0});tb.groupBy=q7;function q7(e,t){let r=new Map;for(let n of e){let i=t(n),o=r.get(i);o===void 0?r.set(i,[n]):o.push(n)}return r}});var nb=y(rb=>{"use strict";Object.defineProperty(rb,"__esModule",{value:!0});rb.UniqueArgumentDefinitionNamesRule=G7;var U7=Dm(),V7=Q();function G7(e){return{DirectiveDefinition(n){var i;let o=(i=n.arguments)!==null&&i!==void 0?i:[];return r(`@${n.name.value}`,o)},InterfaceTypeDefinition:t,InterfaceTypeExtension:t,ObjectTypeDefinition:t,ObjectTypeExtension:t};function t(n){var i;let o=n.name.value,a=(i=n.fields)!==null&&i!==void 0?i:[];for(let u of a){var s;let l=u.name.value,c=(s=u.arguments)!==null&&s!==void 0?s:[];r(`${o}.${l}`,c)}return!1}function r(n,i){let o=(0,U7.groupBy)(i,a=>a.name.value);for(let[a,s]of o)s.length>1&&e.reportError(new V7.GraphQLError(`Argument "${n}(${a}:)" can only be defined once.`,{nodes:s.map(u=>u.name)}));return!1}}});var ob=y(ib=>{"use strict";Object.defineProperty(ib,"__esModule",{value:!0});ib.UniqueArgumentNamesRule=K7;var $7=Dm(),Q7=Q();function K7(e){return{Field:t,Directive:t};function t(r){var n;let i=(n=r.arguments)!==null&&n!==void 0?n:[],o=(0,$7.groupBy)(i,a=>a.name.value);for(let[a,s]of o)s.length>1&&e.reportError(new Q7.GraphQLError(`There can be only one argument named "${a}".`,{nodes:s.map(u=>u.name)}))}}});var sb=y(ab=>{"use strict";Object.defineProperty(ab,"__esModule",{value:!0});ab.UniqueDirectiveNamesRule=B7;var Jk=Q();function B7(e){let t=Object.create(null),r=e.getSchema();return{DirectiveDefinition(n){let i=n.name.value;if(r!=null&&r.getDirective(i)){e.reportError(new Jk.GraphQLError(`Directive "@${i}" already exists in the schema. It cannot be redefined.`,{nodes:n.name}));return}return t[i]?e.reportError(new Jk.GraphQLError(`There can be only one directive named "@${i}".`,{nodes:[t[i],n.name]})):t[i]=n.name,!1}}}});var cb=y(lb=>{"use strict";Object.defineProperty(lb,"__esModule",{value:!0});lb.UniqueDirectivesPerLocationRule=W7;var H7=Q(),ub=le(),Zk=xa(),z7=pr();function W7(e){let t=Object.create(null),r=e.getSchema(),n=r?r.getDirectives():z7.specifiedDirectives;for(let s of n)t[s.name]=!s.isRepeatable;let i=e.getDocument().definitions;for(let s of i)s.kind===ub.Kind.DIRECTIVE_DEFINITION&&(t[s.name.value]=!s.repeatable);let o=Object.create(null),a=Object.create(null);return{enter(s){if(!("directives"in s)||!s.directives)return;let u;if(s.kind===ub.Kind.SCHEMA_DEFINITION||s.kind===ub.Kind.SCHEMA_EXTENSION)u=o;else if((0,Zk.isTypeDefinitionNode)(s)||(0,Zk.isTypeExtensionNode)(s)){let l=s.name.value;u=a[l],u===void 0&&(a[l]=u=Object.create(null))}else u=Object.create(null);for(let l of s.directives){let c=l.name.value;t[c]&&(u[c]?e.reportError(new H7.GraphQLError(`The directive "@${c}" can only be used once at this location.`,{nodes:[u[c],l]})):u[c]=l)}}}}});var pb=y(fb=>{"use strict";Object.defineProperty(fb,"__esModule",{value:!0});fb.UniqueEnumValueNamesRule=X7;var eD=Q(),Y7=ae();function X7(e){let t=e.getSchema(),r=t?t.getTypeMap():Object.create(null),n=Object.create(null);return{EnumTypeDefinition:i,EnumTypeExtension:i};function i(o){var a;let s=o.name.value;n[s]||(n[s]=Object.create(null));let u=(a=o.values)!==null&&a!==void 0?a:[],l=n[s];for(let c of u){let f=c.name.value,p=r[s];(0,Y7.isEnumType)(p)&&p.getValue(f)?e.reportError(new eD.GraphQLError(`Enum value "${s}.${f}" already exists in the schema. It cannot also be defined in this type extension.`,{nodes:c.name})):l[f]?e.reportError(new eD.GraphQLError(`Enum value "${s}.${f}" can only be defined once.`,{nodes:[l[f],c.name]})):l[f]=c.name}return!1}}});var mb=y(hb=>{"use strict";Object.defineProperty(hb,"__esModule",{value:!0});hb.UniqueFieldDefinitionNamesRule=J7;var tD=Q(),db=ae();function J7(e){let t=e.getSchema(),r=t?t.getTypeMap():Object.create(null),n=Object.create(null);return{InputObjectTypeDefinition:i,InputObjectTypeExtension:i,InterfaceTypeDefinition:i,InterfaceTypeExtension:i,ObjectTypeDefinition:i,ObjectTypeExtension:i};function i(o){var a;let s=o.name.value;n[s]||(n[s]=Object.create(null));let u=(a=o.fields)!==null&&a!==void 0?a:[],l=n[s];for(let c of u){let f=c.name.value;Z7(r[s],f)?e.reportError(new tD.GraphQLError(`Field "${s}.${f}" already exists in the schema. It cannot also be defined in this type extension.`,{nodes:c.name})):l[f]?e.reportError(new tD.GraphQLError(`Field "${s}.${f}" can only be defined once.`,{nodes:[l[f],c.name]})):l[f]=c.name}return!1}}function Z7(e,t){return(0,db.isObjectType)(e)||(0,db.isInterfaceType)(e)||(0,db.isInputObjectType)(e)?e.getFields()[t]!=null:!1}});var yb=y(vb=>{"use strict";Object.defineProperty(vb,"__esModule",{value:!0});vb.UniqueFragmentNamesRule=tH;var eH=Q();function tH(e){let t=Object.create(null);return{OperationDefinition:()=>!1,FragmentDefinition(r){let n=r.name.value;return t[n]?e.reportError(new eH.GraphQLError(`There can be only one fragment named "${n}".`,{nodes:[t[n],r.name]})):t[n]=r.name,!1}}}});var Eb=y(gb=>{"use strict";Object.defineProperty(gb,"__esModule",{value:!0});gb.UniqueInputFieldNamesRule=iH;var rH=jt(),nH=Q();function iH(e){let t=[],r=Object.create(null);return{ObjectValue:{enter(){t.push(r),r=Object.create(null)},leave(){let n=t.pop();n||(0,rH.invariant)(!1),r=n}},ObjectField(n){let i=n.name.value;r[i]?e.reportError(new nH.GraphQLError(`There can be only one input field named "${i}".`,{nodes:[r[i],n.name]})):r[i]=n.name}}}});var _b=y(Tb=>{"use strict";Object.defineProperty(Tb,"__esModule",{value:!0});Tb.UniqueOperationNamesRule=aH;var oH=Q();function aH(e){let t=Object.create(null);return{OperationDefinition(r){let n=r.name;return n&&(t[n.value]?e.reportError(new oH.GraphQLError(`There can be only one operation named "${n.value}".`,{nodes:[t[n.value],n]})):t[n.value]=n),!1},FragmentDefinition:()=>!1}}});var Sb=y(bb=>{"use strict";Object.defineProperty(bb,"__esModule",{value:!0});bb.UniqueOperationTypesRule=sH;var rD=Q();function sH(e){let t=e.getSchema(),r=Object.create(null),n=t?{query:t.getQueryType(),mutation:t.getMutationType(),subscription:t.getSubscriptionType()}:{};return{SchemaDefinition:i,SchemaExtension:i};function i(o){var a;let s=(a=o.operationTypes)!==null&&a!==void 0?a:[];for(let u of s){let l=u.operation,c=r[l];n[l]?e.reportError(new rD.GraphQLError(`Type for ${l} already defined in the schema. It cannot be redefined.`,{nodes:u})):c?e.reportError(new rD.GraphQLError(`There can be only one ${l} type in schema.`,{nodes:[c,u]})):r[l]=u}return!1}}});var Ob=y(wb=>{"use strict";Object.defineProperty(wb,"__esModule",{value:!0});wb.UniqueTypeNamesRule=uH;var nD=Q();function uH(e){let t=Object.create(null),r=e.getSchema();return{ScalarTypeDefinition:n,ObjectTypeDefinition:n,InterfaceTypeDefinition:n,UnionTypeDefinition:n,EnumTypeDefinition:n,InputObjectTypeDefinition:n};function n(i){let o=i.name.value;if(r!=null&&r.getType(o)){e.reportError(new nD.GraphQLError(`Type "${o}" already exists in the schema. It cannot also be defined in this type definition.`,{nodes:i.name}));return}return t[o]?e.reportError(new nD.GraphQLError(`There can be only one type named "${o}".`,{nodes:[t[o],i.name]})):t[o]=i.name,!1}}});var Ib=y(Nb=>{"use strict";Object.defineProperty(Nb,"__esModule",{value:!0});Nb.UniqueVariableNamesRule=fH;var lH=Dm(),cH=Q();function fH(e){return{OperationDefinition(t){var r;let n=(r=t.variableDefinitions)!==null&&r!==void 0?r:[],i=(0,lH.groupBy)(n,o=>o.variable.name.value);for(let[o,a]of i)a.length>1&&e.reportError(new cH.GraphQLError(`There can be only one variable named "$${o}".`,{nodes:a.map(s=>s.variable.name)}))}}}});var Lb=y(Rb=>{"use strict";Object.defineProperty(Rb,"__esModule",{value:!0});Rb.ValuesOfCorrectTypeRule=mH;var pH=No(),Yc=ye(),dH=Io(),hH=Ro(),Aa=Q(),Am=Ar(),ni=ae();function mH(e){return{ListValue(t){let r=(0,ni.getNullableType)(e.getParentInputType());if(!(0,ni.isListType)(r))return Da(e,t),!1},ObjectValue(t){let r=(0,ni.getNamedType)(e.getInputType());if(!(0,ni.isInputObjectType)(r))return Da(e,t),!1;let n=(0,dH.keyMap)(t.fields,i=>i.name.value);for(let i of Object.values(r.getFields()))if(!n[i.name]&&(0,ni.isRequiredInputField)(i)){let a=(0,Yc.inspect)(i.type);e.reportError(new Aa.GraphQLError(`Field "${r.name}.${i.name}" of required type "${a}" was not provided.`,{nodes:t}))}},ObjectField(t){let r=(0,ni.getNamedType)(e.getParentInputType());if(!e.getInputType()&&(0,ni.isInputObjectType)(r)){let i=(0,hH.suggestionList)(t.name.value,Object.keys(r.getFields()));e.reportError(new Aa.GraphQLError(`Field "${t.name.value}" is not defined by type "${r.name}".`+(0,pH.didYouMean)(i),{nodes:t}))}},NullValue(t){let r=e.getInputType();(0,ni.isNonNullType)(r)&&e.reportError(new Aa.GraphQLError(`Expected value of type "${(0,Yc.inspect)(r)}", found ${(0,Am.print)(t)}.`,{nodes:t}))},EnumValue:t=>Da(e,t),IntValue:t=>Da(e,t),FloatValue:t=>Da(e,t),StringValue:t=>Da(e,t),BooleanValue:t=>Da(e,t)}}function Da(e,t){let r=e.getInputType();if(!r)return;let n=(0,ni.getNamedType)(r);if(!(0,ni.isLeafType)(n)){let i=(0,Yc.inspect)(r);e.reportError(new Aa.GraphQLError(`Expected value of type "${i}", found ${(0,Am.print)(t)}.`,{nodes:t}));return}try{if(n.parseLiteral(t,void 0)===void 0){let o=(0,Yc.inspect)(r);e.reportError(new Aa.GraphQLError(`Expected value of type "${o}", found ${(0,Am.print)(t)}.`,{nodes:t}))}}catch(i){let o=(0,Yc.inspect)(r);i instanceof Aa.GraphQLError?e.reportError(i):e.reportError(new Aa.GraphQLError(`Expected value of type "${o}", found ${(0,Am.print)(t)}; `+i.message,{nodes:t,originalError:i}))}}});var xb=y(Pb=>{"use strict";Object.defineProperty(Pb,"__esModule",{value:!0});Pb.VariablesAreInputTypesRule=TH;var vH=Q(),yH=Ar(),gH=ae(),EH=ri();function TH(e){return{VariableDefinition(t){let r=(0,EH.typeFromAST)(e.getSchema(),t.type);if(r!==void 0&&!(0,gH.isInputType)(r)){let n=t.variable.name.value,i=(0,yH.print)(t.type);e.reportError(new vH.GraphQLError(`Variable "$${n}" cannot be non-input type "${i}".`,{nodes:t.type}))}}}}});var kb=y(Cb=>{"use strict";Object.defineProperty(Cb,"__esModule",{value:!0});Cb.VariablesInAllowedPositionRule=wH;var iD=ye(),_H=Q(),bH=le(),oD=ae(),aD=Pc(),SH=ri();function wH(e){let t=Object.create(null);return{OperationDefinition:{enter(){t=Object.create(null)},leave(r){let n=e.getRecursiveVariableUsages(r);for(let{node:i,type:o,defaultValue:a}of n){let s=i.name.value,u=t[s];if(u&&o){let l=e.getSchema(),c=(0,SH.typeFromAST)(l,u.type);if(c&&!OH(l,c,u.defaultValue,o,a)){let f=(0,iD.inspect)(c),p=(0,iD.inspect)(o);e.reportError(new _H.GraphQLError(`Variable "$${s}" of type "${f}" used in position expecting type "${p}".`,{nodes:[u,i]}))}}}}},VariableDefinition(r){t[r.variable.name.value]=r}}}function OH(e,t,r,n,i){if((0,oD.isNonNullType)(n)&&!(0,oD.isNonNullType)(t)){if(!(r!=null&&r.kind!==bH.Kind.NULL)&&!(i!==void 0))return!1;let s=n.ofType;return(0,aD.isTypeSubTypeOf)(e,t,s)}return(0,aD.isTypeSubTypeOf)(e,t,n)}});var Db=y(fu=>{"use strict";Object.defineProperty(fu,"__esModule",{value:!0});fu.specifiedSDLRules=fu.specifiedRules=void 0;var NH=t_(),IH=n_(),RH=o_(),sD=a_(),uD=c_(),LH=p_(),lD=m_(),PH=y_(),xH=E_(),CH=__(),kH=S_(),DH=O_(),AH=I_(),jH=j_(),FH=q_(),MH=V_(),cD=$_(),qH=K_(),UH=eb(),VH=nb(),fD=ob(),GH=sb(),pD=cb(),$H=pb(),QH=mb(),KH=yb(),dD=Eb(),BH=_b(),HH=Sb(),zH=Ob(),WH=Ib(),YH=Lb(),XH=xb(),JH=kb(),ZH=Object.freeze([NH.ExecutableDefinitionsRule,BH.UniqueOperationNamesRule,PH.LoneAnonymousOperationRule,UH.SingleFieldSubscriptionsRule,lD.KnownTypeNamesRule,RH.FragmentsOnCompositeTypesRule,XH.VariablesAreInputTypesRule,qH.ScalarLeafsRule,IH.FieldsOnCorrectTypeRule,KH.UniqueFragmentNamesRule,LH.KnownFragmentNamesRule,DH.NoUnusedFragmentsRule,FH.PossibleFragmentSpreadsRule,CH.NoFragmentCyclesRule,WH.UniqueVariableNamesRule,kH.NoUndefinedVariablesRule,AH.NoUnusedVariablesRule,uD.KnownDirectivesRule,pD.UniqueDirectivesPerLocationRule,sD.KnownArgumentNamesRule,fD.UniqueArgumentNamesRule,YH.ValuesOfCorrectTypeRule,cD.ProvidedRequiredArgumentsRule,JH.VariablesInAllowedPositionRule,jH.OverlappingFieldsCanBeMergedRule,dD.UniqueInputFieldNamesRule]);fu.specifiedRules=ZH;var ez=Object.freeze([xH.LoneSchemaDefinitionRule,HH.UniqueOperationTypesRule,zH.UniqueTypeNamesRule,$H.UniqueEnumValueNamesRule,QH.UniqueFieldDefinitionNamesRule,VH.UniqueArgumentDefinitionNamesRule,GH.UniqueDirectiveNamesRule,lD.KnownTypeNamesRule,uD.KnownDirectivesRule,pD.UniqueDirectivesPerLocationRule,MH.PossibleTypeExtensionsRule,sD.KnownArgumentNamesOnDirectivesRule,fD.UniqueArgumentNamesRule,dD.UniqueInputFieldNamesRule,cD.ProvidedRequiredArgumentsOnDirectivesRule]);fu.specifiedSDLRules=ez});var Fb=y(ko=>{"use strict";Object.defineProperty(ko,"__esModule",{value:!0});ko.ValidationContext=ko.SDLValidationContext=ko.ASTValidationContext=void 0;var hD=le(),tz=Sa(),mD=bm(),Xc=class{constructor(t,r){this._ast=t,this._fragments=void 0,this._fragmentSpreads=new Map,this._recursivelyReferencedFragments=new Map,this._onError=r}get[Symbol.toStringTag](){return"ASTValidationContext"}reportError(t){this._onError(t)}getDocument(){return this._ast}getFragment(t){let r;if(this._fragments)r=this._fragments;else{r=Object.create(null);for(let n of this.getDocument().definitions)n.kind===hD.Kind.FRAGMENT_DEFINITION&&(r[n.name.value]=n);this._fragments=r}return r[t]}getFragmentSpreads(t){let r=this._fragmentSpreads.get(t);if(!r){r=[];let n=[t],i;for(;i=n.pop();)for(let o of i.selections)o.kind===hD.Kind.FRAGMENT_SPREAD?r.push(o):o.selectionSet&&n.push(o.selectionSet);this._fragmentSpreads.set(t,r)}return r}getRecursivelyReferencedFragments(t){let r=this._recursivelyReferencedFragments.get(t);if(!r){r=[];let n=Object.create(null),i=[t.selectionSet],o;for(;o=i.pop();)for(let a of this.getFragmentSpreads(o)){let s=a.name.value;if(n[s]!==!0){n[s]=!0;let u=this.getFragment(s);u&&(r.push(u),i.push(u.selectionSet))}}this._recursivelyReferencedFragments.set(t,r)}return r}};ko.ASTValidationContext=Xc;var Ab=class extends Xc{constructor(t,r,n){super(t,n),this._schema=r}get[Symbol.toStringTag](){return"SDLValidationContext"}getSchema(){return this._schema}};ko.SDLValidationContext=Ab;var jb=class extends Xc{constructor(t,r,n,i){super(r,i),this._schema=t,this._typeInfo=n,this._variableUsages=new Map,this._recursiveVariableUsages=new Map}get[Symbol.toStringTag](){return"ValidationContext"}getSchema(){return this._schema}getVariableUsages(t){let r=this._variableUsages.get(t);if(!r){let n=[],i=new mD.TypeInfo(this._schema);(0,tz.visit)(t,(0,mD.visitWithTypeInfo)(i,{VariableDefinition:()=>!1,Variable(o){n.push({node:o,type:i.getInputType(),defaultValue:i.getDefaultValue()})}})),r=n,this._variableUsages.set(t,r)}return r}getRecursiveVariableUsages(t){let r=this._recursiveVariableUsages.get(t);if(!r){r=this.getVariableUsages(t);for(let n of this.getRecursivelyReferencedFragments(t))r=r.concat(this.getVariableUsages(n));this._recursiveVariableUsages.set(t,r)}return r}getType(){return this._typeInfo.getType()}getParentType(){return this._typeInfo.getParentType()}getInputType(){return this._typeInfo.getInputType()}getParentInputType(){return this._typeInfo.getParentInputType()}getFieldDef(){return this._typeInfo.getFieldDef()}getDirective(){return this._typeInfo.getDirective()}getArgument(){return this._typeInfo.getArgument()}getEnumValue(){return this._typeInfo.getEnumValue()}};ko.ValidationContext=jb});var Jc=y(pu=>{"use strict";Object.defineProperty(pu,"__esModule",{value:!0});pu.assertValidSDL=az;pu.assertValidSDLExtension=sz;pu.validate=oz;pu.validateSDL=Mb;var rz=Zt(),nz=Q(),jm=Sa(),iz=Uc(),vD=bm(),yD=Db(),gD=Fb();function oz(e,t,r=yD.specifiedRules,n,i=new vD.TypeInfo(e)){var o;let a=(o=n?.maxErrors)!==null&&o!==void 0?o:100;t||(0,rz.devAssert)(!1,"Must provide document."),(0,iz.assertValidSchema)(e);let s=Object.freeze({}),u=[],l=new gD.ValidationContext(e,t,i,f=>{if(u.length>=a)throw u.push(new nz.GraphQLError("Too many validation errors, error limit reached. Validation aborted.")),s;u.push(f)}),c=(0,jm.visitInParallel)(r.map(f=>f(l)));try{(0,jm.visit)(t,(0,vD.visitWithTypeInfo)(i,c))}catch(f){if(f!==s)throw f}return u}function Mb(e,t,r=yD.specifiedSDLRules){let n=[],i=new gD.SDLValidationContext(e,t,a=>{n.push(a)}),o=r.map(a=>a(i));return(0,jm.visit)(e,(0,jm.visitInParallel)(o)),n}function az(e){let t=Mb(e);if(t.length!==0)throw new Error(t.map(r=>r.message).join(`

`))}function sz(e,t){let r=Mb(e,t);if(r.length!==0)throw new Error(r.map(n=>n.message).join(`

`))}});var ED=y(qb=>{"use strict";Object.defineProperty(qb,"__esModule",{value:!0});qb.memoize3=uz;function uz(e){let t;return function(n,i,o){t===void 0&&(t=new WeakMap);let a=t.get(n);a===void 0&&(a=new WeakMap,t.set(n,a));let s=a.get(i);s===void 0&&(s=new WeakMap,a.set(i,s));let u=s.get(o);return u===void 0&&(u=e(n,i,o),s.set(o,u)),u}}});var TD=y(Ub=>{"use strict";Object.defineProperty(Ub,"__esModule",{value:!0});Ub.promiseForObject=lz;function lz(e){return Promise.all(Object.values(e)).then(t=>{let r=Object.create(null);for(let[n,i]of Object.keys(e).entries())r[i]=t[n];return r})}});var _D=y(Vb=>{"use strict";Object.defineProperty(Vb,"__esModule",{value:!0});Vb.promiseReduce=fz;var cz=Mh();function fz(e,t,r){let n=r;for(let i of e)n=(0,cz.isPromise)(n)?n.then(o=>t(o,i)):t(n,i);return n}});var bD=y($b=>{"use strict";Object.defineProperty($b,"__esModule",{value:!0});$b.toError=dz;var pz=ye();function dz(e){return e instanceof Error?e:new Gb(e)}var Gb=class extends Error{constructor(t){super("Unexpected error value: "+(0,pz.inspect)(t)),this.name="NonErrorThrown",this.thrownValue=t}}});var Fm=y(Qb=>{"use strict";Object.defineProperty(Qb,"__esModule",{value:!0});Qb.locatedError=vz;var hz=bD(),mz=Q();function vz(e,t,r){var n;let i=(0,hz.toError)(e);return yz(i)?i:new mz.GraphQLError(i.message,{nodes:(n=i.nodes)!==null&&n!==void 0?n:t,source:i.source,positions:i.positions,path:r,originalError:i})}function yz(e){return Array.isArray(e.path)}});var ef=y(nn=>{"use strict";Object.defineProperty(nn,"__esModule",{value:!0});nn.assertValidExecutionArguments=LD;nn.buildExecutionContext=PD;nn.buildResolveInfo=CD;nn.defaultTypeResolver=nn.defaultFieldResolver=void 0;nn.execute=RD;nn.executeSync=Oz;nn.getFieldDef=DD;var Bb=Zt(),ja=ye(),gz=jt(),Ez=gm(),Wb=Xn(),In=Mh(),Tz=ED(),Fa=Qc(),_z=TD(),bz=_D(),rn=Q(),qm=Fm(),Kb=Jn(),SD=le(),Do=ae(),du=en(),Sz=Uc(),ND=km(),ID=cu(),wz=(0,Tz.memoize3)((e,t,r)=>(0,ND.collectSubfields)(e.schema,e.fragments,e.variableValues,t,r));function RD(e){arguments.length<2||(0,Bb.devAssert)(!1,"graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.");let{schema:t,document:r,variableValues:n,rootValue:i}=e;LD(t,r,n);let o=PD(e);if(!("schema"in o))return{errors:o};try{let{operation:a}=o,s=Nz(o,a,i);return(0,In.isPromise)(s)?s.then(u=>Mm(u,o.errors),u=>(o.errors.push(u),Mm(null,o.errors))):Mm(s,o.errors)}catch(a){return o.errors.push(a),Mm(null,o.errors)}}function Oz(e){let t=RD(e);if((0,In.isPromise)(t))throw new Error("GraphQL execution failed to complete synchronously.");return t}function Mm(e,t){return t.length===0?{data:e}:{errors:t,data:e}}function LD(e,t,r){t||(0,Bb.devAssert)(!1,"Must provide document."),(0,Sz.assertValidSchema)(e),r==null||(0,Wb.isObjectLike)(r)||(0,Bb.devAssert)(!1,"Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.")}function PD(e){var t,r;let{schema:n,document:i,rootValue:o,contextValue:a,variableValues:s,operationName:u,fieldResolver:l,typeResolver:c,subscribeFieldResolver:f}=e,p,d=Object.create(null);for(let b of i.definitions)switch(b.kind){case SD.Kind.OPERATION_DEFINITION:if(u==null){if(p!==void 0)return[new rn.GraphQLError("Must provide operation name if query contains multiple operations.")];p=b}else((t=b.name)===null||t===void 0?void 0:t.value)===u&&(p=b);break;case SD.Kind.FRAGMENT_DEFINITION:d[b.name.value]=b;break;default:}if(!p)return u!=null?[new rn.GraphQLError(`Unknown operation named "${u}".`)]:[new rn.GraphQLError("Must provide an operation.")];let m=(r=p.variableDefinitions)!==null&&r!==void 0?r:[],E=(0,ID.getVariableValues)(n,m,s??{},{maxErrors:50});return E.errors?E.errors:{schema:n,fragments:d,rootValue:o,contextValue:a,operation:p,variableValues:E.coerced,fieldResolver:l??zb,typeResolver:c??kD,subscribeFieldResolver:f??zb,errors:[]}}function Nz(e,t,r){let n=e.schema.getRootType(t.operation);if(n==null)throw new rn.GraphQLError(`Schema is not configured to execute ${t.operation} operation.`,{nodes:t});let i=(0,ND.collectFields)(e.schema,e.fragments,e.variableValues,n,t.selectionSet),o=void 0;switch(t.operation){case Kb.OperationTypeNode.QUERY:return Um(e,n,r,o,i);case Kb.OperationTypeNode.MUTATION:return Iz(e,n,r,o,i);case Kb.OperationTypeNode.SUBSCRIPTION:return Um(e,n,r,o,i)}}function Iz(e,t,r,n,i){return(0,bz.promiseReduce)(i.entries(),(o,[a,s])=>{let u=(0,Fa.addPath)(n,a,t.name),l=xD(e,t,r,s,u);return l===void 0?o:(0,In.isPromise)(l)?l.then(c=>(o[a]=c,o)):(o[a]=l,o)},Object.create(null))}function Um(e,t,r,n,i){let o=Object.create(null),a=!1;for(let[s,u]of i.entries()){let l=(0,Fa.addPath)(n,s,t.name),c=xD(e,t,r,u,l);c!==void 0&&(o[s]=c,(0,In.isPromise)(c)&&(a=!0))}return a?(0,_z.promiseForObject)(o):o}function xD(e,t,r,n,i){var o;let a=DD(e.schema,t,n[0]);if(!a)return;let s=a.type,u=(o=a.resolve)!==null&&o!==void 0?o:e.fieldResolver,l=CD(e,a,n,t,i);try{let c=(0,ID.getArgumentValues)(a,n[0],e.variableValues),f=e.contextValue,p=u(r,c,f,l),d;return(0,In.isPromise)(p)?d=p.then(m=>Zc(e,s,n,l,i,m)):d=Zc(e,s,n,l,i,p),(0,In.isPromise)(d)?d.then(void 0,m=>{let E=(0,qm.locatedError)(m,n,(0,Fa.pathToArray)(i));return Vm(E,s,e)}):d}catch(c){let f=(0,qm.locatedError)(c,n,(0,Fa.pathToArray)(i));return Vm(f,s,e)}}function CD(e,t,r,n,i){return{fieldName:t.name,fieldNodes:r,returnType:t.type,parentType:n,path:i,schema:e.schema,fragments:e.fragments,rootValue:e.rootValue,operation:e.operation,variableValues:e.variableValues}}function Vm(e,t,r){if((0,Do.isNonNullType)(t))throw e;return r.errors.push(e),null}function Zc(e,t,r,n,i,o){if(o instanceof Error)throw o;if((0,Do.isNonNullType)(t)){let a=Zc(e,t.ofType,r,n,i,o);if(a===null)throw new Error(`Cannot return null for non-nullable field ${n.parentType.name}.${n.fieldName}.`);return a}if(o==null)return null;if((0,Do.isListType)(t))return Rz(e,t,r,n,i,o);if((0,Do.isLeafType)(t))return Lz(t,o);if((0,Do.isAbstractType)(t))return Pz(e,t,r,n,i,o);if((0,Do.isObjectType)(t))return Hb(e,t,r,n,i,o);(0,gz.invariant)(!1,"Cannot complete value of unexpected output type: "+(0,ja.inspect)(t))}function Rz(e,t,r,n,i,o){if(!(0,Ez.isIterableObject)(o))throw new rn.GraphQLError(`Expected Iterable, but did not find one for field "${n.parentType.name}.${n.fieldName}".`);let a=t.ofType,s=!1,u=Array.from(o,(l,c)=>{let f=(0,Fa.addPath)(i,c,void 0);try{let p;return(0,In.isPromise)(l)?p=l.then(d=>Zc(e,a,r,n,f,d)):p=Zc(e,a,r,n,f,l),(0,In.isPromise)(p)?(s=!0,p.then(void 0,d=>{let m=(0,qm.locatedError)(d,r,(0,Fa.pathToArray)(f));return Vm(m,a,e)})):p}catch(p){let d=(0,qm.locatedError)(p,r,(0,Fa.pathToArray)(f));return Vm(d,a,e)}});return s?Promise.all(u):u}function Lz(e,t){let r=e.serialize(t);if(r==null)throw new Error(`Expected \`${(0,ja.inspect)(e)}.serialize(${(0,ja.inspect)(t)})\` to return non-nullable value, returned: ${(0,ja.inspect)(r)}`);return r}function Pz(e,t,r,n,i,o){var a;let s=(a=t.resolveType)!==null&&a!==void 0?a:e.typeResolver,u=e.contextValue,l=s(o,u,n,t);return(0,In.isPromise)(l)?l.then(c=>Hb(e,wD(c,e,t,r,n,o),r,n,i,o)):Hb(e,wD(l,e,t,r,n,o),r,n,i,o)}function wD(e,t,r,n,i,o){if(e==null)throw new rn.GraphQLError(`Abstract type "${r.name}" must resolve to an Object type at runtime for field "${i.parentType.name}.${i.fieldName}". Either the "${r.name}" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.`,n);if((0,Do.isObjectType)(e))throw new rn.GraphQLError("Support for returning GraphQLObjectType from resolveType was removed in graphql-js@16.0.0 please return type name instead.");if(typeof e!="string")throw new rn.GraphQLError(`Abstract type "${r.name}" must resolve to an Object type at runtime for field "${i.parentType.name}.${i.fieldName}" with value ${(0,ja.inspect)(o)}, received "${(0,ja.inspect)(e)}".`);let a=t.schema.getType(e);if(a==null)throw new rn.GraphQLError(`Abstract type "${r.name}" was resolved to a type "${e}" that does not exist inside the schema.`,{nodes:n});if(!(0,Do.isObjectType)(a))throw new rn.GraphQLError(`Abstract type "${r.name}" was resolved to a non-object type "${e}".`,{nodes:n});if(!t.schema.isSubType(r,a))throw new rn.GraphQLError(`Runtime Object type "${a.name}" is not a possible type for "${r.name}".`,{nodes:n});return a}function Hb(e,t,r,n,i,o){let a=wz(e,t,r);if(t.isTypeOf){let s=t.isTypeOf(o,e.contextValue,n);if((0,In.isPromise)(s))return s.then(u=>{if(!u)throw OD(t,o,r);return Um(e,t,o,i,a)});if(!s)throw OD(t,o,r)}return Um(e,t,o,i,a)}function OD(e,t,r){return new rn.GraphQLError(`Expected value of type "${e.name}" but got: ${(0,ja.inspect)(t)}.`,{nodes:r})}var kD=function(e,t,r,n){if((0,Wb.isObjectLike)(e)&&typeof e.__typename=="string")return e.__typename;let i=r.schema.getPossibleTypes(n),o=[];for(let a=0;a<i.length;a++){let s=i[a];if(s.isTypeOf){let u=s.isTypeOf(e,t,r);if((0,In.isPromise)(u))o[a]=u;else if(u)return s.name}}if(o.length)return Promise.all(o).then(a=>{for(let s=0;s<a.length;s++)if(a[s])return i[s].name})};nn.defaultTypeResolver=kD;var zb=function(e,t,r,n){if((0,Wb.isObjectLike)(e)||typeof e=="function"){let i=e[n.fieldName];return typeof i=="function"?e[n.fieldName](t,r,n):i}};nn.defaultFieldResolver=zb;function DD(e,t,r){let n=r.name.value;return n===du.SchemaMetaFieldDef.name&&e.getQueryType()===t?du.SchemaMetaFieldDef:n===du.TypeMetaFieldDef.name&&e.getQueryType()===t?du.TypeMetaFieldDef:n===du.TypeNameMetaFieldDef.name?du.TypeNameMetaFieldDef:t.getFields()[n]}});var jD=y(Gm=>{"use strict";Object.defineProperty(Gm,"__esModule",{value:!0});Gm.graphql=Fz;Gm.graphqlSync=Mz;var xz=Zt(),Cz=Mh(),kz=eu(),Dz=Uc(),Az=Jc(),jz=ef();function Fz(e){return new Promise(t=>t(AD(e)))}function Mz(e){let t=AD(e);if((0,Cz.isPromise)(t))throw new Error("GraphQL execution failed to complete synchronously.");return t}function AD(e){arguments.length<2||(0,xz.devAssert)(!1,"graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.");let{schema:t,source:r,rootValue:n,contextValue:i,variableValues:o,operationName:a,fieldResolver:s,typeResolver:u}=e,l=(0,Dz.validateSchema)(t);if(l.length>0)return{errors:l};let c;try{c=(0,kz.parse)(r)}catch(p){return{errors:[p]}}let f=(0,Az.validate)(t,c);return f.length>0?{errors:f}:(0,jz.execute)({schema:t,document:c,rootValue:n,contextValue:i,variableValues:o,operationName:a,fieldResolver:s,typeResolver:u})}});var qD=y(x=>{"use strict";Object.defineProperty(x,"__esModule",{value:!0});Object.defineProperty(x,"DEFAULT_DEPRECATION_REASON",{enumerable:!0,get:function(){return ii.DEFAULT_DEPRECATION_REASON}});Object.defineProperty(x,"GRAPHQL_MAX_INT",{enumerable:!0,get:function(){return ki.GRAPHQL_MAX_INT}});Object.defineProperty(x,"GRAPHQL_MIN_INT",{enumerable:!0,get:function(){return ki.GRAPHQL_MIN_INT}});Object.defineProperty(x,"GraphQLBoolean",{enumerable:!0,get:function(){return ki.GraphQLBoolean}});Object.defineProperty(x,"GraphQLDeprecatedDirective",{enumerable:!0,get:function(){return ii.GraphQLDeprecatedDirective}});Object.defineProperty(x,"GraphQLDirective",{enumerable:!0,get:function(){return ii.GraphQLDirective}});Object.defineProperty(x,"GraphQLEnumType",{enumerable:!0,get:function(){return K.GraphQLEnumType}});Object.defineProperty(x,"GraphQLFloat",{enumerable:!0,get:function(){return ki.GraphQLFloat}});Object.defineProperty(x,"GraphQLID",{enumerable:!0,get:function(){return ki.GraphQLID}});Object.defineProperty(x,"GraphQLIncludeDirective",{enumerable:!0,get:function(){return ii.GraphQLIncludeDirective}});Object.defineProperty(x,"GraphQLInputObjectType",{enumerable:!0,get:function(){return K.GraphQLInputObjectType}});Object.defineProperty(x,"GraphQLInt",{enumerable:!0,get:function(){return ki.GraphQLInt}});Object.defineProperty(x,"GraphQLInterfaceType",{enumerable:!0,get:function(){return K.GraphQLInterfaceType}});Object.defineProperty(x,"GraphQLList",{enumerable:!0,get:function(){return K.GraphQLList}});Object.defineProperty(x,"GraphQLNonNull",{enumerable:!0,get:function(){return K.GraphQLNonNull}});Object.defineProperty(x,"GraphQLObjectType",{enumerable:!0,get:function(){return K.GraphQLObjectType}});Object.defineProperty(x,"GraphQLScalarType",{enumerable:!0,get:function(){return K.GraphQLScalarType}});Object.defineProperty(x,"GraphQLSchema",{enumerable:!0,get:function(){return Yb.GraphQLSchema}});Object.defineProperty(x,"GraphQLSkipDirective",{enumerable:!0,get:function(){return ii.GraphQLSkipDirective}});Object.defineProperty(x,"GraphQLSpecifiedByDirective",{enumerable:!0,get:function(){return ii.GraphQLSpecifiedByDirective}});Object.defineProperty(x,"GraphQLString",{enumerable:!0,get:function(){return ki.GraphQLString}});Object.defineProperty(x,"GraphQLUnionType",{enumerable:!0,get:function(){return K.GraphQLUnionType}});Object.defineProperty(x,"SchemaMetaFieldDef",{enumerable:!0,get:function(){return hr.SchemaMetaFieldDef}});Object.defineProperty(x,"TypeKind",{enumerable:!0,get:function(){return hr.TypeKind}});Object.defineProperty(x,"TypeMetaFieldDef",{enumerable:!0,get:function(){return hr.TypeMetaFieldDef}});Object.defineProperty(x,"TypeNameMetaFieldDef",{enumerable:!0,get:function(){return hr.TypeNameMetaFieldDef}});Object.defineProperty(x,"__Directive",{enumerable:!0,get:function(){return hr.__Directive}});Object.defineProperty(x,"__DirectiveLocation",{enumerable:!0,get:function(){return hr.__DirectiveLocation}});Object.defineProperty(x,"__EnumValue",{enumerable:!0,get:function(){return hr.__EnumValue}});Object.defineProperty(x,"__Field",{enumerable:!0,get:function(){return hr.__Field}});Object.defineProperty(x,"__InputValue",{enumerable:!0,get:function(){return hr.__InputValue}});Object.defineProperty(x,"__Schema",{enumerable:!0,get:function(){return hr.__Schema}});Object.defineProperty(x,"__Type",{enumerable:!0,get:function(){return hr.__Type}});Object.defineProperty(x,"__TypeKind",{enumerable:!0,get:function(){return hr.__TypeKind}});Object.defineProperty(x,"assertAbstractType",{enumerable:!0,get:function(){return K.assertAbstractType}});Object.defineProperty(x,"assertCompositeType",{enumerable:!0,get:function(){return K.assertCompositeType}});Object.defineProperty(x,"assertDirective",{enumerable:!0,get:function(){return ii.assertDirective}});Object.defineProperty(x,"assertEnumType",{enumerable:!0,get:function(){return K.assertEnumType}});Object.defineProperty(x,"assertEnumValueName",{enumerable:!0,get:function(){return MD.assertEnumValueName}});Object.defineProperty(x,"assertInputObjectType",{enumerable:!0,get:function(){return K.assertInputObjectType}});Object.defineProperty(x,"assertInputType",{enumerable:!0,get:function(){return K.assertInputType}});Object.defineProperty(x,"assertInterfaceType",{enumerable:!0,get:function(){return K.assertInterfaceType}});Object.defineProperty(x,"assertLeafType",{enumerable:!0,get:function(){return K.assertLeafType}});Object.defineProperty(x,"assertListType",{enumerable:!0,get:function(){return K.assertListType}});Object.defineProperty(x,"assertName",{enumerable:!0,get:function(){return MD.assertName}});Object.defineProperty(x,"assertNamedType",{enumerable:!0,get:function(){return K.assertNamedType}});Object.defineProperty(x,"assertNonNullType",{enumerable:!0,get:function(){return K.assertNonNullType}});Object.defineProperty(x,"assertNullableType",{enumerable:!0,get:function(){return K.assertNullableType}});Object.defineProperty(x,"assertObjectType",{enumerable:!0,get:function(){return K.assertObjectType}});Object.defineProperty(x,"assertOutputType",{enumerable:!0,get:function(){return K.assertOutputType}});Object.defineProperty(x,"assertScalarType",{enumerable:!0,get:function(){return K.assertScalarType}});Object.defineProperty(x,"assertSchema",{enumerable:!0,get:function(){return Yb.assertSchema}});Object.defineProperty(x,"assertType",{enumerable:!0,get:function(){return K.assertType}});Object.defineProperty(x,"assertUnionType",{enumerable:!0,get:function(){return K.assertUnionType}});Object.defineProperty(x,"assertValidSchema",{enumerable:!0,get:function(){return FD.assertValidSchema}});Object.defineProperty(x,"assertWrappingType",{enumerable:!0,get:function(){return K.assertWrappingType}});Object.defineProperty(x,"getNamedType",{enumerable:!0,get:function(){return K.getNamedType}});Object.defineProperty(x,"getNullableType",{enumerable:!0,get:function(){return K.getNullableType}});Object.defineProperty(x,"introspectionTypes",{enumerable:!0,get:function(){return hr.introspectionTypes}});Object.defineProperty(x,"isAbstractType",{enumerable:!0,get:function(){return K.isAbstractType}});Object.defineProperty(x,"isCompositeType",{enumerable:!0,get:function(){return K.isCompositeType}});Object.defineProperty(x,"isDirective",{enumerable:!0,get:function(){return ii.isDirective}});Object.defineProperty(x,"isEnumType",{enumerable:!0,get:function(){return K.isEnumType}});Object.defineProperty(x,"isInputObjectType",{enumerable:!0,get:function(){return K.isInputObjectType}});Object.defineProperty(x,"isInputType",{enumerable:!0,get:function(){return K.isInputType}});Object.defineProperty(x,"isInterfaceType",{enumerable:!0,get:function(){return K.isInterfaceType}});Object.defineProperty(x,"isIntrospectionType",{enumerable:!0,get:function(){return hr.isIntrospectionType}});Object.defineProperty(x,"isLeafType",{enumerable:!0,get:function(){return K.isLeafType}});Object.defineProperty(x,"isListType",{enumerable:!0,get:function(){return K.isListType}});Object.defineProperty(x,"isNamedType",{enumerable:!0,get:function(){return K.isNamedType}});Object.defineProperty(x,"isNonNullType",{enumerable:!0,get:function(){return K.isNonNullType}});Object.defineProperty(x,"isNullableType",{enumerable:!0,get:function(){return K.isNullableType}});Object.defineProperty(x,"isObjectType",{enumerable:!0,get:function(){return K.isObjectType}});Object.defineProperty(x,"isOutputType",{enumerable:!0,get:function(){return K.isOutputType}});Object.defineProperty(x,"isRequiredArgument",{enumerable:!0,get:function(){return K.isRequiredArgument}});Object.defineProperty(x,"isRequiredInputField",{enumerable:!0,get:function(){return K.isRequiredInputField}});Object.defineProperty(x,"isScalarType",{enumerable:!0,get:function(){return K.isScalarType}});Object.defineProperty(x,"isSchema",{enumerable:!0,get:function(){return Yb.isSchema}});Object.defineProperty(x,"isSpecifiedDirective",{enumerable:!0,get:function(){return ii.isSpecifiedDirective}});Object.defineProperty(x,"isSpecifiedScalarType",{enumerable:!0,get:function(){return ki.isSpecifiedScalarType}});Object.defineProperty(x,"isType",{enumerable:!0,get:function(){return K.isType}});Object.defineProperty(x,"isUnionType",{enumerable:!0,get:function(){return K.isUnionType}});Object.defineProperty(x,"isWrappingType",{enumerable:!0,get:function(){return K.isWrappingType}});Object.defineProperty(x,"resolveObjMapThunk",{enumerable:!0,get:function(){return K.resolveObjMapThunk}});Object.defineProperty(x,"resolveReadonlyArrayThunk",{enumerable:!0,get:function(){return K.resolveReadonlyArrayThunk}});Object.defineProperty(x,"specifiedDirectives",{enumerable:!0,get:function(){return ii.specifiedDirectives}});Object.defineProperty(x,"specifiedScalarTypes",{enumerable:!0,get:function(){return ki.specifiedScalarTypes}});Object.defineProperty(x,"validateSchema",{enumerable:!0,get:function(){return FD.validateSchema}});var Yb=La(),K=ae(),ii=pr(),ki=ti(),hr=en(),FD=Uc(),MD=Oc()});var VD=y(ce=>{"use strict";Object.defineProperty(ce,"__esModule",{value:!0});Object.defineProperty(ce,"BREAK",{enumerable:!0,get:function(){return tf.BREAK}});Object.defineProperty(ce,"DirectiveLocation",{enumerable:!0,get:function(){return Kz.DirectiveLocation}});Object.defineProperty(ce,"Kind",{enumerable:!0,get:function(){return Vz.Kind}});Object.defineProperty(ce,"Lexer",{enumerable:!0,get:function(){return $z.Lexer}});Object.defineProperty(ce,"Location",{enumerable:!0,get:function(){return Xb.Location}});Object.defineProperty(ce,"OperationTypeNode",{enumerable:!0,get:function(){return Xb.OperationTypeNode}});Object.defineProperty(ce,"Source",{enumerable:!0,get:function(){return qz.Source}});Object.defineProperty(ce,"Token",{enumerable:!0,get:function(){return Xb.Token}});Object.defineProperty(ce,"TokenKind",{enumerable:!0,get:function(){return Gz.TokenKind}});Object.defineProperty(ce,"getEnterLeaveForKind",{enumerable:!0,get:function(){return tf.getEnterLeaveForKind}});Object.defineProperty(ce,"getLocation",{enumerable:!0,get:function(){return Uz.getLocation}});Object.defineProperty(ce,"getVisitFn",{enumerable:!0,get:function(){return tf.getVisitFn}});Object.defineProperty(ce,"isConstValueNode",{enumerable:!0,get:function(){return oi.isConstValueNode}});Object.defineProperty(ce,"isDefinitionNode",{enumerable:!0,get:function(){return oi.isDefinitionNode}});Object.defineProperty(ce,"isExecutableDefinitionNode",{enumerable:!0,get:function(){return oi.isExecutableDefinitionNode}});Object.defineProperty(ce,"isSelectionNode",{enumerable:!0,get:function(){return oi.isSelectionNode}});Object.defineProperty(ce,"isTypeDefinitionNode",{enumerable:!0,get:function(){return oi.isTypeDefinitionNode}});Object.defineProperty(ce,"isTypeExtensionNode",{enumerable:!0,get:function(){return oi.isTypeExtensionNode}});Object.defineProperty(ce,"isTypeNode",{enumerable:!0,get:function(){return oi.isTypeNode}});Object.defineProperty(ce,"isTypeSystemDefinitionNode",{enumerable:!0,get:function(){return oi.isTypeSystemDefinitionNode}});Object.defineProperty(ce,"isTypeSystemExtensionNode",{enumerable:!0,get:function(){return oi.isTypeSystemExtensionNode}});Object.defineProperty(ce,"isValueNode",{enumerable:!0,get:function(){return oi.isValueNode}});Object.defineProperty(ce,"parse",{enumerable:!0,get:function(){return $m.parse}});Object.defineProperty(ce,"parseConstValue",{enumerable:!0,get:function(){return $m.parseConstValue}});Object.defineProperty(ce,"parseType",{enumerable:!0,get:function(){return $m.parseType}});Object.defineProperty(ce,"parseValue",{enumerable:!0,get:function(){return $m.parseValue}});Object.defineProperty(ce,"print",{enumerable:!0,get:function(){return Qz.print}});Object.defineProperty(ce,"printLocation",{enumerable:!0,get:function(){return UD.printLocation}});Object.defineProperty(ce,"printSourceLocation",{enumerable:!0,get:function(){return UD.printSourceLocation}});Object.defineProperty(ce,"visit",{enumerable:!0,get:function(){return tf.visit}});Object.defineProperty(ce,"visitInParallel",{enumerable:!0,get:function(){return tf.visitInParallel}});var qz=zh(),Uz=qh(),UD=JE(),Vz=le(),Gz=yc(),$z=Qh(),$m=eu(),Qz=Ar(),tf=Sa(),Xb=Jn(),oi=xa(),Kz=Xs()});var GD=y(Jb=>{"use strict";Object.defineProperty(Jb,"__esModule",{value:!0});Jb.isAsyncIterable=Bz;function Bz(e){return typeof e?.[Symbol.asyncIterator]=="function"}});var $D=y(Zb=>{"use strict";Object.defineProperty(Zb,"__esModule",{value:!0});Zb.mapAsyncIterator=Hz;function Hz(e,t){let r=e[Symbol.asyncIterator]();async function n(i){if(i.done)return i;try{return{value:await t(i.value),done:!1}}catch(o){if(typeof r.return=="function")try{await r.return()}catch{}throw o}}return{async next(){return n(await r.next())},async return(){return typeof r.return=="function"?n(await r.return()):{value:void 0,done:!0}},async throw(i){if(typeof r.throw=="function")return n(await r.throw(i));throw i},[Symbol.asyncIterator](){return this}}}});var HD=y(Qm=>{"use strict";Object.defineProperty(Qm,"__esModule",{value:!0});Qm.createSourceEventStream=BD;Qm.subscribe=e5;var zz=Zt(),Wz=ye(),KD=GD(),QD=Qc(),eS=Q(),Yz=Fm(),Xz=km(),rf=ef(),Jz=$D(),Zz=cu();async function e5(e){arguments.length<2||(0,zz.devAssert)(!1,"graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.");let{schema:t,document:r,rootValue:n,contextValue:i,variableValues:o,operationName:a,fieldResolver:s,subscribeFieldResolver:u}=e,l=await BD(t,r,n,i,o,a,u);if(!(0,KD.isAsyncIterable)(l))return l;let c=f=>(0,rf.execute)({schema:t,document:r,rootValue:f,contextValue:i,variableValues:o,operationName:a,fieldResolver:s});return(0,Jz.mapAsyncIterator)(l,c)}async function BD(e,t,r,n,i,o,a){(0,rf.assertValidExecutionArguments)(e,t,i);let s=(0,rf.buildExecutionContext)({schema:e,document:t,rootValue:r,contextValue:n,variableValues:i,operationName:o,subscribeFieldResolver:a});if(!("schema"in s))return{errors:s};try{let u=await t5(s);if(!(0,KD.isAsyncIterable)(u))throw new Error(`Subscription field must return Async Iterable. Received: ${(0,Wz.inspect)(u)}.`);return u}catch(u){if(u instanceof eS.GraphQLError)return{errors:[u]};throw u}}async function t5(e){let{schema:t,fragments:r,operation:n,variableValues:i,rootValue:o}=e,a=t.getSubscriptionType();if(a==null)throw new eS.GraphQLError("Schema is not configured to execute subscription operation.",{nodes:n});let s=(0,Xz.collectFields)(t,r,i,a,n.selectionSet),[u,l]=[...s.entries()][0],c=(0,rf.getFieldDef)(t,a,l[0]);if(!c){let m=l[0].name.value;throw new eS.GraphQLError(`The subscription field "${m}" is not defined.`,{nodes:l})}let f=(0,QD.addPath)(void 0,u,a.name),p=(0,rf.buildResolveInfo)(e,c,l,a,f);try{var d;let m=(0,Zz.getArgumentValues)(c,l[0],i),E=e.contextValue,h=await((d=c.subscribe)!==null&&d!==void 0?d:e.subscribeFieldResolver)(o,m,E,p);if(h instanceof Error)throw h;return h}catch(m){throw(0,Yz.locatedError)(m,l,(0,QD.pathToArray)(f))}}});var WD=y(on=>{"use strict";Object.defineProperty(on,"__esModule",{value:!0});Object.defineProperty(on,"createSourceEventStream",{enumerable:!0,get:function(){return zD.createSourceEventStream}});Object.defineProperty(on,"defaultFieldResolver",{enumerable:!0,get:function(){return Km.defaultFieldResolver}});Object.defineProperty(on,"defaultTypeResolver",{enumerable:!0,get:function(){return Km.defaultTypeResolver}});Object.defineProperty(on,"execute",{enumerable:!0,get:function(){return Km.execute}});Object.defineProperty(on,"executeSync",{enumerable:!0,get:function(){return Km.executeSync}});Object.defineProperty(on,"getArgumentValues",{enumerable:!0,get:function(){return tS.getArgumentValues}});Object.defineProperty(on,"getDirectiveValues",{enumerable:!0,get:function(){return tS.getDirectiveValues}});Object.defineProperty(on,"getVariableValues",{enumerable:!0,get:function(){return tS.getVariableValues}});Object.defineProperty(on,"responsePathAsArray",{enumerable:!0,get:function(){return r5.pathToArray}});Object.defineProperty(on,"subscribe",{enumerable:!0,get:function(){return zD.subscribe}});var r5=Qc(),Km=ef(),zD=HD(),tS=cu()});var YD=y(iS=>{"use strict";Object.defineProperty(iS,"__esModule",{value:!0});iS.NoDeprecatedCustomRule=n5;var rS=jt(),nf=Q(),nS=ae();function n5(e){return{Field(t){let r=e.getFieldDef(),n=r?.deprecationReason;if(r&&n!=null){let i=e.getParentType();i!=null||(0,rS.invariant)(!1),e.reportError(new nf.GraphQLError(`The field ${i.name}.${r.name} is deprecated. ${n}`,{nodes:t}))}},Argument(t){let r=e.getArgument(),n=r?.deprecationReason;if(r&&n!=null){let i=e.getDirective();if(i!=null)e.reportError(new nf.GraphQLError(`Directive "@${i.name}" argument "${r.name}" is deprecated. ${n}`,{nodes:t}));else{let o=e.getParentType(),a=e.getFieldDef();o!=null&&a!=null||(0,rS.invariant)(!1),e.reportError(new nf.GraphQLError(`Field "${o.name}.${a.name}" argument "${r.name}" is deprecated. ${n}`,{nodes:t}))}}},ObjectField(t){let r=(0,nS.getNamedType)(e.getParentInputType());if((0,nS.isInputObjectType)(r)){let n=r.getFields()[t.name.value],i=n?.deprecationReason;i!=null&&e.reportError(new nf.GraphQLError(`The input field ${r.name}.${n.name} is deprecated. ${i}`,{nodes:t}))}},EnumValue(t){let r=e.getEnumValue(),n=r?.deprecationReason;if(r&&n!=null){let i=(0,nS.getNamedType)(e.getInputType());i!=null||(0,rS.invariant)(!1),e.reportError(new nf.GraphQLError(`The enum value "${i.name}.${r.name}" is deprecated. ${n}`,{nodes:t}))}}}}});var XD=y(oS=>{"use strict";Object.defineProperty(oS,"__esModule",{value:!0});oS.NoSchemaIntrospectionCustomRule=s5;var i5=Q(),o5=ae(),a5=en();function s5(e){return{Field(t){let r=(0,o5.getNamedType)(e.getType());r&&(0,a5.isIntrospectionType)(r)&&e.reportError(new i5.GraphQLError(`GraphQL introspection has been disabled, but the requested query contained the field "${t.name.value}".`,{nodes:t}))}}}});var JD=y(X=>{"use strict";Object.defineProperty(X,"__esModule",{value:!0});Object.defineProperty(X,"ExecutableDefinitionsRule",{enumerable:!0,get:function(){return f5.ExecutableDefinitionsRule}});Object.defineProperty(X,"FieldsOnCorrectTypeRule",{enumerable:!0,get:function(){return p5.FieldsOnCorrectTypeRule}});Object.defineProperty(X,"FragmentsOnCompositeTypesRule",{enumerable:!0,get:function(){return d5.FragmentsOnCompositeTypesRule}});Object.defineProperty(X,"KnownArgumentNamesRule",{enumerable:!0,get:function(){return h5.KnownArgumentNamesRule}});Object.defineProperty(X,"KnownDirectivesRule",{enumerable:!0,get:function(){return m5.KnownDirectivesRule}});Object.defineProperty(X,"KnownFragmentNamesRule",{enumerable:!0,get:function(){return v5.KnownFragmentNamesRule}});Object.defineProperty(X,"KnownTypeNamesRule",{enumerable:!0,get:function(){return y5.KnownTypeNamesRule}});Object.defineProperty(X,"LoneAnonymousOperationRule",{enumerable:!0,get:function(){return g5.LoneAnonymousOperationRule}});Object.defineProperty(X,"LoneSchemaDefinitionRule",{enumerable:!0,get:function(){return F5.LoneSchemaDefinitionRule}});Object.defineProperty(X,"NoDeprecatedCustomRule",{enumerable:!0,get:function(){return K5.NoDeprecatedCustomRule}});Object.defineProperty(X,"NoFragmentCyclesRule",{enumerable:!0,get:function(){return E5.NoFragmentCyclesRule}});Object.defineProperty(X,"NoSchemaIntrospectionCustomRule",{enumerable:!0,get:function(){return B5.NoSchemaIntrospectionCustomRule}});Object.defineProperty(X,"NoUndefinedVariablesRule",{enumerable:!0,get:function(){return T5.NoUndefinedVariablesRule}});Object.defineProperty(X,"NoUnusedFragmentsRule",{enumerable:!0,get:function(){return _5.NoUnusedFragmentsRule}});Object.defineProperty(X,"NoUnusedVariablesRule",{enumerable:!0,get:function(){return b5.NoUnusedVariablesRule}});Object.defineProperty(X,"OverlappingFieldsCanBeMergedRule",{enumerable:!0,get:function(){return S5.OverlappingFieldsCanBeMergedRule}});Object.defineProperty(X,"PossibleFragmentSpreadsRule",{enumerable:!0,get:function(){return w5.PossibleFragmentSpreadsRule}});Object.defineProperty(X,"PossibleTypeExtensionsRule",{enumerable:!0,get:function(){return Q5.PossibleTypeExtensionsRule}});Object.defineProperty(X,"ProvidedRequiredArgumentsRule",{enumerable:!0,get:function(){return O5.ProvidedRequiredArgumentsRule}});Object.defineProperty(X,"ScalarLeafsRule",{enumerable:!0,get:function(){return N5.ScalarLeafsRule}});Object.defineProperty(X,"SingleFieldSubscriptionsRule",{enumerable:!0,get:function(){return I5.SingleFieldSubscriptionsRule}});Object.defineProperty(X,"UniqueArgumentDefinitionNamesRule",{enumerable:!0,get:function(){return G5.UniqueArgumentDefinitionNamesRule}});Object.defineProperty(X,"UniqueArgumentNamesRule",{enumerable:!0,get:function(){return R5.UniqueArgumentNamesRule}});Object.defineProperty(X,"UniqueDirectiveNamesRule",{enumerable:!0,get:function(){return $5.UniqueDirectiveNamesRule}});Object.defineProperty(X,"UniqueDirectivesPerLocationRule",{enumerable:!0,get:function(){return L5.UniqueDirectivesPerLocationRule}});Object.defineProperty(X,"UniqueEnumValueNamesRule",{enumerable:!0,get:function(){return U5.UniqueEnumValueNamesRule}});Object.defineProperty(X,"UniqueFieldDefinitionNamesRule",{enumerable:!0,get:function(){return V5.UniqueFieldDefinitionNamesRule}});Object.defineProperty(X,"UniqueFragmentNamesRule",{enumerable:!0,get:function(){return P5.UniqueFragmentNamesRule}});Object.defineProperty(X,"UniqueInputFieldNamesRule",{enumerable:!0,get:function(){return x5.UniqueInputFieldNamesRule}});Object.defineProperty(X,"UniqueOperationNamesRule",{enumerable:!0,get:function(){return C5.UniqueOperationNamesRule}});Object.defineProperty(X,"UniqueOperationTypesRule",{enumerable:!0,get:function(){return M5.UniqueOperationTypesRule}});Object.defineProperty(X,"UniqueTypeNamesRule",{enumerable:!0,get:function(){return q5.UniqueTypeNamesRule}});Object.defineProperty(X,"UniqueVariableNamesRule",{enumerable:!0,get:function(){return k5.UniqueVariableNamesRule}});Object.defineProperty(X,"ValidationContext",{enumerable:!0,get:function(){return l5.ValidationContext}});Object.defineProperty(X,"ValuesOfCorrectTypeRule",{enumerable:!0,get:function(){return D5.ValuesOfCorrectTypeRule}});Object.defineProperty(X,"VariablesAreInputTypesRule",{enumerable:!0,get:function(){return A5.VariablesAreInputTypesRule}});Object.defineProperty(X,"VariablesInAllowedPositionRule",{enumerable:!0,get:function(){return j5.VariablesInAllowedPositionRule}});Object.defineProperty(X,"specifiedRules",{enumerable:!0,get:function(){return c5.specifiedRules}});Object.defineProperty(X,"validate",{enumerable:!0,get:function(){return u5.validate}});var u5=Jc(),l5=Fb(),c5=Db(),f5=t_(),p5=n_(),d5=o_(),h5=a_(),m5=c_(),v5=p_(),y5=m_(),g5=y_(),E5=__(),T5=S_(),_5=O_(),b5=I_(),S5=j_(),w5=q_(),O5=$_(),N5=K_(),I5=eb(),R5=ob(),L5=cb(),P5=yb(),x5=Eb(),C5=_b(),k5=Ib(),D5=Lb(),A5=xb(),j5=kb(),F5=E_(),M5=Sb(),q5=Ob(),U5=pb(),V5=mb(),G5=nb(),$5=sb(),Q5=V_(),K5=YD(),B5=XD()});var ZD=y(Ma=>{"use strict";Object.defineProperty(Ma,"__esModule",{value:!0});Object.defineProperty(Ma,"GraphQLError",{enumerable:!0,get:function(){return aS.GraphQLError}});Object.defineProperty(Ma,"formatError",{enumerable:!0,get:function(){return aS.formatError}});Object.defineProperty(Ma,"locatedError",{enumerable:!0,get:function(){return z5.locatedError}});Object.defineProperty(Ma,"printError",{enumerable:!0,get:function(){return aS.printError}});Object.defineProperty(Ma,"syntaxError",{enumerable:!0,get:function(){return H5.syntaxError}});var aS=Q(),H5=Vh(),z5=Fm()});var uS=y(sS=>{"use strict";Object.defineProperty(sS,"__esModule",{value:!0});sS.getIntrospectionQuery=W5;function W5(e){let t={descriptions:!0,specifiedByUrl:!1,directiveIsRepeatable:!1,schemaDescription:!1,inputValueDeprecation:!1,...e},r=t.descriptions?"description":"",n=t.specifiedByUrl?"specifiedByURL":"",i=t.directiveIsRepeatable?"isRepeatable":"",o=t.schemaDescription?r:"";function a(s){return t.inputValueDeprecation?s:""}return`
    query IntrospectionQuery {
      __schema {
        ${o}
        queryType { name }
        mutationType { name }
        subscriptionType { name }
        types {
          ...FullType
        }
        directives {
          name
          ${r}
          ${i}
          locations
          args${a("(includeDeprecated: true)")} {
            ...InputValue
          }
        }
      }
    }

    fragment FullType on __Type {
      kind
      name
      ${r}
      ${n}
      fields(includeDeprecated: true) {
        name
        ${r}
        args${a("(includeDeprecated: true)")} {
          ...InputValue
        }
        type {
          ...TypeRef
        }
        isDeprecated
        deprecationReason
      }
      inputFields${a("(includeDeprecated: true)")} {
        ...InputValue
      }
      interfaces {
        ...TypeRef
      }
      enumValues(includeDeprecated: true) {
        name
        ${r}
        isDeprecated
        deprecationReason
      }
      possibleTypes {
        ...TypeRef
      }
    }

    fragment InputValue on __InputValue {
      name
      ${r}
      type { ...TypeRef }
      defaultValue
      ${a("isDeprecated")}
      ${a("deprecationReason")}
    }

    fragment TypeRef on __Type {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                  ofType {
                    kind
                    name
                  }
                }
              }
            }
          }
        }
      }
    }
  `}});var eA=y(lS=>{"use strict";Object.defineProperty(lS,"__esModule",{value:!0});lS.getOperationAST=X5;var Y5=le();function X5(e,t){let r=null;for(let i of e.definitions)if(i.kind===Y5.Kind.OPERATION_DEFINITION){var n;if(t==null){if(r)return null;r=i}else if(((n=i.name)===null||n===void 0?void 0:n.value)===t)return i}return r}});var tA=y(cS=>{"use strict";Object.defineProperty(cS,"__esModule",{value:!0});cS.getOperationRootType=J5;var Bm=Q();function J5(e,t){if(t.operation==="query"){let r=e.getQueryType();if(!r)throw new Bm.GraphQLError("Schema does not define the required query root type.",{nodes:t});return r}if(t.operation==="mutation"){let r=e.getMutationType();if(!r)throw new Bm.GraphQLError("Schema is not configured for mutations.",{nodes:t});return r}if(t.operation==="subscription"){let r=e.getSubscriptionType();if(!r)throw new Bm.GraphQLError("Schema is not configured for subscriptions.",{nodes:t});return r}throw new Bm.GraphQLError("Can only have query, mutation and subscription operations.",{nodes:t})}});var rA=y(fS=>{"use strict";Object.defineProperty(fS,"__esModule",{value:!0});fS.introspectionFromSchema=n9;var Z5=jt(),e9=eu(),t9=ef(),r9=uS();function n9(e,t){let r={specifiedByUrl:!0,directiveIsRepeatable:!0,schemaDescription:!0,inputValueDeprecation:!0,...t},n=(0,e9.parse)((0,r9.getIntrospectionQuery)(r)),i=(0,t9.executeSync)({schema:e,document:n});return!i.errors&&i.data||(0,Z5.invariant)(!1),i.data}});var iA=y(pS=>{"use strict";Object.defineProperty(pS,"__esModule",{value:!0});pS.buildClientSchema=c9;var i9=Zt(),jr=ye(),nA=Xn(),Hm=Sc(),o9=eu(),Fr=ae(),a9=pr(),ai=en(),s9=ti(),u9=La(),l9=zc();function c9(e,t){(0,nA.isObjectLike)(e)&&(0,nA.isObjectLike)(e.__schema)||(0,i9.devAssert)(!1,`Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: ${(0,jr.inspect)(e)}.`);let r=e.__schema,n=(0,Hm.keyValMap)(r.types,S=>S.name,S=>p(S));for(let S of[...s9.specifiedScalarTypes,...ai.introspectionTypes])n[S.name]&&(n[S.name]=S);let i=r.queryType?c(r.queryType):null,o=r.mutationType?c(r.mutationType):null,a=r.subscriptionType?c(r.subscriptionType):null,s=r.directives?r.directives.map(L):[];return new u9.GraphQLSchema({description:r.description,query:i,mutation:o,subscription:a,types:Object.values(n),directives:s,assumeValid:t?.assumeValid});function u(S){if(S.kind===ai.TypeKind.LIST){let I=S.ofType;if(!I)throw new Error("Decorated type deeper than introspection query.");return new Fr.GraphQLList(u(I))}if(S.kind===ai.TypeKind.NON_NULL){let I=S.ofType;if(!I)throw new Error("Decorated type deeper than introspection query.");let $=u(I);return new Fr.GraphQLNonNull((0,Fr.assertNullableType)($))}return l(S)}function l(S){let I=S.name;if(!I)throw new Error(`Unknown type reference: ${(0,jr.inspect)(S)}.`);let $=n[I];if(!$)throw new Error(`Invalid or incomplete schema, unknown type: ${I}. Ensure that a full introspection query is used in order to build a client schema.`);return $}function c(S){return(0,Fr.assertObjectType)(l(S))}function f(S){return(0,Fr.assertInterfaceType)(l(S))}function p(S){if(S!=null&&S.name!=null&&S.kind!=null)switch(S.kind){case ai.TypeKind.SCALAR:return d(S);case ai.TypeKind.OBJECT:return E(S);case ai.TypeKind.INTERFACE:return b(S);case ai.TypeKind.UNION:return h(S);case ai.TypeKind.ENUM:return v(S);case ai.TypeKind.INPUT_OBJECT:return g(S)}let I=(0,jr.inspect)(S);throw new Error(`Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ${I}.`)}function d(S){return new Fr.GraphQLScalarType({name:S.name,description:S.description,specifiedByURL:S.specifiedByURL})}function m(S){if(S.interfaces===null&&S.kind===ai.TypeKind.INTERFACE)return[];if(!S.interfaces){let I=(0,jr.inspect)(S);throw new Error(`Introspection result missing interfaces: ${I}.`)}return S.interfaces.map(f)}function E(S){return new Fr.GraphQLObjectType({name:S.name,description:S.description,interfaces:()=>m(S),fields:()=>_(S)})}function b(S){return new Fr.GraphQLInterfaceType({name:S.name,description:S.description,interfaces:()=>m(S),fields:()=>_(S)})}function h(S){if(!S.possibleTypes){let I=(0,jr.inspect)(S);throw new Error(`Introspection result missing possibleTypes: ${I}.`)}return new Fr.GraphQLUnionType({name:S.name,description:S.description,types:()=>S.possibleTypes.map(c)})}function v(S){if(!S.enumValues){let I=(0,jr.inspect)(S);throw new Error(`Introspection result missing enumValues: ${I}.`)}return new Fr.GraphQLEnumType({name:S.name,description:S.description,values:(0,Hm.keyValMap)(S.enumValues,I=>I.name,I=>({description:I.description,deprecationReason:I.deprecationReason}))})}function g(S){if(!S.inputFields){let I=(0,jr.inspect)(S);throw new Error(`Introspection result missing inputFields: ${I}.`)}return new Fr.GraphQLInputObjectType({name:S.name,description:S.description,fields:()=>R(S.inputFields)})}function _(S){if(!S.fields)throw new Error(`Introspection result missing fields: ${(0,jr.inspect)(S)}.`);return(0,Hm.keyValMap)(S.fields,I=>I.name,N)}function N(S){let I=u(S.type);if(!(0,Fr.isOutputType)(I)){let $=(0,jr.inspect)(I);throw new Error(`Introspection must provide output type for fields, but received: ${$}.`)}if(!S.args){let $=(0,jr.inspect)(S);throw new Error(`Introspection result missing field args: ${$}.`)}return{description:S.description,deprecationReason:S.deprecationReason,type:I,args:R(S.args)}}function R(S){return(0,Hm.keyValMap)(S,I=>I.name,O)}function O(S){let I=u(S.type);if(!(0,Fr.isInputType)(I)){let Ie=(0,jr.inspect)(I);throw new Error(`Introspection must provide input type for arguments, but received: ${Ie}.`)}let $=S.defaultValue!=null?(0,l9.valueFromAST)((0,o9.parseValue)(S.defaultValue),I):void 0;return{description:S.description,type:I,defaultValue:$,deprecationReason:S.deprecationReason}}function L(S){if(!S.args){let I=(0,jr.inspect)(S);throw new Error(`Introspection result missing directive args: ${I}.`)}if(!S.locations){let I=(0,jr.inspect)(S);throw new Error(`Introspection result missing directive locations: ${I}.`)}return new a9.GraphQLDirective({name:S.name,description:S.description,isRepeatable:S.isRepeatable,locations:S.locations.slice(),args:R(S.args)})}}});var dS=y(Ym=>{"use strict";Object.defineProperty(Ym,"__esModule",{value:!0});Ym.extendSchema=v9;Ym.extendSchemaImpl=dA;var f9=Zt(),p9=ye(),d9=jt(),h9=Io(),of=yT(),an=le(),oA=xa(),$e=ae(),Wm=pr(),cA=en(),fA=ti(),aA=La(),m9=Jc(),pA=cu(),sA=zc();function v9(e,t,r){(0,aA.assertSchema)(e),t!=null&&t.kind===an.Kind.DOCUMENT||(0,f9.devAssert)(!1,"Must provide valid Document AST."),r?.assumeValid!==!0&&r?.assumeValidSDL!==!0&&(0,m9.assertValidSDLExtension)(t,e);let n=e.toConfig(),i=dA(n,t,r);return n===i?e:new aA.GraphQLSchema(i)}function dA(e,t,r){var n,i,o,a;let s=[],u=Object.create(null),l=[],c,f=[];for(let w of t.definitions)if(w.kind===an.Kind.SCHEMA_DEFINITION)c=w;else if(w.kind===an.Kind.SCHEMA_EXTENSION)f.push(w);else if((0,oA.isTypeDefinitionNode)(w))s.push(w);else if((0,oA.isTypeExtensionNode)(w)){let q=w.name.value,A=u[q];u[q]=A?A.concat([w]):[w]}else w.kind===an.Kind.DIRECTIVE_DEFINITION&&l.push(w);if(Object.keys(u).length===0&&s.length===0&&l.length===0&&f.length===0&&c==null)return e;let p=Object.create(null);for(let w of e.types)p[w.name]=v(w);for(let w of s){var d;let q=w.name.value;p[q]=(d=uA[q])!==null&&d!==void 0?d:Bu(w)}let m={query:e.query&&b(e.query),mutation:e.mutation&&b(e.mutation),subscription:e.subscription&&b(e.subscription),...c&&$([c]),...$(f)};return{description:(n=c)===null||n===void 0||(i=n.description)===null||i===void 0?void 0:i.value,...m,types:Object.values(p),directives:[...e.directives.map(h),...l.map(Me)],extensions:Object.create(null),astNode:(o=c)!==null&&o!==void 0?o:e.astNode,extensionASTNodes:e.extensionASTNodes.concat(f),assumeValid:(a=r?.assumeValid)!==null&&a!==void 0?a:!1};function E(w){return(0,$e.isListType)(w)?new $e.GraphQLList(E(w.ofType)):(0,$e.isNonNullType)(w)?new $e.GraphQLNonNull(E(w.ofType)):b(w)}function b(w){return p[w.name]}function h(w){let q=w.toConfig();return new Wm.GraphQLDirective({...q,args:(0,of.mapValue)(q.args,I)})}function v(w){if((0,cA.isIntrospectionType)(w)||(0,fA.isSpecifiedScalarType)(w))return w;if((0,$e.isScalarType)(w))return N(w);if((0,$e.isObjectType)(w))return R(w);if((0,$e.isInterfaceType)(w))return O(w);if((0,$e.isUnionType)(w))return L(w);if((0,$e.isEnumType)(w))return _(w);if((0,$e.isInputObjectType)(w))return g(w);(0,d9.invariant)(!1,"Unexpected type: "+(0,p9.inspect)(w))}function g(w){var q;let A=w.toConfig(),U=(q=u[A.name])!==null&&q!==void 0?q:[];return new $e.GraphQLInputObjectType({...A,fields:()=>({...(0,of.mapValue)(A.fields,ke=>({...ke,type:E(ke.type)})),...Ze(U)}),extensionASTNodes:A.extensionASTNodes.concat(U)})}function _(w){var q;let A=w.toConfig(),U=(q=u[w.name])!==null&&q!==void 0?q:[];return new $e.GraphQLEnumType({...A,values:{...A.values,...Tr(U)},extensionASTNodes:A.extensionASTNodes.concat(U)})}function N(w){var q;let A=w.toConfig(),U=(q=u[A.name])!==null&&q!==void 0?q:[],ke=A.specifiedByURL;for(let qe of U){var ot;ke=(ot=lA(qe))!==null&&ot!==void 0?ot:ke}return new $e.GraphQLScalarType({...A,specifiedByURL:ke,extensionASTNodes:A.extensionASTNodes.concat(U)})}function R(w){var q;let A=w.toConfig(),U=(q=u[A.name])!==null&&q!==void 0?q:[];return new $e.GraphQLObjectType({...A,interfaces:()=>[...w.getInterfaces().map(b),...Vr(U)],fields:()=>({...(0,of.mapValue)(A.fields,S),...Tt(U)}),extensionASTNodes:A.extensionASTNodes.concat(U)})}function O(w){var q;let A=w.toConfig(),U=(q=u[A.name])!==null&&q!==void 0?q:[];return new $e.GraphQLInterfaceType({...A,interfaces:()=>[...w.getInterfaces().map(b),...Vr(U)],fields:()=>({...(0,of.mapValue)(A.fields,S),...Tt(U)}),extensionASTNodes:A.extensionASTNodes.concat(U)})}function L(w){var q;let A=w.toConfig(),U=(q=u[A.name])!==null&&q!==void 0?q:[];return new $e.GraphQLUnionType({...A,types:()=>[...w.getTypes().map(b),...Bo(U)],extensionASTNodes:A.extensionASTNodes.concat(U)})}function S(w){return{...w,type:E(w.type),args:w.args&&(0,of.mapValue)(w.args,I)}}function I(w){return{...w,type:E(w.type)}}function $(w){let q={};for(let U of w){var A;let ke=(A=U.operationTypes)!==null&&A!==void 0?A:[];for(let ot of ke)q[ot.operation]=Ie(ot.type)}return q}function Ie(w){var q;let A=w.name.value,U=(q=uA[A])!==null&&q!==void 0?q:p[A];if(U===void 0)throw new Error(`Unknown type: "${A}".`);return U}function Se(w){return w.kind===an.Kind.LIST_TYPE?new $e.GraphQLList(Se(w.type)):w.kind===an.Kind.NON_NULL_TYPE?new $e.GraphQLNonNull(Se(w.type)):Ie(w)}function Me(w){var q;return new Wm.GraphQLDirective({name:w.name.value,description:(q=w.description)===null||q===void 0?void 0:q.value,locations:w.locations.map(({value:A})=>A),isRepeatable:w.repeatable,args:ie(w.arguments),astNode:w})}function Tt(w){let q=Object.create(null);for(let ke of w){var A;let ot=(A=ke.fields)!==null&&A!==void 0?A:[];for(let qe of ot){var U;q[qe.name.value]={type:Se(qe.type),description:(U=qe.description)===null||U===void 0?void 0:U.value,args:ie(qe.arguments),deprecationReason:zm(qe),astNode:qe}}}return q}function ie(w){let q=w??[],A=Object.create(null);for(let ke of q){var U;let ot=Se(ke.type);A[ke.name.value]={type:ot,description:(U=ke.description)===null||U===void 0?void 0:U.value,defaultValue:(0,sA.valueFromAST)(ke.defaultValue,ot),deprecationReason:zm(ke),astNode:ke}}return A}function Ze(w){let q=Object.create(null);for(let ke of w){var A;let ot=(A=ke.fields)!==null&&A!==void 0?A:[];for(let qe of ot){var U;let Ha=Se(qe.type);q[qe.name.value]={type:Ha,description:(U=qe.description)===null||U===void 0?void 0:U.value,defaultValue:(0,sA.valueFromAST)(qe.defaultValue,Ha),deprecationReason:zm(qe),astNode:qe}}}return q}function Tr(w){let q=Object.create(null);for(let ke of w){var A;let ot=(A=ke.values)!==null&&A!==void 0?A:[];for(let qe of ot){var U;q[qe.name.value]={description:(U=qe.description)===null||U===void 0?void 0:U.value,deprecationReason:zm(qe),astNode:qe}}}return q}function Vr(w){return w.flatMap(q=>{var A,U;return(A=(U=q.interfaces)===null||U===void 0?void 0:U.map(Ie))!==null&&A!==void 0?A:[]})}function Bo(w){return w.flatMap(q=>{var A,U;return(A=(U=q.types)===null||U===void 0?void 0:U.map(Ie))!==null&&A!==void 0?A:[]})}function Bu(w){var q;let A=w.name.value,U=(q=u[A])!==null&&q!==void 0?q:[];switch(w.kind){case an.Kind.OBJECT_TYPE_DEFINITION:{var ke;let ln=[w,...U];return new $e.GraphQLObjectType({name:A,description:(ke=w.description)===null||ke===void 0?void 0:ke.value,interfaces:()=>Vr(ln),fields:()=>Tt(ln),astNode:w,extensionASTNodes:U})}case an.Kind.INTERFACE_TYPE_DEFINITION:{var ot;let ln=[w,...U];return new $e.GraphQLInterfaceType({name:A,description:(ot=w.description)===null||ot===void 0?void 0:ot.value,interfaces:()=>Vr(ln),fields:()=>Tt(ln),astNode:w,extensionASTNodes:U})}case an.Kind.ENUM_TYPE_DEFINITION:{var qe;let ln=[w,...U];return new $e.GraphQLEnumType({name:A,description:(qe=w.description)===null||qe===void 0?void 0:qe.value,values:Tr(ln),astNode:w,extensionASTNodes:U})}case an.Kind.UNION_TYPE_DEFINITION:{var Ha;let ln=[w,...U];return new $e.GraphQLUnionType({name:A,description:(Ha=w.description)===null||Ha===void 0?void 0:Ha.value,types:()=>Bo(ln),astNode:w,extensionASTNodes:U})}case an.Kind.SCALAR_TYPE_DEFINITION:{var Zv;return new $e.GraphQLScalarType({name:A,description:(Zv=w.description)===null||Zv===void 0?void 0:Zv.value,specifiedByURL:lA(w),astNode:w,extensionASTNodes:U})}case an.Kind.INPUT_OBJECT_TYPE_DEFINITION:{var ey;let ln=[w,...U];return new $e.GraphQLInputObjectType({name:A,description:(ey=w.description)===null||ey===void 0?void 0:ey.value,fields:()=>Ze(ln),astNode:w,extensionASTNodes:U})}}}}var uA=(0,h9.keyMap)([...fA.specifiedScalarTypes,...cA.introspectionTypes],e=>e.name);function zm(e){let t=(0,pA.getDirectiveValues)(Wm.GraphQLDeprecatedDirective,e);return t?.reason}function lA(e){let t=(0,pA.getDirectiveValues)(Wm.GraphQLSpecifiedByDirective,e);return t?.url}});var mA=y(Xm=>{"use strict";Object.defineProperty(Xm,"__esModule",{value:!0});Xm.buildASTSchema=hA;Xm.buildSchema=w9;var y9=Zt(),g9=le(),E9=eu(),T9=pr(),_9=La(),b9=Jc(),S9=dS();function hA(e,t){e!=null&&e.kind===g9.Kind.DOCUMENT||(0,y9.devAssert)(!1,"Must provide valid Document AST."),t?.assumeValid!==!0&&t?.assumeValidSDL!==!0&&(0,b9.assertValidSDL)(e);let r={description:void 0,types:[],directives:[],extensions:Object.create(null),extensionASTNodes:[],assumeValid:!1},n=(0,S9.extendSchemaImpl)(r,e,t);if(n.astNode==null)for(let o of n.types)switch(o.name){case"Query":n.query=o;break;case"Mutation":n.mutation=o;break;case"Subscription":n.subscription=o;break}let i=[...n.directives,...T9.specifiedDirectives.filter(o=>n.directives.every(a=>a.name!==o.name))];return new _9.GraphQLSchema({...n,directives:i})}function w9(e,t){let r=(0,E9.parse)(e,{noLocation:t?.noLocation,allowLegacyFragmentVariables:t?.allowLegacyFragmentVariables});return hA(r,{assumeValidSDL:t?.assumeValidSDL,assumeValid:t?.assumeValid})}});var gA=y(mS=>{"use strict";Object.defineProperty(mS,"__esModule",{value:!0});mS.lexicographicSortSchema=x9;var O9=ye(),N9=jt(),I9=Sc(),vA=wc(),er=ae(),R9=pr(),L9=en(),P9=La();function x9(e){let t=e.toConfig(),r=(0,I9.keyValMap)(hS(t.types),p=>p.name,f);return new P9.GraphQLSchema({...t,types:Object.values(r),directives:hS(t.directives).map(a),query:o(t.query),mutation:o(t.mutation),subscription:o(t.subscription)});function n(p){return(0,er.isListType)(p)?new er.GraphQLList(n(p.ofType)):(0,er.isNonNullType)(p)?new er.GraphQLNonNull(n(p.ofType)):i(p)}function i(p){return r[p.name]}function o(p){return p&&i(p)}function a(p){let d=p.toConfig();return new R9.GraphQLDirective({...d,locations:yA(d.locations,m=>m),args:s(d.args)})}function s(p){return Jm(p,d=>({...d,type:n(d.type)}))}function u(p){return Jm(p,d=>({...d,type:n(d.type),args:d.args&&s(d.args)}))}function l(p){return Jm(p,d=>({...d,type:n(d.type)}))}function c(p){return hS(p).map(i)}function f(p){if((0,er.isScalarType)(p)||(0,L9.isIntrospectionType)(p))return p;if((0,er.isObjectType)(p)){let d=p.toConfig();return new er.GraphQLObjectType({...d,interfaces:()=>c(d.interfaces),fields:()=>u(d.fields)})}if((0,er.isInterfaceType)(p)){let d=p.toConfig();return new er.GraphQLInterfaceType({...d,interfaces:()=>c(d.interfaces),fields:()=>u(d.fields)})}if((0,er.isUnionType)(p)){let d=p.toConfig();return new er.GraphQLUnionType({...d,types:()=>c(d.types)})}if((0,er.isEnumType)(p)){let d=p.toConfig();return new er.GraphQLEnumType({...d,values:Jm(d.values,m=>m)})}if((0,er.isInputObjectType)(p)){let d=p.toConfig();return new er.GraphQLInputObjectType({...d,fields:()=>l(d.fields)})}(0,N9.invariant)(!1,"Unexpected type: "+(0,O9.inspect)(p))}}function Jm(e,t){let r=Object.create(null);for(let n of Object.keys(e).sort(vA.naturalCompare))r[n]=t(e[n]);return r}function hS(e){return yA(e,t=>t.name)}function yA(e,t){return e.slice().sort((r,n)=>{let i=t(r),o=t(n);return(0,vA.naturalCompare)(i,o)})}});var OA=y(af=>{"use strict";Object.defineProperty(af,"__esModule",{value:!0});af.printIntrospectionSchema=M9;af.printSchema=F9;af.printType=_A;var C9=ye(),k9=jt(),D9=mc(),yS=le(),Zm=Ar(),hu=ae(),gS=pr(),EA=en(),A9=ti(),j9=Fc();function F9(e){return TA(e,t=>!(0,gS.isSpecifiedDirective)(t),q9)}function M9(e){return TA(e,gS.isSpecifiedDirective,EA.isIntrospectionType)}function q9(e){return!(0,A9.isSpecifiedScalarType)(e)&&!(0,EA.isIntrospectionType)(e)}function TA(e,t,r){let n=e.getDirectives().filter(t),i=Object.values(e.getTypeMap()).filter(r);return[U9(e),...n.map(o=>z9(o)),...i.map(o=>_A(o))].filter(Boolean).join(`

`)}function U9(e){if(e.description==null&&V9(e))return;let t=[],r=e.getQueryType();r&&t.push(`  query: ${r.name}`);let n=e.getMutationType();n&&t.push(`  mutation: ${n.name}`);let i=e.getSubscriptionType();return i&&t.push(`  subscription: ${i.name}`),sn(e)+`schema {
${t.join(`
`)}
}`}function V9(e){let t=e.getQueryType();if(t&&t.name!=="Query")return!1;let r=e.getMutationType();if(r&&r.name!=="Mutation")return!1;let n=e.getSubscriptionType();return!(n&&n.name!=="Subscription")}function _A(e){if((0,hu.isScalarType)(e))return G9(e);if((0,hu.isObjectType)(e))return $9(e);if((0,hu.isInterfaceType)(e))return Q9(e);if((0,hu.isUnionType)(e))return K9(e);if((0,hu.isEnumType)(e))return B9(e);if((0,hu.isInputObjectType)(e))return H9(e);(0,k9.invariant)(!1,"Unexpected type: "+(0,C9.inspect)(e))}function G9(e){return sn(e)+`scalar ${e.name}`+W9(e)}function bA(e){let t=e.getInterfaces();return t.length?" implements "+t.map(r=>r.name).join(" & "):""}function $9(e){return sn(e)+`type ${e.name}`+bA(e)+SA(e)}function Q9(e){return sn(e)+`interface ${e.name}`+bA(e)+SA(e)}function K9(e){let t=e.getTypes(),r=t.length?" = "+t.join(" | "):"";return sn(e)+"union "+e.name+r}function B9(e){let t=e.getValues().map((r,n)=>sn(r,"  ",!n)+"  "+r.name+TS(r.deprecationReason));return sn(e)+`enum ${e.name}`+ES(t)}function H9(e){let t=Object.values(e.getFields()).map((r,n)=>sn(r,"  ",!n)+"  "+vS(r));return sn(e)+`input ${e.name}`+ES(t)}function SA(e){let t=Object.values(e.getFields()).map((r,n)=>sn(r,"  ",!n)+"  "+r.name+wA(r.args,"  ")+": "+String(r.type)+TS(r.deprecationReason));return ES(t)}function ES(e){return e.length!==0?` {
`+e.join(`
`)+`
}`:""}function wA(e,t=""){return e.length===0?"":e.every(r=>!r.description)?"("+e.map(vS).join(", ")+")":`(
`+e.map((r,n)=>sn(r,"  "+t,!n)+"  "+t+vS(r)).join(`
`)+`
`+t+")"}function vS(e){let t=(0,j9.astFromValue)(e.defaultValue,e.type),r=e.name+": "+String(e.type);return t&&(r+=` = ${(0,Zm.print)(t)}`),r+TS(e.deprecationReason)}function z9(e){return sn(e)+"directive @"+e.name+wA(e.args)+(e.isRepeatable?" repeatable":"")+" on "+e.locations.join(" | ")}function TS(e){return e==null?"":e!==gS.DEFAULT_DEPRECATION_REASON?` @deprecated(reason: ${(0,Zm.print)({kind:yS.Kind.STRING,value:e})})`:" @deprecated"}function W9(e){return e.specifiedByURL==null?"":` @specifiedBy(url: ${(0,Zm.print)({kind:yS.Kind.STRING,value:e.specifiedByURL})})`}function sn(e,t="",r=!0){let{description:n}=e;if(n==null)return"";let i=(0,Zm.print)({kind:yS.Kind.STRING,value:n,block:(0,D9.isPrintableAsBlockString)(n)});return(t&&!r?`
`+t:t)+i.replace(/\n/g,`
`+t)+`
`}});var NA=y(_S=>{"use strict";Object.defineProperty(_S,"__esModule",{value:!0});_S.concatAST=X9;var Y9=le();function X9(e){let t=[];for(let r of e)t.push(...r.definitions);return{kind:Y9.Kind.DOCUMENT,definitions:t}}});var LA=y(bS=>{"use strict";Object.defineProperty(bS,"__esModule",{value:!0});bS.separateOperations=Z9;var ev=le(),J9=Sa();function Z9(e){let t=[],r=Object.create(null);for(let i of e.definitions)switch(i.kind){case ev.Kind.OPERATION_DEFINITION:t.push(i);break;case ev.Kind.FRAGMENT_DEFINITION:r[i.name.value]=IA(i.selectionSet);break;default:}let n=Object.create(null);for(let i of t){let o=new Set;for(let s of IA(i.selectionSet))RA(o,r,s);let a=i.name?i.name.value:"";n[a]={kind:ev.Kind.DOCUMENT,definitions:e.definitions.filter(s=>s===i||s.kind===ev.Kind.FRAGMENT_DEFINITION&&o.has(s.name.value))}}return n}function RA(e,t,r){if(!e.has(r)){e.add(r);let n=t[r];if(n!==void 0)for(let i of n)RA(e,t,i)}}function IA(e){let t=[];return(0,J9.visit)(e,{FragmentSpread(r){t.push(r.name.value)}}),t}});var CA=y(wS=>{"use strict";Object.defineProperty(wS,"__esModule",{value:!0});wS.stripIgnoredCharacters=tW;var eW=mc(),PA=Qh(),xA=zh(),SS=yc();function tW(e){let t=(0,xA.isSource)(e)?e:new xA.Source(e),r=t.body,n=new PA.Lexer(t),i="",o=!1;for(;n.advance().kind!==SS.TokenKind.EOF;){let a=n.token,s=a.kind,u=!(0,PA.isPunctuatorTokenKind)(a.kind);o&&(u||a.kind===SS.TokenKind.SPREAD)&&(i+=" ");let l=r.slice(a.start,a.end);s===SS.TokenKind.BLOCK_STRING?i+=(0,eW.printBlockString)(a.value,{minimize:!0}):i+=l,o=u}return i}});var DA=y(tv=>{"use strict";Object.defineProperty(tv,"__esModule",{value:!0});tv.assertValidName=oW;tv.isValidNameError=kA;var rW=Zt(),nW=Q(),iW=Oc();function oW(e){let t=kA(e);if(t)throw t;return e}function kA(e){if(typeof e=="string"||(0,rW.devAssert)(!1,"Expected name to be a string."),e.startsWith("__"))return new nW.GraphQLError(`Name "${e}" must not begin with "__", which is reserved by GraphQL introspection.`);try{(0,iW.assertName)(e)}catch(t){return t}}});var GA=y(si=>{"use strict";Object.defineProperty(si,"__esModule",{value:!0});si.DangerousChangeType=si.BreakingChangeType=void 0;si.findBreakingChanges=fW;si.findDangerousChanges=pW;var aW=ye(),UA=jt(),AA=Io(),sW=Ar(),pe=ae(),uW=ti(),lW=Fc(),cW=P_(),Je;si.BreakingChangeType=Je;(function(e){e.TYPE_REMOVED="TYPE_REMOVED",e.TYPE_CHANGED_KIND="TYPE_CHANGED_KIND",e.TYPE_REMOVED_FROM_UNION="TYPE_REMOVED_FROM_UNION",e.VALUE_REMOVED_FROM_ENUM="VALUE_REMOVED_FROM_ENUM",e.REQUIRED_INPUT_FIELD_ADDED="REQUIRED_INPUT_FIELD_ADDED",e.IMPLEMENTED_INTERFACE_REMOVED="IMPLEMENTED_INTERFACE_REMOVED",e.FIELD_REMOVED="FIELD_REMOVED",e.FIELD_CHANGED_KIND="FIELD_CHANGED_KIND",e.REQUIRED_ARG_ADDED="REQUIRED_ARG_ADDED",e.ARG_REMOVED="ARG_REMOVED",e.ARG_CHANGED_KIND="ARG_CHANGED_KIND",e.DIRECTIVE_REMOVED="DIRECTIVE_REMOVED",e.DIRECTIVE_ARG_REMOVED="DIRECTIVE_ARG_REMOVED",e.REQUIRED_DIRECTIVE_ARG_ADDED="REQUIRED_DIRECTIVE_ARG_ADDED",e.DIRECTIVE_REPEATABLE_REMOVED="DIRECTIVE_REPEATABLE_REMOVED",e.DIRECTIVE_LOCATION_REMOVED="DIRECTIVE_LOCATION_REMOVED"})(Je||(si.BreakingChangeType=Je={}));var Rn;si.DangerousChangeType=Rn;(function(e){e.VALUE_ADDED_TO_ENUM="VALUE_ADDED_TO_ENUM",e.TYPE_ADDED_TO_UNION="TYPE_ADDED_TO_UNION",e.OPTIONAL_INPUT_FIELD_ADDED="OPTIONAL_INPUT_FIELD_ADDED",e.OPTIONAL_ARG_ADDED="OPTIONAL_ARG_ADDED",e.IMPLEMENTED_INTERFACE_ADDED="IMPLEMENTED_INTERFACE_ADDED",e.ARG_DEFAULT_VALUE_CHANGE="ARG_DEFAULT_VALUE_CHANGE"})(Rn||(si.DangerousChangeType=Rn={}));function fW(e,t){return VA(e,t).filter(r=>r.type in Je)}function pW(e,t){return VA(e,t).filter(r=>r.type in Rn)}function VA(e,t){return[...hW(e,t),...dW(e,t)]}function dW(e,t){let r=[],n=Di(e.getDirectives(),t.getDirectives());for(let i of n.removed)r.push({type:Je.DIRECTIVE_REMOVED,description:`${i.name} was removed.`});for(let[i,o]of n.persisted){let a=Di(i.args,o.args);for(let s of a.added)(0,pe.isRequiredArgument)(s)&&r.push({type:Je.REQUIRED_DIRECTIVE_ARG_ADDED,description:`A required arg ${s.name} on directive ${i.name} was added.`});for(let s of a.removed)r.push({type:Je.DIRECTIVE_ARG_REMOVED,description:`${s.name} was removed from ${i.name}.`});i.isRepeatable&&!o.isRepeatable&&r.push({type:Je.DIRECTIVE_REPEATABLE_REMOVED,description:`Repeatable flag was removed from ${i.name}.`});for(let s of i.locations)o.locations.includes(s)||r.push({type:Je.DIRECTIVE_LOCATION_REMOVED,description:`${s} was removed from ${i.name}.`})}return r}function hW(e,t){let r=[],n=Di(Object.values(e.getTypeMap()),Object.values(t.getTypeMap()));for(let i of n.removed)r.push({type:Je.TYPE_REMOVED,description:(0,uW.isSpecifiedScalarType)(i)?`Standard scalar ${i.name} was removed because it is not referenced anymore.`:`${i.name} was removed.`});for(let[i,o]of n.persisted)(0,pe.isEnumType)(i)&&(0,pe.isEnumType)(o)?r.push(...yW(i,o)):(0,pe.isUnionType)(i)&&(0,pe.isUnionType)(o)?r.push(...vW(i,o)):(0,pe.isInputObjectType)(i)&&(0,pe.isInputObjectType)(o)?r.push(...mW(i,o)):(0,pe.isObjectType)(i)&&(0,pe.isObjectType)(o)?r.push(...FA(i,o),...jA(i,o)):(0,pe.isInterfaceType)(i)&&(0,pe.isInterfaceType)(o)?r.push(...FA(i,o),...jA(i,o)):i.constructor!==o.constructor&&r.push({type:Je.TYPE_CHANGED_KIND,description:`${i.name} changed from ${MA(i)} to ${MA(o)}.`});return r}function mW(e,t){let r=[],n=Di(Object.values(e.getFields()),Object.values(t.getFields()));for(let i of n.added)(0,pe.isRequiredInputField)(i)?r.push({type:Je.REQUIRED_INPUT_FIELD_ADDED,description:`A required field ${i.name} on input type ${e.name} was added.`}):r.push({type:Rn.OPTIONAL_INPUT_FIELD_ADDED,description:`An optional field ${i.name} on input type ${e.name} was added.`});for(let i of n.removed)r.push({type:Je.FIELD_REMOVED,description:`${e.name}.${i.name} was removed.`});for(let[i,o]of n.persisted)uf(i.type,o.type)||r.push({type:Je.FIELD_CHANGED_KIND,description:`${e.name}.${i.name} changed type from ${String(i.type)} to ${String(o.type)}.`});return r}function vW(e,t){let r=[],n=Di(e.getTypes(),t.getTypes());for(let i of n.added)r.push({type:Rn.TYPE_ADDED_TO_UNION,description:`${i.name} was added to union type ${e.name}.`});for(let i of n.removed)r.push({type:Je.TYPE_REMOVED_FROM_UNION,description:`${i.name} was removed from union type ${e.name}.`});return r}function yW(e,t){let r=[],n=Di(e.getValues(),t.getValues());for(let i of n.added)r.push({type:Rn.VALUE_ADDED_TO_ENUM,description:`${i.name} was added to enum type ${e.name}.`});for(let i of n.removed)r.push({type:Je.VALUE_REMOVED_FROM_ENUM,description:`${i.name} was removed from enum type ${e.name}.`});return r}function jA(e,t){let r=[],n=Di(e.getInterfaces(),t.getInterfaces());for(let i of n.added)r.push({type:Rn.IMPLEMENTED_INTERFACE_ADDED,description:`${i.name} added to interfaces implemented by ${e.name}.`});for(let i of n.removed)r.push({type:Je.IMPLEMENTED_INTERFACE_REMOVED,description:`${e.name} no longer implements interface ${i.name}.`});return r}function FA(e,t){let r=[],n=Di(Object.values(e.getFields()),Object.values(t.getFields()));for(let i of n.removed)r.push({type:Je.FIELD_REMOVED,description:`${e.name}.${i.name} was removed.`});for(let[i,o]of n.persisted)r.push(...gW(e,i,o)),sf(i.type,o.type)||r.push({type:Je.FIELD_CHANGED_KIND,description:`${e.name}.${i.name} changed type from ${String(i.type)} to ${String(o.type)}.`});return r}function gW(e,t,r){let n=[],i=Di(t.args,r.args);for(let o of i.removed)n.push({type:Je.ARG_REMOVED,description:`${e.name}.${t.name} arg ${o.name} was removed.`});for(let[o,a]of i.persisted)if(!uf(o.type,a.type))n.push({type:Je.ARG_CHANGED_KIND,description:`${e.name}.${t.name} arg ${o.name} has changed type from ${String(o.type)} to ${String(a.type)}.`});else if(o.defaultValue!==void 0)if(a.defaultValue===void 0)n.push({type:Rn.ARG_DEFAULT_VALUE_CHANGE,description:`${e.name}.${t.name} arg ${o.name} defaultValue was removed.`});else{let u=qA(o.defaultValue,o.type),l=qA(a.defaultValue,a.type);u!==l&&n.push({type:Rn.ARG_DEFAULT_VALUE_CHANGE,description:`${e.name}.${t.name} arg ${o.name} has changed defaultValue from ${u} to ${l}.`})}for(let o of i.added)(0,pe.isRequiredArgument)(o)?n.push({type:Je.REQUIRED_ARG_ADDED,description:`A required arg ${o.name} on ${e.name}.${t.name} was added.`}):n.push({type:Rn.OPTIONAL_ARG_ADDED,description:`An optional arg ${o.name} on ${e.name}.${t.name} was added.`});return n}function sf(e,t){return(0,pe.isListType)(e)?(0,pe.isListType)(t)&&sf(e.ofType,t.ofType)||(0,pe.isNonNullType)(t)&&sf(e,t.ofType):(0,pe.isNonNullType)(e)?(0,pe.isNonNullType)(t)&&sf(e.ofType,t.ofType):(0,pe.isNamedType)(t)&&e.name===t.name||(0,pe.isNonNullType)(t)&&sf(e,t.ofType)}function uf(e,t){return(0,pe.isListType)(e)?(0,pe.isListType)(t)&&uf(e.ofType,t.ofType):(0,pe.isNonNullType)(e)?(0,pe.isNonNullType)(t)&&uf(e.ofType,t.ofType)||!(0,pe.isNonNullType)(t)&&uf(e.ofType,t):(0,pe.isNamedType)(t)&&e.name===t.name}function MA(e){if((0,pe.isScalarType)(e))return"a Scalar type";if((0,pe.isObjectType)(e))return"an Object type";if((0,pe.isInterfaceType)(e))return"an Interface type";if((0,pe.isUnionType)(e))return"a Union type";if((0,pe.isEnumType)(e))return"an Enum type";if((0,pe.isInputObjectType)(e))return"an Input type";(0,UA.invariant)(!1,"Unexpected type: "+(0,aW.inspect)(e))}function qA(e,t){let r=(0,lW.astFromValue)(e,t);return r!=null||(0,UA.invariant)(!1),(0,sW.print)((0,cW.sortValueNode)(r))}function Di(e,t){let r=[],n=[],i=[],o=(0,AA.keyMap)(e,({name:s})=>s),a=(0,AA.keyMap)(t,({name:s})=>s);for(let s of e){let u=a[s.name];u===void 0?n.push(s):i.push([s,u])}for(let s of t)o[s.name]===void 0&&r.push(s);return{added:r,persisted:i,removed:n}}});var BA=y(fe=>{"use strict";Object.defineProperty(fe,"__esModule",{value:!0});Object.defineProperty(fe,"BreakingChangeType",{enumerable:!0,get:function(){return rv.BreakingChangeType}});Object.defineProperty(fe,"DangerousChangeType",{enumerable:!0,get:function(){return rv.DangerousChangeType}});Object.defineProperty(fe,"TypeInfo",{enumerable:!0,get:function(){return QA.TypeInfo}});Object.defineProperty(fe,"assertValidName",{enumerable:!0,get:function(){return KA.assertValidName}});Object.defineProperty(fe,"astFromValue",{enumerable:!0,get:function(){return LW.astFromValue}});Object.defineProperty(fe,"buildASTSchema",{enumerable:!0,get:function(){return $A.buildASTSchema}});Object.defineProperty(fe,"buildClientSchema",{enumerable:!0,get:function(){return SW.buildClientSchema}});Object.defineProperty(fe,"buildSchema",{enumerable:!0,get:function(){return $A.buildSchema}});Object.defineProperty(fe,"coerceInputValue",{enumerable:!0,get:function(){return PW.coerceInputValue}});Object.defineProperty(fe,"concatAST",{enumerable:!0,get:function(){return xW.concatAST}});Object.defineProperty(fe,"doTypesOverlap",{enumerable:!0,get:function(){return NS.doTypesOverlap}});Object.defineProperty(fe,"extendSchema",{enumerable:!0,get:function(){return wW.extendSchema}});Object.defineProperty(fe,"findBreakingChanges",{enumerable:!0,get:function(){return rv.findBreakingChanges}});Object.defineProperty(fe,"findDangerousChanges",{enumerable:!0,get:function(){return rv.findDangerousChanges}});Object.defineProperty(fe,"getIntrospectionQuery",{enumerable:!0,get:function(){return EW.getIntrospectionQuery}});Object.defineProperty(fe,"getOperationAST",{enumerable:!0,get:function(){return TW.getOperationAST}});Object.defineProperty(fe,"getOperationRootType",{enumerable:!0,get:function(){return _W.getOperationRootType}});Object.defineProperty(fe,"introspectionFromSchema",{enumerable:!0,get:function(){return bW.introspectionFromSchema}});Object.defineProperty(fe,"isEqualType",{enumerable:!0,get:function(){return NS.isEqualType}});Object.defineProperty(fe,"isTypeSubTypeOf",{enumerable:!0,get:function(){return NS.isTypeSubTypeOf}});Object.defineProperty(fe,"isValidNameError",{enumerable:!0,get:function(){return KA.isValidNameError}});Object.defineProperty(fe,"lexicographicSortSchema",{enumerable:!0,get:function(){return OW.lexicographicSortSchema}});Object.defineProperty(fe,"printIntrospectionSchema",{enumerable:!0,get:function(){return OS.printIntrospectionSchema}});Object.defineProperty(fe,"printSchema",{enumerable:!0,get:function(){return OS.printSchema}});Object.defineProperty(fe,"printType",{enumerable:!0,get:function(){return OS.printType}});Object.defineProperty(fe,"separateOperations",{enumerable:!0,get:function(){return CW.separateOperations}});Object.defineProperty(fe,"stripIgnoredCharacters",{enumerable:!0,get:function(){return kW.stripIgnoredCharacters}});Object.defineProperty(fe,"typeFromAST",{enumerable:!0,get:function(){return NW.typeFromAST}});Object.defineProperty(fe,"valueFromAST",{enumerable:!0,get:function(){return IW.valueFromAST}});Object.defineProperty(fe,"valueFromASTUntyped",{enumerable:!0,get:function(){return RW.valueFromASTUntyped}});Object.defineProperty(fe,"visitWithTypeInfo",{enumerable:!0,get:function(){return QA.visitWithTypeInfo}});var EW=uS(),TW=eA(),_W=tA(),bW=rA(),SW=iA(),$A=mA(),wW=dS(),OW=gA(),OS=OA(),NW=ri(),IW=zc(),RW=RT(),LW=Fc(),QA=bm(),PW=W_(),xW=NA(),CW=LA(),kW=CA(),NS=Pc(),KA=DA(),rv=GA()});var IS=y(T=>{"use strict";Object.defineProperty(T,"__esModule",{value:!0});Object.defineProperty(T,"BREAK",{enumerable:!0,get:function(){return he.BREAK}});Object.defineProperty(T,"BreakingChangeType",{enumerable:!0,get:function(){return me.BreakingChangeType}});Object.defineProperty(T,"DEFAULT_DEPRECATION_REASON",{enumerable:!0,get:function(){return C.DEFAULT_DEPRECATION_REASON}});Object.defineProperty(T,"DangerousChangeType",{enumerable:!0,get:function(){return me.DangerousChangeType}});Object.defineProperty(T,"DirectiveLocation",{enumerable:!0,get:function(){return he.DirectiveLocation}});Object.defineProperty(T,"ExecutableDefinitionsRule",{enumerable:!0,get:function(){return ee.ExecutableDefinitionsRule}});Object.defineProperty(T,"FieldsOnCorrectTypeRule",{enumerable:!0,get:function(){return ee.FieldsOnCorrectTypeRule}});Object.defineProperty(T,"FragmentsOnCompositeTypesRule",{enumerable:!0,get:function(){return ee.FragmentsOnCompositeTypesRule}});Object.defineProperty(T,"GRAPHQL_MAX_INT",{enumerable:!0,get:function(){return C.GRAPHQL_MAX_INT}});Object.defineProperty(T,"GRAPHQL_MIN_INT",{enumerable:!0,get:function(){return C.GRAPHQL_MIN_INT}});Object.defineProperty(T,"GraphQLBoolean",{enumerable:!0,get:function(){return C.GraphQLBoolean}});Object.defineProperty(T,"GraphQLDeprecatedDirective",{enumerable:!0,get:function(){return C.GraphQLDeprecatedDirective}});Object.defineProperty(T,"GraphQLDirective",{enumerable:!0,get:function(){return C.GraphQLDirective}});Object.defineProperty(T,"GraphQLEnumType",{enumerable:!0,get:function(){return C.GraphQLEnumType}});Object.defineProperty(T,"GraphQLError",{enumerable:!0,get:function(){return lf.GraphQLError}});Object.defineProperty(T,"GraphQLFloat",{enumerable:!0,get:function(){return C.GraphQLFloat}});Object.defineProperty(T,"GraphQLID",{enumerable:!0,get:function(){return C.GraphQLID}});Object.defineProperty(T,"GraphQLIncludeDirective",{enumerable:!0,get:function(){return C.GraphQLIncludeDirective}});Object.defineProperty(T,"GraphQLInputObjectType",{enumerable:!0,get:function(){return C.GraphQLInputObjectType}});Object.defineProperty(T,"GraphQLInt",{enumerable:!0,get:function(){return C.GraphQLInt}});Object.defineProperty(T,"GraphQLInterfaceType",{enumerable:!0,get:function(){return C.GraphQLInterfaceType}});Object.defineProperty(T,"GraphQLList",{enumerable:!0,get:function(){return C.GraphQLList}});Object.defineProperty(T,"GraphQLNonNull",{enumerable:!0,get:function(){return C.GraphQLNonNull}});Object.defineProperty(T,"GraphQLObjectType",{enumerable:!0,get:function(){return C.GraphQLObjectType}});Object.defineProperty(T,"GraphQLScalarType",{enumerable:!0,get:function(){return C.GraphQLScalarType}});Object.defineProperty(T,"GraphQLSchema",{enumerable:!0,get:function(){return C.GraphQLSchema}});Object.defineProperty(T,"GraphQLSkipDirective",{enumerable:!0,get:function(){return C.GraphQLSkipDirective}});Object.defineProperty(T,"GraphQLSpecifiedByDirective",{enumerable:!0,get:function(){return C.GraphQLSpecifiedByDirective}});Object.defineProperty(T,"GraphQLString",{enumerable:!0,get:function(){return C.GraphQLString}});Object.defineProperty(T,"GraphQLUnionType",{enumerable:!0,get:function(){return C.GraphQLUnionType}});Object.defineProperty(T,"Kind",{enumerable:!0,get:function(){return he.Kind}});Object.defineProperty(T,"KnownArgumentNamesRule",{enumerable:!0,get:function(){return ee.KnownArgumentNamesRule}});Object.defineProperty(T,"KnownDirectivesRule",{enumerable:!0,get:function(){return ee.KnownDirectivesRule}});Object.defineProperty(T,"KnownFragmentNamesRule",{enumerable:!0,get:function(){return ee.KnownFragmentNamesRule}});Object.defineProperty(T,"KnownTypeNamesRule",{enumerable:!0,get:function(){return ee.KnownTypeNamesRule}});Object.defineProperty(T,"Lexer",{enumerable:!0,get:function(){return he.Lexer}});Object.defineProperty(T,"Location",{enumerable:!0,get:function(){return he.Location}});Object.defineProperty(T,"LoneAnonymousOperationRule",{enumerable:!0,get:function(){return ee.LoneAnonymousOperationRule}});Object.defineProperty(T,"LoneSchemaDefinitionRule",{enumerable:!0,get:function(){return ee.LoneSchemaDefinitionRule}});Object.defineProperty(T,"NoDeprecatedCustomRule",{enumerable:!0,get:function(){return ee.NoDeprecatedCustomRule}});Object.defineProperty(T,"NoFragmentCyclesRule",{enumerable:!0,get:function(){return ee.NoFragmentCyclesRule}});Object.defineProperty(T,"NoSchemaIntrospectionCustomRule",{enumerable:!0,get:function(){return ee.NoSchemaIntrospectionCustomRule}});Object.defineProperty(T,"NoUndefinedVariablesRule",{enumerable:!0,get:function(){return ee.NoUndefinedVariablesRule}});Object.defineProperty(T,"NoUnusedFragmentsRule",{enumerable:!0,get:function(){return ee.NoUnusedFragmentsRule}});Object.defineProperty(T,"NoUnusedVariablesRule",{enumerable:!0,get:function(){return ee.NoUnusedVariablesRule}});Object.defineProperty(T,"OperationTypeNode",{enumerable:!0,get:function(){return he.OperationTypeNode}});Object.defineProperty(T,"OverlappingFieldsCanBeMergedRule",{enumerable:!0,get:function(){return ee.OverlappingFieldsCanBeMergedRule}});Object.defineProperty(T,"PossibleFragmentSpreadsRule",{enumerable:!0,get:function(){return ee.PossibleFragmentSpreadsRule}});Object.defineProperty(T,"PossibleTypeExtensionsRule",{enumerable:!0,get:function(){return ee.PossibleTypeExtensionsRule}});Object.defineProperty(T,"ProvidedRequiredArgumentsRule",{enumerable:!0,get:function(){return ee.ProvidedRequiredArgumentsRule}});Object.defineProperty(T,"ScalarLeafsRule",{enumerable:!0,get:function(){return ee.ScalarLeafsRule}});Object.defineProperty(T,"SchemaMetaFieldDef",{enumerable:!0,get:function(){return C.SchemaMetaFieldDef}});Object.defineProperty(T,"SingleFieldSubscriptionsRule",{enumerable:!0,get:function(){return ee.SingleFieldSubscriptionsRule}});Object.defineProperty(T,"Source",{enumerable:!0,get:function(){return he.Source}});Object.defineProperty(T,"Token",{enumerable:!0,get:function(){return he.Token}});Object.defineProperty(T,"TokenKind",{enumerable:!0,get:function(){return he.TokenKind}});Object.defineProperty(T,"TypeInfo",{enumerable:!0,get:function(){return me.TypeInfo}});Object.defineProperty(T,"TypeKind",{enumerable:!0,get:function(){return C.TypeKind}});Object.defineProperty(T,"TypeMetaFieldDef",{enumerable:!0,get:function(){return C.TypeMetaFieldDef}});Object.defineProperty(T,"TypeNameMetaFieldDef",{enumerable:!0,get:function(){return C.TypeNameMetaFieldDef}});Object.defineProperty(T,"UniqueArgumentDefinitionNamesRule",{enumerable:!0,get:function(){return ee.UniqueArgumentDefinitionNamesRule}});Object.defineProperty(T,"UniqueArgumentNamesRule",{enumerable:!0,get:function(){return ee.UniqueArgumentNamesRule}});Object.defineProperty(T,"UniqueDirectiveNamesRule",{enumerable:!0,get:function(){return ee.UniqueDirectiveNamesRule}});Object.defineProperty(T,"UniqueDirectivesPerLocationRule",{enumerable:!0,get:function(){return ee.UniqueDirectivesPerLocationRule}});Object.defineProperty(T,"UniqueEnumValueNamesRule",{enumerable:!0,get:function(){return ee.UniqueEnumValueNamesRule}});Object.defineProperty(T,"UniqueFieldDefinitionNamesRule",{enumerable:!0,get:function(){return ee.UniqueFieldDefinitionNamesRule}});Object.defineProperty(T,"UniqueFragmentNamesRule",{enumerable:!0,get:function(){return ee.UniqueFragmentNamesRule}});Object.defineProperty(T,"UniqueInputFieldNamesRule",{enumerable:!0,get:function(){return ee.UniqueInputFieldNamesRule}});Object.defineProperty(T,"UniqueOperationNamesRule",{enumerable:!0,get:function(){return ee.UniqueOperationNamesRule}});Object.defineProperty(T,"UniqueOperationTypesRule",{enumerable:!0,get:function(){return ee.UniqueOperationTypesRule}});Object.defineProperty(T,"UniqueTypeNamesRule",{enumerable:!0,get:function(){return ee.UniqueTypeNamesRule}});Object.defineProperty(T,"UniqueVariableNamesRule",{enumerable:!0,get:function(){return ee.UniqueVariableNamesRule}});Object.defineProperty(T,"ValidationContext",{enumerable:!0,get:function(){return ee.ValidationContext}});Object.defineProperty(T,"ValuesOfCorrectTypeRule",{enumerable:!0,get:function(){return ee.ValuesOfCorrectTypeRule}});Object.defineProperty(T,"VariablesAreInputTypesRule",{enumerable:!0,get:function(){return ee.VariablesAreInputTypesRule}});Object.defineProperty(T,"VariablesInAllowedPositionRule",{enumerable:!0,get:function(){return ee.VariablesInAllowedPositionRule}});Object.defineProperty(T,"__Directive",{enumerable:!0,get:function(){return C.__Directive}});Object.defineProperty(T,"__DirectiveLocation",{enumerable:!0,get:function(){return C.__DirectiveLocation}});Object.defineProperty(T,"__EnumValue",{enumerable:!0,get:function(){return C.__EnumValue}});Object.defineProperty(T,"__Field",{enumerable:!0,get:function(){return C.__Field}});Object.defineProperty(T,"__InputValue",{enumerable:!0,get:function(){return C.__InputValue}});Object.defineProperty(T,"__Schema",{enumerable:!0,get:function(){return C.__Schema}});Object.defineProperty(T,"__Type",{enumerable:!0,get:function(){return C.__Type}});Object.defineProperty(T,"__TypeKind",{enumerable:!0,get:function(){return C.__TypeKind}});Object.defineProperty(T,"assertAbstractType",{enumerable:!0,get:function(){return C.assertAbstractType}});Object.defineProperty(T,"assertCompositeType",{enumerable:!0,get:function(){return C.assertCompositeType}});Object.defineProperty(T,"assertDirective",{enumerable:!0,get:function(){return C.assertDirective}});Object.defineProperty(T,"assertEnumType",{enumerable:!0,get:function(){return C.assertEnumType}});Object.defineProperty(T,"assertEnumValueName",{enumerable:!0,get:function(){return C.assertEnumValueName}});Object.defineProperty(T,"assertInputObjectType",{enumerable:!0,get:function(){return C.assertInputObjectType}});Object.defineProperty(T,"assertInputType",{enumerable:!0,get:function(){return C.assertInputType}});Object.defineProperty(T,"assertInterfaceType",{enumerable:!0,get:function(){return C.assertInterfaceType}});Object.defineProperty(T,"assertLeafType",{enumerable:!0,get:function(){return C.assertLeafType}});Object.defineProperty(T,"assertListType",{enumerable:!0,get:function(){return C.assertListType}});Object.defineProperty(T,"assertName",{enumerable:!0,get:function(){return C.assertName}});Object.defineProperty(T,"assertNamedType",{enumerable:!0,get:function(){return C.assertNamedType}});Object.defineProperty(T,"assertNonNullType",{enumerable:!0,get:function(){return C.assertNonNullType}});Object.defineProperty(T,"assertNullableType",{enumerable:!0,get:function(){return C.assertNullableType}});Object.defineProperty(T,"assertObjectType",{enumerable:!0,get:function(){return C.assertObjectType}});Object.defineProperty(T,"assertOutputType",{enumerable:!0,get:function(){return C.assertOutputType}});Object.defineProperty(T,"assertScalarType",{enumerable:!0,get:function(){return C.assertScalarType}});Object.defineProperty(T,"assertSchema",{enumerable:!0,get:function(){return C.assertSchema}});Object.defineProperty(T,"assertType",{enumerable:!0,get:function(){return C.assertType}});Object.defineProperty(T,"assertUnionType",{enumerable:!0,get:function(){return C.assertUnionType}});Object.defineProperty(T,"assertValidName",{enumerable:!0,get:function(){return me.assertValidName}});Object.defineProperty(T,"assertValidSchema",{enumerable:!0,get:function(){return C.assertValidSchema}});Object.defineProperty(T,"assertWrappingType",{enumerable:!0,get:function(){return C.assertWrappingType}});Object.defineProperty(T,"astFromValue",{enumerable:!0,get:function(){return me.astFromValue}});Object.defineProperty(T,"buildASTSchema",{enumerable:!0,get:function(){return me.buildASTSchema}});Object.defineProperty(T,"buildClientSchema",{enumerable:!0,get:function(){return me.buildClientSchema}});Object.defineProperty(T,"buildSchema",{enumerable:!0,get:function(){return me.buildSchema}});Object.defineProperty(T,"coerceInputValue",{enumerable:!0,get:function(){return me.coerceInputValue}});Object.defineProperty(T,"concatAST",{enumerable:!0,get:function(){return me.concatAST}});Object.defineProperty(T,"createSourceEventStream",{enumerable:!0,get:function(){return ui.createSourceEventStream}});Object.defineProperty(T,"defaultFieldResolver",{enumerable:!0,get:function(){return ui.defaultFieldResolver}});Object.defineProperty(T,"defaultTypeResolver",{enumerable:!0,get:function(){return ui.defaultTypeResolver}});Object.defineProperty(T,"doTypesOverlap",{enumerable:!0,get:function(){return me.doTypesOverlap}});Object.defineProperty(T,"execute",{enumerable:!0,get:function(){return ui.execute}});Object.defineProperty(T,"executeSync",{enumerable:!0,get:function(){return ui.executeSync}});Object.defineProperty(T,"extendSchema",{enumerable:!0,get:function(){return me.extendSchema}});Object.defineProperty(T,"findBreakingChanges",{enumerable:!0,get:function(){return me.findBreakingChanges}});Object.defineProperty(T,"findDangerousChanges",{enumerable:!0,get:function(){return me.findDangerousChanges}});Object.defineProperty(T,"formatError",{enumerable:!0,get:function(){return lf.formatError}});Object.defineProperty(T,"getArgumentValues",{enumerable:!0,get:function(){return ui.getArgumentValues}});Object.defineProperty(T,"getDirectiveValues",{enumerable:!0,get:function(){return ui.getDirectiveValues}});Object.defineProperty(T,"getEnterLeaveForKind",{enumerable:!0,get:function(){return he.getEnterLeaveForKind}});Object.defineProperty(T,"getIntrospectionQuery",{enumerable:!0,get:function(){return me.getIntrospectionQuery}});Object.defineProperty(T,"getLocation",{enumerable:!0,get:function(){return he.getLocation}});Object.defineProperty(T,"getNamedType",{enumerable:!0,get:function(){return C.getNamedType}});Object.defineProperty(T,"getNullableType",{enumerable:!0,get:function(){return C.getNullableType}});Object.defineProperty(T,"getOperationAST",{enumerable:!0,get:function(){return me.getOperationAST}});Object.defineProperty(T,"getOperationRootType",{enumerable:!0,get:function(){return me.getOperationRootType}});Object.defineProperty(T,"getVariableValues",{enumerable:!0,get:function(){return ui.getVariableValues}});Object.defineProperty(T,"getVisitFn",{enumerable:!0,get:function(){return he.getVisitFn}});Object.defineProperty(T,"graphql",{enumerable:!0,get:function(){return zA.graphql}});Object.defineProperty(T,"graphqlSync",{enumerable:!0,get:function(){return zA.graphqlSync}});Object.defineProperty(T,"introspectionFromSchema",{enumerable:!0,get:function(){return me.introspectionFromSchema}});Object.defineProperty(T,"introspectionTypes",{enumerable:!0,get:function(){return C.introspectionTypes}});Object.defineProperty(T,"isAbstractType",{enumerable:!0,get:function(){return C.isAbstractType}});Object.defineProperty(T,"isCompositeType",{enumerable:!0,get:function(){return C.isCompositeType}});Object.defineProperty(T,"isConstValueNode",{enumerable:!0,get:function(){return he.isConstValueNode}});Object.defineProperty(T,"isDefinitionNode",{enumerable:!0,get:function(){return he.isDefinitionNode}});Object.defineProperty(T,"isDirective",{enumerable:!0,get:function(){return C.isDirective}});Object.defineProperty(T,"isEnumType",{enumerable:!0,get:function(){return C.isEnumType}});Object.defineProperty(T,"isEqualType",{enumerable:!0,get:function(){return me.isEqualType}});Object.defineProperty(T,"isExecutableDefinitionNode",{enumerable:!0,get:function(){return he.isExecutableDefinitionNode}});Object.defineProperty(T,"isInputObjectType",{enumerable:!0,get:function(){return C.isInputObjectType}});Object.defineProperty(T,"isInputType",{enumerable:!0,get:function(){return C.isInputType}});Object.defineProperty(T,"isInterfaceType",{enumerable:!0,get:function(){return C.isInterfaceType}});Object.defineProperty(T,"isIntrospectionType",{enumerable:!0,get:function(){return C.isIntrospectionType}});Object.defineProperty(T,"isLeafType",{enumerable:!0,get:function(){return C.isLeafType}});Object.defineProperty(T,"isListType",{enumerable:!0,get:function(){return C.isListType}});Object.defineProperty(T,"isNamedType",{enumerable:!0,get:function(){return C.isNamedType}});Object.defineProperty(T,"isNonNullType",{enumerable:!0,get:function(){return C.isNonNullType}});Object.defineProperty(T,"isNullableType",{enumerable:!0,get:function(){return C.isNullableType}});Object.defineProperty(T,"isObjectType",{enumerable:!0,get:function(){return C.isObjectType}});Object.defineProperty(T,"isOutputType",{enumerable:!0,get:function(){return C.isOutputType}});Object.defineProperty(T,"isRequiredArgument",{enumerable:!0,get:function(){return C.isRequiredArgument}});Object.defineProperty(T,"isRequiredInputField",{enumerable:!0,get:function(){return C.isRequiredInputField}});Object.defineProperty(T,"isScalarType",{enumerable:!0,get:function(){return C.isScalarType}});Object.defineProperty(T,"isSchema",{enumerable:!0,get:function(){return C.isSchema}});Object.defineProperty(T,"isSelectionNode",{enumerable:!0,get:function(){return he.isSelectionNode}});Object.defineProperty(T,"isSpecifiedDirective",{enumerable:!0,get:function(){return C.isSpecifiedDirective}});Object.defineProperty(T,"isSpecifiedScalarType",{enumerable:!0,get:function(){return C.isSpecifiedScalarType}});Object.defineProperty(T,"isType",{enumerable:!0,get:function(){return C.isType}});Object.defineProperty(T,"isTypeDefinitionNode",{enumerable:!0,get:function(){return he.isTypeDefinitionNode}});Object.defineProperty(T,"isTypeExtensionNode",{enumerable:!0,get:function(){return he.isTypeExtensionNode}});Object.defineProperty(T,"isTypeNode",{enumerable:!0,get:function(){return he.isTypeNode}});Object.defineProperty(T,"isTypeSubTypeOf",{enumerable:!0,get:function(){return me.isTypeSubTypeOf}});Object.defineProperty(T,"isTypeSystemDefinitionNode",{enumerable:!0,get:function(){return he.isTypeSystemDefinitionNode}});Object.defineProperty(T,"isTypeSystemExtensionNode",{enumerable:!0,get:function(){return he.isTypeSystemExtensionNode}});Object.defineProperty(T,"isUnionType",{enumerable:!0,get:function(){return C.isUnionType}});Object.defineProperty(T,"isValidNameError",{enumerable:!0,get:function(){return me.isValidNameError}});Object.defineProperty(T,"isValueNode",{enumerable:!0,get:function(){return he.isValueNode}});Object.defineProperty(T,"isWrappingType",{enumerable:!0,get:function(){return C.isWrappingType}});Object.defineProperty(T,"lexicographicSortSchema",{enumerable:!0,get:function(){return me.lexicographicSortSchema}});Object.defineProperty(T,"locatedError",{enumerable:!0,get:function(){return lf.locatedError}});Object.defineProperty(T,"parse",{enumerable:!0,get:function(){return he.parse}});Object.defineProperty(T,"parseConstValue",{enumerable:!0,get:function(){return he.parseConstValue}});Object.defineProperty(T,"parseType",{enumerable:!0,get:function(){return he.parseType}});Object.defineProperty(T,"parseValue",{enumerable:!0,get:function(){return he.parseValue}});Object.defineProperty(T,"print",{enumerable:!0,get:function(){return he.print}});Object.defineProperty(T,"printError",{enumerable:!0,get:function(){return lf.printError}});Object.defineProperty(T,"printIntrospectionSchema",{enumerable:!0,get:function(){return me.printIntrospectionSchema}});Object.defineProperty(T,"printLocation",{enumerable:!0,get:function(){return he.printLocation}});Object.defineProperty(T,"printSchema",{enumerable:!0,get:function(){return me.printSchema}});Object.defineProperty(T,"printSourceLocation",{enumerable:!0,get:function(){return he.printSourceLocation}});Object.defineProperty(T,"printType",{enumerable:!0,get:function(){return me.printType}});Object.defineProperty(T,"resolveObjMapThunk",{enumerable:!0,get:function(){return C.resolveObjMapThunk}});Object.defineProperty(T,"resolveReadonlyArrayThunk",{enumerable:!0,get:function(){return C.resolveReadonlyArrayThunk}});Object.defineProperty(T,"responsePathAsArray",{enumerable:!0,get:function(){return ui.responsePathAsArray}});Object.defineProperty(T,"separateOperations",{enumerable:!0,get:function(){return me.separateOperations}});Object.defineProperty(T,"specifiedDirectives",{enumerable:!0,get:function(){return C.specifiedDirectives}});Object.defineProperty(T,"specifiedRules",{enumerable:!0,get:function(){return ee.specifiedRules}});Object.defineProperty(T,"specifiedScalarTypes",{enumerable:!0,get:function(){return C.specifiedScalarTypes}});Object.defineProperty(T,"stripIgnoredCharacters",{enumerable:!0,get:function(){return me.stripIgnoredCharacters}});Object.defineProperty(T,"subscribe",{enumerable:!0,get:function(){return ui.subscribe}});Object.defineProperty(T,"syntaxError",{enumerable:!0,get:function(){return lf.syntaxError}});Object.defineProperty(T,"typeFromAST",{enumerable:!0,get:function(){return me.typeFromAST}});Object.defineProperty(T,"validate",{enumerable:!0,get:function(){return ee.validate}});Object.defineProperty(T,"validateSchema",{enumerable:!0,get:function(){return C.validateSchema}});Object.defineProperty(T,"valueFromAST",{enumerable:!0,get:function(){return me.valueFromAST}});Object.defineProperty(T,"valueFromASTUntyped",{enumerable:!0,get:function(){return me.valueFromASTUntyped}});Object.defineProperty(T,"version",{enumerable:!0,get:function(){return HA.version}});Object.defineProperty(T,"versionInfo",{enumerable:!0,get:function(){return HA.versionInfo}});Object.defineProperty(T,"visit",{enumerable:!0,get:function(){return he.visit}});Object.defineProperty(T,"visitInParallel",{enumerable:!0,get:function(){return he.visitInParallel}});Object.defineProperty(T,"visitWithTypeInfo",{enumerable:!0,get:function(){return me.visitWithTypeInfo}});var HA=Hx(),zA=jD(),C=qD(),he=VD(),ui=WD(),ee=JD(),lf=ZD(),me=BA()});var JA=y(qt=>{"use strict";Object.defineProperty(qt,"__esModule",{value:!0});qt.pathToRegexp=qt.tokensToRegexp=qt.regexpToFunction=qt.match=qt.tokensToFunction=qt.compile=qt.parse=void 0;function DW(e){for(var t=[],r=0;r<e.length;){var n=e[r];if(n==="*"||n==="+"||n==="?"){t.push({type:"MODIFIER",index:r,value:e[r++]});continue}if(n==="\\"){t.push({type:"ESCAPED_CHAR",index:r++,value:e[r++]});continue}if(n==="{"){t.push({type:"OPEN",index:r,value:e[r++]});continue}if(n==="}"){t.push({type:"CLOSE",index:r,value:e[r++]});continue}if(n===":"){for(var i="",o=r+1;o<e.length;){var a=e.charCodeAt(o);if(a>=48&&a<=57||a>=65&&a<=90||a>=97&&a<=122||a===95){i+=e[o++];continue}break}if(!i)throw new TypeError("Missing parameter name at ".concat(r));t.push({type:"NAME",index:r,value:i}),r=o;continue}if(n==="("){var s=1,u="",o=r+1;if(e[o]==="?")throw new TypeError('Pattern cannot start with "?" at '.concat(o));for(;o<e.length;){if(e[o]==="\\"){u+=e[o++]+e[o++];continue}if(e[o]===")"){if(s--,s===0){o++;break}}else if(e[o]==="("&&(s++,e[o+1]!=="?"))throw new TypeError("Capturing groups are not allowed at ".concat(o));u+=e[o++]}if(s)throw new TypeError("Unbalanced pattern at ".concat(r));if(!u)throw new TypeError("Missing pattern at ".concat(r));t.push({type:"PATTERN",index:r,value:u}),r=o;continue}t.push({type:"CHAR",index:r,value:e[r++]})}return t.push({type:"END",index:r,value:""}),t}function RS(e,t){t===void 0&&(t={});for(var r=DW(e),n=t.prefixes,i=n===void 0?"./":n,o="[^".concat(mu(t.delimiter||"/#?"),"]+?"),a=[],s=0,u=0,l="",c=function(R){if(u<r.length&&r[u].type===R)return r[u++].value},f=function(R){var O=c(R);if(O!==void 0)return O;var L=r[u],S=L.type,I=L.index;throw new TypeError("Unexpected ".concat(S," at ").concat(I,", expected ").concat(R))},p=function(){for(var R="",O;O=c("CHAR")||c("ESCAPED_CHAR");)R+=O;return R};u<r.length;){var d=c("CHAR"),m=c("NAME"),E=c("PATTERN");if(m||E){var b=d||"";i.indexOf(b)===-1&&(l+=b,b=""),l&&(a.push(l),l=""),a.push({name:m||s++,prefix:b,suffix:"",pattern:E||o,modifier:c("MODIFIER")||""});continue}var h=d||c("ESCAPED_CHAR");if(h){l+=h;continue}l&&(a.push(l),l="");var v=c("OPEN");if(v){var b=p(),g=c("NAME")||"",_=c("PATTERN")||"",N=p();f("CLOSE"),a.push({name:g||(_?s++:""),pattern:g&&!_?o:_,prefix:b,suffix:N,modifier:c("MODIFIER")||""});continue}f("END")}return a}qt.parse=RS;function AW(e,t){return WA(RS(e,t),t)}qt.compile=AW;function WA(e,t){t===void 0&&(t={});var r=LS(t),n=t.encode,i=n===void 0?function(u){return u}:n,o=t.validate,a=o===void 0?!0:o,s=e.map(function(u){if(typeof u=="object")return new RegExp("^(?:".concat(u.pattern,")$"),r)});return function(u){for(var l="",c=0;c<e.length;c++){var f=e[c];if(typeof f=="string"){l+=f;continue}var p=u?u[f.name]:void 0,d=f.modifier==="?"||f.modifier==="*",m=f.modifier==="*"||f.modifier==="+";if(Array.isArray(p)){if(!m)throw new TypeError('Expected "'.concat(f.name,'" to not repeat, but got an array'));if(p.length===0){if(d)continue;throw new TypeError('Expected "'.concat(f.name,'" to not be empty'))}for(var E=0;E<p.length;E++){var b=i(p[E],f);if(a&&!s[c].test(b))throw new TypeError('Expected all "'.concat(f.name,'" to match "').concat(f.pattern,'", but got "').concat(b,'"'));l+=f.prefix+b+f.suffix}continue}if(typeof p=="string"||typeof p=="number"){var b=i(String(p),f);if(a&&!s[c].test(b))throw new TypeError('Expected "'.concat(f.name,'" to match "').concat(f.pattern,'", but got "').concat(b,'"'));l+=f.prefix+b+f.suffix;continue}if(!d){var h=m?"an array":"a string";throw new TypeError('Expected "'.concat(f.name,'" to be ').concat(h))}}return l}}qt.tokensToFunction=WA;function jW(e,t){var r=[],n=PS(e,r,t);return YA(n,r,t)}qt.match=jW;function YA(e,t,r){r===void 0&&(r={});var n=r.decode,i=n===void 0?function(o){return o}:n;return function(o){var a=e.exec(o);if(!a)return!1;for(var s=a[0],u=a.index,l=Object.create(null),c=function(p){if(a[p]===void 0)return"continue";var d=t[p-1];d.modifier==="*"||d.modifier==="+"?l[d.name]=a[p].split(d.prefix+d.suffix).map(function(m){return i(m,d)}):l[d.name]=i(a[p],d)},f=1;f<a.length;f++)c(f);return{path:s,index:u,params:l}}}qt.regexpToFunction=YA;function mu(e){return e.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1")}function LS(e){return e&&e.sensitive?"":"i"}function FW(e,t){if(!t)return e;for(var r=/\((?:\?<(.*?)>)?(?!\?)/g,n=0,i=r.exec(e.source);i;)t.push({name:i[1]||n++,prefix:"",suffix:"",modifier:"",pattern:""}),i=r.exec(e.source);return e}function MW(e,t,r){var n=e.map(function(i){return PS(i,t,r).source});return new RegExp("(?:".concat(n.join("|"),")"),LS(r))}function qW(e,t,r){return XA(RS(e,r),t,r)}function XA(e,t,r){r===void 0&&(r={});for(var n=r.strict,i=n===void 0?!1:n,o=r.start,a=o===void 0?!0:o,s=r.end,u=s===void 0?!0:s,l=r.encode,c=l===void 0?function(I){return I}:l,f=r.delimiter,p=f===void 0?"/#?":f,d=r.endsWith,m=d===void 0?"":d,E="[".concat(mu(m),"]|$"),b="[".concat(mu(p),"]"),h=a?"^":"",v=0,g=e;v<g.length;v++){var _=g[v];if(typeof _=="string")h+=mu(c(_));else{var N=mu(c(_.prefix)),R=mu(c(_.suffix));if(_.pattern)if(t&&t.push(_),N||R)if(_.modifier==="+"||_.modifier==="*"){var O=_.modifier==="*"?"?":"";h+="(?:".concat(N,"((?:").concat(_.pattern,")(?:").concat(R).concat(N,"(?:").concat(_.pattern,"))*)").concat(R,")").concat(O)}else h+="(?:".concat(N,"(").concat(_.pattern,")").concat(R,")").concat(_.modifier);else _.modifier==="+"||_.modifier==="*"?h+="((?:".concat(_.pattern,")").concat(_.modifier,")"):h+="(".concat(_.pattern,")").concat(_.modifier);else h+="(?:".concat(N).concat(R,")").concat(_.modifier)}}if(u)i||(h+="".concat(b,"?")),h+=r.endsWith?"(?=".concat(E,")"):"$";else{var L=e[e.length-1],S=typeof L=="string"?b.indexOf(L[L.length-1])>-1:L===void 0;i||(h+="(?:".concat(b,"(?=").concat(E,"))?")),S||(h+="(?=".concat(b,"|").concat(E,")"))}return new RegExp(h,LS(r))}qt.tokensToRegexp=XA;function PS(e,t,r){return e instanceof RegExp?FW(e,t):Array.isArray(e)?MW(e,t,r):qW(e,t,r)}qt.pathToRegexp=PS});var xS=y(nv=>{"use strict";Object.defineProperty(nv,"__esModule",{value:!0});nv.getCleanUrl=void 0;function UW(e,t){return t===void 0&&(t=!0),[t&&e.origin,e.pathname].filter(Boolean).join("")}nv.getCleanUrl=UW});var ov=y(iv=>{"use strict";Object.defineProperty(iv,"__esModule",{value:!0});iv.IS_PATCHED_MODULE=void 0;iv.IS_PATCHED_MODULE=Symbol("isPatchedModule")});var ej=y((Loe,ZA)=>{var vu=1e3,yu=vu*60,gu=yu*60,qa=gu*24,VW=qa*7,GW=qa*365.25;ZA.exports=function(e,t){t=t||{};var r=typeof e;if(r==="string"&&e.length>0)return $W(e);if(r==="number"&&isFinite(e))return t.long?KW(e):QW(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))};function $W(e){if(e=String(e),!(e.length>100)){var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(!!t){var r=parseFloat(t[1]),n=(t[2]||"ms").toLowerCase();switch(n){case"years":case"year":case"yrs":case"yr":case"y":return r*GW;case"weeks":case"week":case"w":return r*VW;case"days":case"day":case"d":return r*qa;case"hours":case"hour":case"hrs":case"hr":case"h":return r*gu;case"minutes":case"minute":case"mins":case"min":case"m":return r*yu;case"seconds":case"second":case"secs":case"sec":case"s":return r*vu;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}}}function QW(e){var t=Math.abs(e);return t>=qa?Math.round(e/qa)+"d":t>=gu?Math.round(e/gu)+"h":t>=yu?Math.round(e/yu)+"m":t>=vu?Math.round(e/vu)+"s":e+"ms"}function KW(e){var t=Math.abs(e);return t>=qa?av(e,t,qa,"day"):t>=gu?av(e,t,gu,"hour"):t>=yu?av(e,t,yu,"minute"):t>=vu?av(e,t,vu,"second"):e+" ms"}function av(e,t,r,n){var i=t>=r*1.5;return Math.round(e/r)+" "+n+(i?"s":"")}});var rj=y((Poe,tj)=>{function BW(e){r.debug=r,r.default=r,r.coerce=u,r.disable=o,r.enable=i,r.enabled=a,r.humanize=ej(),r.destroy=l,Object.keys(e).forEach(c=>{r[c]=e[c]}),r.names=[],r.skips=[],r.formatters={};function t(c){let f=0;for(let p=0;p<c.length;p++)f=(f<<5)-f+c.charCodeAt(p),f|=0;return r.colors[Math.abs(f)%r.colors.length]}r.selectColor=t;function r(c){let f,p=null,d,m;function E(...b){if(!E.enabled)return;let h=E,v=Number(new Date),g=v-(f||v);h.diff=g,h.prev=f,h.curr=v,f=v,b[0]=r.coerce(b[0]),typeof b[0]!="string"&&b.unshift("%O");let _=0;b[0]=b[0].replace(/%([a-zA-Z%])/g,(R,O)=>{if(R==="%%")return"%";_++;let L=r.formatters[O];if(typeof L=="function"){let S=b[_];R=L.call(h,S),b.splice(_,1),_--}return R}),r.formatArgs.call(h,b),(h.log||r.log).apply(h,b)}return E.namespace=c,E.useColors=r.useColors(),E.color=r.selectColor(c),E.extend=n,E.destroy=r.destroy,Object.defineProperty(E,"enabled",{enumerable:!0,configurable:!1,get:()=>p!==null?p:(d!==r.namespaces&&(d=r.namespaces,m=r.enabled(c)),m),set:b=>{p=b}}),typeof r.init=="function"&&r.init(E),E}function n(c,f){let p=r(this.namespace+(typeof f>"u"?":":f)+c);return p.log=this.log,p}function i(c){r.save(c),r.namespaces=c,r.names=[],r.skips=[];let f,p=(typeof c=="string"?c:"").split(/[\s,]+/),d=p.length;for(f=0;f<d;f++)!p[f]||(c=p[f].replace(/\*/g,".*?"),c[0]==="-"?r.skips.push(new RegExp("^"+c.slice(1)+"$")):r.names.push(new RegExp("^"+c+"$")))}function o(){let c=[...r.names.map(s),...r.skips.map(s).map(f=>"-"+f)].join(",");return r.enable(""),c}function a(c){if(c[c.length-1]==="*")return!0;let f,p;for(f=0,p=r.skips.length;f<p;f++)if(r.skips[f].test(c))return!1;for(f=0,p=r.names.length;f<p;f++)if(r.names[f].test(c))return!0;return!1}function s(c){return c.toString().substring(2,c.toString().length-2).replace(/\.\*\?$/,"*")}function u(c){return c instanceof Error?c.stack||c.message:c}function l(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return r.enable(r.load()),r}tj.exports=BW});var CS=y((Mr,sv)=>{Mr.formatArgs=zW;Mr.save=WW;Mr.load=YW;Mr.useColors=HW;Mr.storage=XW();Mr.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})();Mr.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function HW(){return typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs)?!0:typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)?!1:typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function zW(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+sv.exports.humanize(this.diff),!this.useColors)return;let t="color: "+this.color;e.splice(1,0,t,"color: inherit");let r=0,n=0;e[0].replace(/%[a-zA-Z%]/g,i=>{i!=="%%"&&(r++,i==="%c"&&(n=r))}),e.splice(n,0,t)}Mr.log=console.debug||console.log||(()=>{});function WW(e){try{e?Mr.storage.setItem("debug",e):Mr.storage.removeItem("debug")}catch{}}function YW(){let e;try{e=Mr.storage.getItem("debug")}catch{}return!e&&typeof process<"u"&&"env"in process&&(e=process.env.DEBUG),e}function XW(){try{return localStorage}catch{}}sv.exports=rj()(Mr);var{formatters:JW}=sv.exports;JW.j=function(e){try{return JSON.stringify(e)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}});var kS=y(Eu=>{"use strict";Object.defineProperty(Eu,"__esModule",{value:!0});Eu.nextTickAsync=Eu.nextTick=void 0;function ZW(e){setTimeout(e,0)}Eu.nextTick=ZW;function eY(e){return new Promise(function(t){setTimeout(function(){t(e())},0)})}Eu.nextTickAsync=eY});var oj=y(It=>{"use strict";var tY=It&&It.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(n[o]=i[o])},e(t,r)};return function(t,r){if(typeof r!="function"&&r!==null)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),DS=It&&It.__awaiter||function(e,t,r,n){function i(o){return o instanceof r?o:new r(function(a){a(o)})}return new(r||(r=Promise))(function(o,a){function s(c){try{l(n.next(c))}catch(f){a(f)}}function u(c){try{l(n.throw(c))}catch(f){a(f)}}function l(c){c.done?o(c.value):i(c.value).then(s,u)}l((n=n.apply(e,t||[])).next())})},AS=It&&It.__generator||function(e,t){var r={label:0,sent:function(){if(o[0]&1)throw o[1];return o[1]},trys:[],ops:[]},n,i,o,a;return a={next:s(0),throw:s(1),return:s(2)},typeof Symbol=="function"&&(a[Symbol.iterator]=function(){return this}),a;function s(l){return function(c){return u([l,c])}}function u(l){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(o=l[0]&2?i.return:l[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,l[1])).done)return o;switch(i=0,o&&(l=[l[0]&2,o.value]),l[0]){case 0:case 1:o=l;break;case 4:return r.label++,{value:l[1],done:!1};case 5:r.label++,i=l[1],l=[0];continue;case 7:l=r.ops.pop(),r.trys.pop();continue;default:if(o=r.trys,!(o=o.length>0&&o[o.length-1])&&(l[0]===6||l[0]===2)){r=0;continue}if(l[0]===3&&(!o||l[1]>o[0]&&l[1]<o[3])){r.label=l[1];break}if(l[0]===6&&r.label<o[1]){r.label=o[1],o=l;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(l);break}o[2]&&r.ops.pop(),r.trys.pop();continue}l=t.call(e,r)}catch(c){l=[6,c],i=0}finally{n=o=0}if(l[0]&5)throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}},nj=It&&It.__read||function(e,t){var r=typeof Symbol=="function"&&e[Symbol.iterator];if(!r)return e;var n=r.call(e),i,o=[],a;try{for(;(t===void 0||t-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(s){a={error:s}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(a)throw a.error}}return o},ij=It&&It.__spreadArray||function(e,t){for(var r=0,n=t.length,i=e.length;r<n;r++,i++)e[i]=t[r];return e};Object.defineProperty(It,"__esModule",{value:!0});It.AsyncEventEmitter=It.AsyncEventEmitterReadyState=void 0;var rY=CS(),nY=ME(),iY=kS(),Tu;(function(e){e.ACTIVE="ACTIVE",e.DEACTIVATED="DEACTIVATED"})(Tu=It.AsyncEventEmitterReadyState||(It.AsyncEventEmitterReadyState={}));var oY=function(e){tY(t,e);function t(){var r=e.call(this)||this;return r.log=rY.debug("async-event-emitter"),r.queue=new Map,r.readyState=Tu.ACTIVE,r}return t.prototype.on=function(r,n){var i=this,o=this.log.extend("on");return o('adding "%s" listener...',r),this.readyState===Tu.DEACTIVATED?(o("the emitter is destroyed, skipping!"),this):e.prototype.on.call(this,r,function(){for(var a=[],s=0;s<arguments.length;s++)a[s]=arguments[s];return DS(i,void 0,void 0,function(){var u,l=this;return AS(this,function(c){return u=this.openListenerQueue(r),o('awaiting the "%s" listener...',r),u.push({args:a,done:new Promise(function(f,p){return DS(l,void 0,void 0,function(){var d;return AS(this,function(m){switch(m.label){case 0:return m.trys.push([0,2,,3]),[4,n.apply(void 0,ij([],nj(a)))];case 1:return m.sent(),f(),o('"%s" listener has resolved!',r),[3,3];case 2:return d=m.sent(),o('"%s" listener has rejected!',d),p(d),[3,3];case 3:return[2]}})})})}),[2]})})})},t.prototype.emit=function(r){for(var n=this,i=[],o=1;o<arguments.length;o++)i[o-1]=arguments[o];var a=this.log.extend("emit");return a('emitting "%s" event...',r),this.readyState===Tu.DEACTIVATED?(a("the emitter is destroyed, skipping!"),!1):(this.openListenerQueue(r),a('appending a one-time cleanup "%s" listener...',r),this.once(r,function(){iY.nextTick(function(){n.queue.delete(r),a('cleaned up "%s" listeners queue!',r)})}),e.prototype.emit.apply(this,ij([r],nj(i))))},t.prototype.untilIdle=function(r,n){return n===void 0&&(n=function(){return!0}),DS(this,void 0,void 0,function(){var i,o=this;return AS(this,function(a){switch(a.label){case 0:return i=this.queue.get(r)||[],[4,Promise.all(i.filter(n).map(function(s){var u=s.done;return u})).finally(function(){o.queue.delete(r)})];case 1:return a.sent(),[2]}})})},t.prototype.openListenerQueue=function(r){var n=this.log.extend("openListenerQueue");n('opening "%s" listeners queue...',r);var i=this.queue.get(r);return i?(n("returning an exising queue:",i),i):(n("no queue found, creating one..."),this.queue.set(r,[]),[])},t.prototype.removeAllListeners=function(r){var n=this.log.extend("removeAllListeners");return n("event:",r),r?(this.queue.delete(r),n('cleared the "%s" listeners queue!',r,this.queue.get(r))):(this.queue.clear(),n("cleared the listeners queue!",this.queue)),e.prototype.removeAllListeners.call(this,r)},t.prototype.activate=function(){var r=this.log.extend("activate");this.readyState=Tu.ACTIVE,r("set state to:",this.readyState)},t.prototype.deactivate=function(){var r=this.log.extend("deactivate");r("removing all listeners..."),this.removeAllListeners(),this.readyState=Tu.DEACTIVATED,r("set state to:",this.readyState)},t}(nY.StrictEventEmitter);It.AsyncEventEmitter=oY});var cf=y(qr=>{"use strict";var aY=qr&&qr.__values||function(e){var t=typeof Symbol=="function"&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&typeof e.length=="number")return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(qr,"__esModule",{value:!0});qr.Interceptor=qr.InterceptorReadyState=qr.deleteGlobalSymbol=qr.getGlobalSymbol=void 0;var sY=CS(),uY=oj(),jS=kS();function FS(e){return globalThis[e]||void 0}qr.getGlobalSymbol=FS;function lY(e,t){globalThis[e]=t}function aj(e){delete globalThis[e]}qr.deleteGlobalSymbol=aj;var Ln;(function(e){e.IDLE="IDLE",e.APPLYING="APPLYING",e.APPLIED="APPLIED",e.DISPOSING="DISPOSING",e.DISPOSED="DISPOSED"})(Ln=qr.InterceptorReadyState||(qr.InterceptorReadyState={}));var cY=function(){function e(t){this.symbol=t,this.readyState=Ln.IDLE,this.emitter=new uY.AsyncEventEmitter,this.subscriptions=[],this.log=sY.debug(t.description),this.emitter.setMaxListeners(0),this.log("constructing the interceptor...")}return e.prototype.checkEnvironment=function(){return!0},e.prototype.apply=function(){var t=this,r=this.log.extend("apply");if(r("applying the interceptor..."),this.readyState===Ln.APPLIED){r("intercepted already applied!");return}var n=this.checkEnvironment();if(!n){r("the interceptor cannot be applied in this environment!");return}this.readyState=Ln.APPLYING,this.emitter.activate(),r("activated the emiter!",this.emitter.readyState);var i=this.getInstance();if(i){r("found a running instance, reusing..."),this.on=function(o,a){r('proxying the "%s" listener',o),i.emitter.addListener(o,a),t.subscriptions.push(function(){i.emitter.removeListener(o,a),r('removed proxied "%s" listener!',o)})},jS.nextTick(function(){t.readyState=Ln.APPLIED});return}r("no running instance found, setting up a new instance..."),this.setup(),this.setInstance(),jS.nextTick(function(){t.readyState=Ln.APPLIED})},e.prototype.setup=function(){},e.prototype.on=function(t,r){var n=this.log.extend("on");if(this.readyState===Ln.DISPOSING||this.readyState===Ln.DISPOSED){n("cannot listen to events, already disposed!");return}n('adding "%s" event listener:',t,r.name),this.emitter.on(t,r)},e.prototype.dispose=function(){var t,r,n=this,i=this.log.extend("dispose");if(this.readyState===Ln.DISPOSED){i("cannot dispose, already disposed!");return}if(i("disposing the interceptor..."),this.readyState=Ln.DISPOSING,!this.getInstance()){i("no interceptors running, skipping dispose...");return}if(this.clearInstance(),i("global symbol deleted:",FS(this.symbol)),this.subscriptions.length>0){i("disposing of %d subscriptions...",this.subscriptions.length);try{for(var o=aY(this.subscriptions),a=o.next();!a.done;a=o.next()){var s=a.value;s()}}catch(u){t={error:u}}finally{try{a&&!a.done&&(r=o.return)&&r.call(o)}finally{if(t)throw t.error}}this.subscriptions=[],i("disposed of all subscriptions!",this.subscriptions.length)}this.emitter.deactivate(),i("destroyed the listener!"),jS.nextTick(function(){n.readyState=Ln.DISPOSED})},e.prototype.getInstance=function(){var t,r=FS(this.symbol);return this.log("retrieved global instance:",(t=r?.constructor)===null||t===void 0?void 0:t.name),r},e.prototype.setInstance=function(){lY(this.symbol,this),this.log("set global instance!",this.symbol.description)},e.prototype.clearInstance=function(){aj(this.symbol),this.log("cleared global instance!",this.symbol.description)},e}();qr.Interceptor=cY});var sj=y(Ao=>{"use strict";var fY=Ao&&Ao.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(n[o]=i[o])},e(t,r)};return function(t,r){if(typeof r!="function"&&r!==null)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),pY=Ao&&Ao.__values||function(e){var t=typeof Symbol=="function"&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&typeof e.length=="number")return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(Ao,"__esModule",{value:!0});Ao.BatchInterceptor=void 0;var dY=cf(),hY=function(e){fY(t,e);function t(r){var n=this;return t.symbol=Symbol(r.name),n=e.call(this,t.symbol)||this,n.interceptors=r.interceptors,n}return t.prototype.setup=function(){var r,n,i=this.log.extend("setup");i("applying all %d interceptors...",this.interceptors.length);var o=function(c){i('applying "%s" interceptor...',c.constructor.name),c.apply(),i("adding interceptor dispose subscription"),a.subscriptions.push(function(){return c.dispose()})},a=this;try{for(var s=pY(this.interceptors),u=s.next();!u.done;u=s.next()){var l=u.value;o(l)}}catch(c){r={error:c}}finally{try{u&&!u.done&&(n=s.return)&&n.call(s)}finally{if(r)throw r.error}}},t.prototype.on=function(r,n){this.interceptors.forEach(function(i){i.on(r,n)})},t}(dY.Interceptor);Ao.BatchInterceptor=hY});var uj=y(Pn=>{"use strict";var mY=Pn&&Pn.__createBinding||(Object.create?function(e,t,r,n){n===void 0&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){n===void 0&&(n=r),e[n]=t[r]}),MS=Pn&&Pn.__exportStar||function(e,t){for(var r in e)r!=="default"&&!Object.prototype.hasOwnProperty.call(t,r)&&mY(t,e,r)};Object.defineProperty(Pn,"__esModule",{value:!0});Pn.getCleanUrl=void 0;MS(ov(),Pn);MS(cf(),Pn);MS(sj(),Pn);var vY=xS();Object.defineProperty(Pn,"getCleanUrl",{enumerable:!0,get:function(){return vY.getCleanUrl}})});var qS=y(jo=>{"use strict";var yY=jo&&jo.__awaiter||function(e,t,r,n){function i(o){return o instanceof r?o:new r(function(a){a(o)})}return new(r||(r=Promise))(function(o,a){function s(c){try{l(n.next(c))}catch(f){a(f)}}function u(c){try{l(n.throw(c))}catch(f){a(f)}}function l(c){c.done?o(c.value):i(c.value).then(s,u)}l((n=n.apply(e,t||[])).next())})},gY=jo&&jo.__generator||function(e,t){var r={label:0,sent:function(){if(o[0]&1)throw o[1];return o[1]},trys:[],ops:[]},n,i,o,a;return a={next:s(0),throw:s(1),return:s(2)},typeof Symbol=="function"&&(a[Symbol.iterator]=function(){return this}),a;function s(l){return function(c){return u([l,c])}}function u(l){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(o=l[0]&2?i.return:l[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,l[1])).done)return o;switch(i=0,o&&(l=[l[0]&2,o.value]),l[0]){case 0:case 1:o=l;break;case 4:return r.label++,{value:l[1],done:!1};case 5:r.label++,i=l[1],l=[0];continue;case 7:l=r.ops.pop(),r.trys.pop();continue;default:if(o=r.trys,!(o=o.length>0&&o[o.length-1])&&(l[0]===6||l[0]===2)){r=0;continue}if(l[0]===3&&(!o||l[1]>o[0]&&l[1]<o[3])){r.label=l[1];break}if(l[0]===6&&r.label<o[1]){r.label=o[1],o=l;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(l);break}o[2]&&r.ops.pop(),r.trys.pop();continue}l=t.call(e,r)}catch(c){l=[6,c],i=0}finally{n=o=0}if(l[0]&5)throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}};Object.defineProperty(jo,"__esModule",{value:!0});jo.createLazyCallback=void 0;function EY(e){var t=this;e===void 0&&(e={});var r=0,n,i,o=new Promise(function(s){i=s}).finally(function(){clearTimeout(n)}),a=function(){for(var s,u=[],l=0;l<arguments.length;l++)u[l]=arguments[l];e.maxCalls&&r>=e.maxCalls&&((s=e.maxCallsCallback)===null||s===void 0||s.call(e)),i(u),r++};return a.invoked=function(){return yY(t,void 0,void 0,function(){return gY(this,function(s){return n=setTimeout(function(){i([])},0),[2,o]})})},a}jo.createLazyCallback=EY});var US=y(uv=>{"use strict";Object.defineProperty(uv,"__esModule",{value:!0});uv.toIsoResponse=void 0;var TY=Tn();function _Y(e){return{status:e.status||200,statusText:e.statusText||"OK",headers:TY.objectToHeaders(e.headers||{}),body:e.body}}uv.toIsoResponse=_Y});var VS=y(lv=>{"use strict";Object.defineProperty(lv,"__esModule",{value:!0});lv.uuidv4=void 0;function bY(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=Math.random()*16|0,r=e=="x"?t:t&3|8;return r.toString(16)})}lv.uuidv4=bY});var cj=y(mr=>{"use strict";var SY=mr&&mr.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(n[o]=i[o])},e(t,r)};return function(t,r){if(typeof r!="function"&&r!==null)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}(),cv=mr&&mr.__assign||function(){return cv=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++){t=arguments[r];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},cv.apply(this,arguments)},$S=mr&&mr.__awaiter||function(e,t,r,n){function i(o){return o instanceof r?o:new r(function(a){a(o)})}return new(r||(r=Promise))(function(o,a){function s(c){try{l(n.next(c))}catch(f){a(f)}}function u(c){try{l(n.throw(c))}catch(f){a(f)}}function l(c){c.done?o(c.value):i(c.value).then(s,u)}l((n=n.apply(e,t||[])).next())})},QS=mr&&mr.__generator||function(e,t){var r={label:0,sent:function(){if(o[0]&1)throw o[1];return o[1]},trys:[],ops:[]},n,i,o,a;return a={next:s(0),throw:s(1),return:s(2)},typeof Symbol=="function"&&(a[Symbol.iterator]=function(){return this}),a;function s(l){return function(c){return u([l,c])}}function u(l){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(o=l[0]&2?i.return:l[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,l[1])).done)return o;switch(i=0,o&&(l=[l[0]&2,o.value]),l[0]){case 0:case 1:o=l;break;case 4:return r.label++,{value:l[1],done:!1};case 5:r.label++,i=l[1],l=[0];continue;case 7:l=r.ops.pop(),r.trys.pop();continue;default:if(o=r.trys,!(o=o.length>0&&o[o.length-1])&&(l[0]===6||l[0]===2)){r=0;continue}if(l[0]===3&&(!o||l[1]>o[0]&&l[1]<o[3])){r.label=l[1];break}if(l[0]===6&&r.label<o[1]){r.label=o[1],o=l;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(l);break}o[2]&&r.ops.pop(),r.trys.pop();continue}l=t.call(e,r)}catch(c){l=[6,c],i=0}finally{n=o=0}if(l[0]&5)throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}},lj=mr&&mr.__read||function(e,t){var r=typeof Symbol=="function"&&e[Symbol.iterator];if(!r)return e;var n=r.call(e),i,o=[],a;try{for(;(t===void 0||t-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(s){a={error:s}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(a)throw a.error}}return o};Object.defineProperty(mr,"__esModule",{value:!0});mr.FetchInterceptor=void 0;var fv=Tn(),wY=Hs(),GS=ov(),OY=cf(),NY=qS(),IY=US(),RY=VS(),LY=function(e){SY(t,e);function t(){return e.call(this,t.symbol)||this}return t.prototype.checkEnvironment=function(){return typeof globalThis<"u"&&typeof globalThis.fetch<"u"},t.prototype.setup=function(){var r=this,n=globalThis.fetch;wY.invariant(!n[GS.IS_PATCHED_MODULE],'Failed to patch the "fetch" module: already patched.'),globalThis.fetch=function(i,o){return $S(r,void 0,void 0,function(){var a,s,u,l,c,f,p,d,m,E=this;return QS(this,function(b){switch(b.label){case 0:return a=new Request(i,o),s=typeof i=="string"?i:i.url,u=a.method,this.log("[%s] %s",u,s),m={id:RY.uuidv4(),url:new URL(s,location.origin),method:u,headers:new fv.Headers(a.headers),credentials:a.credentials},[4,a.clone().text()];case 1:return l=(m.body=b.sent(),m.respondWith=NY.createLazyCallback(),m),this.log("isomorphic request",l),this.log('emitting the "request" event for %d listener(s)...',this.emitter.listenerCount("request")),this.emitter.emit("request",l),this.log("awaiting for the mocked response..."),[4,this.emitter.untilIdle("request",function(h){var v=lj(h.args,1),g=v[0];return g.id===l.id})];case 2:return b.sent(),this.log("all request listeners have been resolved!"),[4,l.respondWith.invoked()];case 3:return c=lj.apply(void 0,[b.sent(),1]),f=c[0],this.log("event.respondWith called with:",f),f?(this.log("received mocked response:",f),p=IY.toIsoResponse(f),this.log("derived isomorphic response:",p),this.emitter.emit("response",l,p),d=new Response(f.body,cv(cv({},p),{headers:fv.flattenHeadersObject(f.headers||{})})),Object.defineProperty(d,"url",{writable:!1,enumerable:!0,configurable:!1,value:l.url.href}),[2,d]):(this.log("no mocked response received!"),[2,n(a).then(function(h){return $S(E,void 0,void 0,function(){var v,g,_,N;return QS(this,function(R){switch(R.label){case 0:return v=h.clone(),this.log("original fetch performed",v),_=(g=this.emitter).emit,N=["response",l],[4,PY(v)];case 1:return _.apply(g,N.concat([R.sent()])),[2,h]}})})})])}})})},Object.defineProperty(globalThis.fetch,GS.IS_PATCHED_MODULE,{enumerable:!0,configurable:!0,value:!0}),this.subscriptions.push(function(){Object.defineProperty(globalThis.fetch,GS.IS_PATCHED_MODULE,{value:void 0}),globalThis.fetch=n,r.log('restored native "globalThis.fetch"!',globalThis.fetch.name)})},t.symbol=Symbol("fetch"),t}(OY.Interceptor);mr.FetchInterceptor=LY;function PY(e){return $S(this,void 0,void 0,function(){var t;return QS(this,function(r){switch(r.label){case 0:return t={status:e.status,statusText:e.statusText,headers:fv.objectToHeaders(fv.headersToObject(e.headers))},[4,e.text()];case 1:return[2,(t.body=r.sent(),t)]}})})}});var ff=y(pv=>{"use strict";function KS(e,t){return t===void 0&&(t=Object),t&&typeof t.freeze=="function"?t.freeze(e):e}var fj=KS({HTML:"text/html",isHTML:function(e){return e===fj.HTML},XML_APPLICATION:"application/xml",XML_TEXT:"text/xml",XML_XHTML_APPLICATION:"application/xhtml+xml",XML_SVG_IMAGE:"image/svg+xml"}),pj=KS({HTML:"http://www.w3.org/1999/xhtml",isHTML:function(e){return e===pj.HTML},SVG:"http://www.w3.org/2000/svg",XML:"http://www.w3.org/XML/1998/namespace",XMLNS:"http://www.w3.org/2000/xmlns/"});pv.freeze=KS;pv.MIME_TYPE=fj;pv.NAMESPACE=pj});var tw=y(Fo=>{var xY=ff(),pf=xY.NAMESPACE;function CY(e){return e!==""}function kY(e){return e?e.split(/[\t\n\f\r ]+/).filter(CY):[]}function DY(e,t){return e.hasOwnProperty(t)||(e[t]=!0),e}function dj(e){if(!e)return[];var t=kY(e);return Object.keys(t.reduce(DY,{}))}function AY(e){return function(t){return e&&e.indexOf(t)!==-1}}function hf(e,t){for(var r in e)t[r]=e[r]}function vr(e,t){var r=e.prototype;if(!(r instanceof t)){let i=function(){};var n=i;i.prototype=t.prototype,i=new i,hf(r,i),e.prototype=r=i}r.constructor!=e&&(typeof e!="function"&&console.error("unknown Class:"+e),r.constructor=e)}var yr={},xn=yr.ELEMENT_NODE=1,bu=yr.ATTRIBUTE_NODE=2,dv=yr.TEXT_NODE=3,gj=yr.CDATA_SECTION_NODE=4,Ej=yr.ENTITY_REFERENCE_NODE=5,jY=yr.ENTITY_NODE=6,Tj=yr.PROCESSING_INSTRUCTION_NODE=7,_j=yr.COMMENT_NODE=8,bj=yr.DOCUMENT_NODE=9,Sj=yr.DOCUMENT_TYPE_NODE=10,ji=yr.DOCUMENT_FRAGMENT_NODE=11,FY=yr.NOTATION_NODE=12,Ut={},yt={},Voe=Ut.INDEX_SIZE_ERR=(yt[1]="Index size error",1),Goe=Ut.DOMSTRING_SIZE_ERR=(yt[2]="DOMString size error",2),MY=Ut.HIERARCHY_REQUEST_ERR=(yt[3]="Hierarchy request error",3),$oe=Ut.WRONG_DOCUMENT_ERR=(yt[4]="Wrong document",4),Qoe=Ut.INVALID_CHARACTER_ERR=(yt[5]="Invalid character",5),Koe=Ut.NO_DATA_ALLOWED_ERR=(yt[6]="No data allowed",6),Boe=Ut.NO_MODIFICATION_ALLOWED_ERR=(yt[7]="No modification allowed",7),qY=Ut.NOT_FOUND_ERR=(yt[8]="Not found",8),Hoe=Ut.NOT_SUPPORTED_ERR=(yt[9]="Not supported",9),hj=Ut.INUSE_ATTRIBUTE_ERR=(yt[10]="Attribute in use",10),zoe=Ut.INVALID_STATE_ERR=(yt[11]="Invalid state",11),Woe=Ut.SYNTAX_ERR=(yt[12]="Syntax error",12),Yoe=Ut.INVALID_MODIFICATION_ERR=(yt[13]="Invalid modification",13),Xoe=Ut.NAMESPACE_ERR=(yt[14]="Invalid namespace",14),Joe=Ut.INVALID_ACCESS_ERR=(yt[15]="Invalid access",15);function Ua(e,t){if(t instanceof Error)var r=t;else r=this,Error.call(this,yt[e]),this.message=yt[e],Error.captureStackTrace&&Error.captureStackTrace(this,Ua);return r.code=e,t&&(this.message=this.message+": "+t),r}Ua.prototype=Error.prototype;hf(Ut,Ua);function Ai(){}Ai.prototype={length:0,item:function(e){return this[e]||null},toString:function(e,t){for(var r=[],n=0;n<this.length;n++)_u(this[n],r,e,t);return r.join("")}};function Su(e,t){this._node=e,this._refresh=t,zS(this)}function zS(e){var t=e._node._inc||e._node.ownerDocument._inc;if(e._inc!=t){var r=e._refresh(e._node);Aj(e,"length",r.length),hf(r,e),e._inc=t}}Su.prototype.item=function(e){return zS(this),this[e]};vr(Su,Ai);function hv(){}function wj(e,t){for(var r=e.length;r--;)if(e[r]===t)return r}function mj(e,t,r,n){if(n?t[wj(t,n)]=r:t[t.length++]=r,e){r.ownerElement=e;var i=e.ownerDocument;i&&(n&&Ij(i,e,n),UY(i,e,r))}}function vj(e,t,r){var n=wj(t,r);if(n>=0){for(var i=t.length-1;n<i;)t[n]=t[++n];if(t.length=i,e){var o=e.ownerDocument;o&&(Ij(o,e,r),r.ownerElement=null)}}else throw Ua(qY,new Error(e.tagName+"@"+r))}hv.prototype={length:0,item:Ai.prototype.item,getNamedItem:function(e){for(var t=this.length;t--;){var r=this[t];if(r.nodeName==e)return r}},setNamedItem:function(e){var t=e.ownerElement;if(t&&t!=this._ownerElement)throw new Ua(hj);var r=this.getNamedItem(e.nodeName);return mj(this._ownerElement,this,e,r),r},setNamedItemNS:function(e){var t=e.ownerElement,r;if(t&&t!=this._ownerElement)throw new Ua(hj);return r=this.getNamedItemNS(e.namespaceURI,e.localName),mj(this._ownerElement,this,e,r),r},removeNamedItem:function(e){var t=this.getNamedItem(e);return vj(this._ownerElement,this,t),t},removeNamedItemNS:function(e,t){var r=this.getNamedItemNS(e,t);return vj(this._ownerElement,this,r),r},getNamedItemNS:function(e,t){for(var r=this.length;r--;){var n=this[r];if(n.localName==t&&n.namespaceURI==e)return n}return null}};function Oj(){}Oj.prototype={hasFeature:function(e,t){return!0},createDocument:function(e,t,r){var n=new mf;if(n.implementation=this,n.childNodes=new Ai,n.doctype=r||null,r&&n.appendChild(r),t){var i=n.createElementNS(e,t);n.appendChild(i)}return n},createDocumentType:function(e,t,r){var n=new vv;return n.name=e,n.nodeName=e,n.publicId=t||"",n.systemId=r||"",n}};function Vt(){}Vt.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(e,t){return Lj(this,e,t)},replaceChild:function(e,t){this.insertBefore(e,t),t&&this.removeChild(t)},removeChild:function(e){return Rj(this,e)},appendChild:function(e){return this.insertBefore(e,null)},hasChildNodes:function(){return this.firstChild!=null},cloneNode:function(e){return HS(this.ownerDocument||this,this,e)},normalize:function(){for(var e=this.firstChild;e;){var t=e.nextSibling;t&&t.nodeType==dv&&e.nodeType==dv?(this.removeChild(t),e.appendData(t.data)):(e.normalize(),e=t)}},isSupported:function(e,t){return this.ownerDocument.implementation.hasFeature(e,t)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(e){for(var t=this;t;){var r=t._nsMap;if(r){for(var n in r)if(r[n]==e)return n}t=t.nodeType==bu?t.ownerDocument:t.parentNode}return null},lookupNamespaceURI:function(e){for(var t=this;t;){var r=t._nsMap;if(r&&e in r)return r[e];t=t.nodeType==bu?t.ownerDocument:t.parentNode}return null},isDefaultNamespace:function(e){var t=this.lookupPrefix(e);return t==null}};function Nj(e){return e=="<"&&"&lt;"||e==">"&&"&gt;"||e=="&"&&"&amp;"||e=='"'&&"&quot;"||"&#"+e.charCodeAt()+";"}hf(yr,Vt);hf(yr,Vt.prototype);function df(e,t){if(t(e))return!0;if(e=e.firstChild)do if(df(e,t))return!0;while(e=e.nextSibling)}function mf(){}function UY(e,t,r){e&&e._inc++;var n=r.namespaceURI;n===pf.XMLNS&&(t._nsMap[r.prefix?r.localName:""]=r.value)}function Ij(e,t,r,n){e&&e._inc++;var i=r.namespaceURI;i===pf.XMLNS&&delete t._nsMap[r.prefix?r.localName:""]}function WS(e,t,r){if(e&&e._inc){e._inc++;var n=t.childNodes;if(r)n[n.length++]=r;else{for(var i=t.firstChild,o=0;i;)n[o++]=i,i=i.nextSibling;n.length=o}}}function Rj(e,t){var r=t.previousSibling,n=t.nextSibling;return r?r.nextSibling=n:e.firstChild=n,n?n.previousSibling=r:e.lastChild=r,WS(e.ownerDocument,e),t}function Lj(e,t,r){var n=t.parentNode;if(n&&n.removeChild(t),t.nodeType===ji){var i=t.firstChild;if(i==null)return t;var o=t.lastChild}else i=o=t;var a=r?r.previousSibling:e.lastChild;i.previousSibling=a,o.nextSibling=r,a?a.nextSibling=i:e.firstChild=i,r==null?e.lastChild=o:r.previousSibling=o;do i.parentNode=e;while(i!==o&&(i=i.nextSibling));return WS(e.ownerDocument||e,e),t.nodeType==ji&&(t.firstChild=t.lastChild=null),t}function VY(e,t){var r=t.parentNode;if(r){var n=e.lastChild;r.removeChild(t);var n=e.lastChild}var n=e.lastChild;return t.parentNode=e,t.previousSibling=n,t.nextSibling=null,n?n.nextSibling=t:e.firstChild=t,e.lastChild=t,WS(e.ownerDocument,e,t),t}mf.prototype={nodeName:"#document",nodeType:bj,doctype:null,documentElement:null,_inc:1,insertBefore:function(e,t){if(e.nodeType==ji){for(var r=e.firstChild;r;){var n=r.nextSibling;this.insertBefore(r,t),r=n}return e}return this.documentElement==null&&e.nodeType==xn&&(this.documentElement=e),Lj(this,e,t),e.ownerDocument=this,e},removeChild:function(e){return this.documentElement==e&&(this.documentElement=null),Rj(this,e)},importNode:function(e,t){return Dj(this,e,t)},getElementById:function(e){var t=null;return df(this.documentElement,function(r){if(r.nodeType==xn&&r.getAttribute("id")==e)return t=r,!0}),t},getElementsByClassName:function(e){var t=dj(e);return new Su(this,function(r){var n=[];return t.length>0&&df(r.documentElement,function(i){if(i!==r&&i.nodeType===xn){var o=i.getAttribute("class");if(o){var a=e===o;if(!a){var s=dj(o);a=t.every(AY(s))}a&&n.push(i)}}}),n})},createElement:function(e){var t=new Va;t.ownerDocument=this,t.nodeName=e,t.tagName=e,t.localName=e,t.childNodes=new Ai;var r=t.attributes=new hv;return r._ownerElement=t,t},createDocumentFragment:function(){var e=new yv;return e.ownerDocument=this,e.childNodes=new Ai,e},createTextNode:function(e){var t=new YS;return t.ownerDocument=this,t.appendData(e),t},createComment:function(e){var t=new XS;return t.ownerDocument=this,t.appendData(e),t},createCDATASection:function(e){var t=new JS;return t.ownerDocument=this,t.appendData(e),t},createProcessingInstruction:function(e,t){var r=new ew;return r.ownerDocument=this,r.tagName=r.target=e,r.nodeValue=r.data=t,r},createAttribute:function(e){var t=new mv;return t.ownerDocument=this,t.name=e,t.nodeName=e,t.localName=e,t.specified=!0,t},createEntityReference:function(e){var t=new ZS;return t.ownerDocument=this,t.nodeName=e,t},createElementNS:function(e,t){var r=new Va,n=t.split(":"),i=r.attributes=new hv;return r.childNodes=new Ai,r.ownerDocument=this,r.nodeName=t,r.tagName=t,r.namespaceURI=e,n.length==2?(r.prefix=n[0],r.localName=n[1]):r.localName=t,i._ownerElement=r,r},createAttributeNS:function(e,t){var r=new mv,n=t.split(":");return r.ownerDocument=this,r.nodeName=t,r.name=t,r.namespaceURI=e,r.specified=!0,n.length==2?(r.prefix=n[0],r.localName=n[1]):r.localName=t,r}};vr(mf,Vt);function Va(){this._nsMap={}}Va.prototype={nodeType:xn,hasAttribute:function(e){return this.getAttributeNode(e)!=null},getAttribute:function(e){var t=this.getAttributeNode(e);return t&&t.value||""},getAttributeNode:function(e){return this.attributes.getNamedItem(e)},setAttribute:function(e,t){var r=this.ownerDocument.createAttribute(e);r.value=r.nodeValue=""+t,this.setAttributeNode(r)},removeAttribute:function(e){var t=this.getAttributeNode(e);t&&this.removeAttributeNode(t)},appendChild:function(e){return e.nodeType===ji?this.insertBefore(e,null):VY(this,e)},setAttributeNode:function(e){return this.attributes.setNamedItem(e)},setAttributeNodeNS:function(e){return this.attributes.setNamedItemNS(e)},removeAttributeNode:function(e){return this.attributes.removeNamedItem(e.nodeName)},removeAttributeNS:function(e,t){var r=this.getAttributeNodeNS(e,t);r&&this.removeAttributeNode(r)},hasAttributeNS:function(e,t){return this.getAttributeNodeNS(e,t)!=null},getAttributeNS:function(e,t){var r=this.getAttributeNodeNS(e,t);return r&&r.value||""},setAttributeNS:function(e,t,r){var n=this.ownerDocument.createAttributeNS(e,t);n.value=n.nodeValue=""+r,this.setAttributeNode(n)},getAttributeNodeNS:function(e,t){return this.attributes.getNamedItemNS(e,t)},getElementsByTagName:function(e){return new Su(this,function(t){var r=[];return df(t,function(n){n!==t&&n.nodeType==xn&&(e==="*"||n.tagName==e)&&r.push(n)}),r})},getElementsByTagNameNS:function(e,t){return new Su(this,function(r){var n=[];return df(r,function(i){i!==r&&i.nodeType===xn&&(e==="*"||i.namespaceURI===e)&&(t==="*"||i.localName==t)&&n.push(i)}),n})}};mf.prototype.getElementsByTagName=Va.prototype.getElementsByTagName;mf.prototype.getElementsByTagNameNS=Va.prototype.getElementsByTagNameNS;vr(Va,Vt);function mv(){}mv.prototype.nodeType=bu;vr(mv,Vt);function vf(){}vf.prototype={data:"",substringData:function(e,t){return this.data.substring(e,e+t)},appendData:function(e){e=this.data+e,this.nodeValue=this.data=e,this.length=e.length},insertData:function(e,t){this.replaceData(e,0,t)},appendChild:function(e){throw new Error(yt[MY])},deleteData:function(e,t){this.replaceData(e,t,"")},replaceData:function(e,t,r){var n=this.data.substring(0,e),i=this.data.substring(e+t);r=n+r+i,this.nodeValue=this.data=r,this.length=r.length}};vr(vf,Vt);function YS(){}YS.prototype={nodeName:"#text",nodeType:dv,splitText:function(e){var t=this.data,r=t.substring(e);t=t.substring(0,e),this.data=this.nodeValue=t,this.length=t.length;var n=this.ownerDocument.createTextNode(r);return this.parentNode&&this.parentNode.insertBefore(n,this.nextSibling),n}};vr(YS,vf);function XS(){}XS.prototype={nodeName:"#comment",nodeType:_j};vr(XS,vf);function JS(){}JS.prototype={nodeName:"#cdata-section",nodeType:gj};vr(JS,vf);function vv(){}vv.prototype.nodeType=Sj;vr(vv,Vt);function Pj(){}Pj.prototype.nodeType=FY;vr(Pj,Vt);function xj(){}xj.prototype.nodeType=jY;vr(xj,Vt);function ZS(){}ZS.prototype.nodeType=Ej;vr(ZS,Vt);function yv(){}yv.prototype.nodeName="#document-fragment";yv.prototype.nodeType=ji;vr(yv,Vt);function ew(){}ew.prototype.nodeType=Tj;vr(ew,Vt);function Cj(){}Cj.prototype.serializeToString=function(e,t,r){return kj.call(e,t,r)};Vt.prototype.toString=kj;function kj(e,t){var r=[],n=this.nodeType==9&&this.documentElement||this,i=n.prefix,o=n.namespaceURI;if(o&&i==null){var i=n.lookupPrefix(o);if(i==null)var a=[{namespace:o,prefix:null}]}return _u(this,r,e,t,a),r.join("")}function yj(e,t,r){var n=e.prefix||"",i=e.namespaceURI;if(!i||n==="xml"&&i===pf.XML||i===pf.XMLNS)return!1;for(var o=r.length;o--;){var a=r[o];if(a.prefix===n)return a.namespace!==i}return!0}function BS(e,t,r){e.push(" ",t,'="',r.replace(/[<&"]/g,Nj),'"')}function _u(e,t,r,n,i){if(i||(i=[]),n)if(e=n(e),e){if(typeof e=="string"){t.push(e);return}}else return;switch(e.nodeType){case xn:var o=e.attributes,a=o.length,h=e.firstChild,s=e.tagName;r=pf.isHTML(e.namespaceURI)||r;var u=s;if(!r&&!e.prefix&&e.namespaceURI){for(var l,c=0;c<o.length;c++)if(o.item(c).name==="xmlns"){l=o.item(c).value;break}if(!l)for(var f=i.length-1;f>=0;f--){var p=i[f];if(p.prefix===""&&p.namespace===e.namespaceURI){l=p.namespace;break}}if(l!==e.namespaceURI)for(var f=i.length-1;f>=0;f--){var p=i[f];if(p.namespace===e.namespaceURI){p.prefix&&(u=p.prefix+":"+s);break}}}t.push("<",u);for(var d=0;d<a;d++){var m=o.item(d);m.prefix=="xmlns"?i.push({prefix:m.localName,namespace:m.value}):m.nodeName=="xmlns"&&i.push({prefix:"",namespace:m.value})}for(var d=0;d<a;d++){var m=o.item(d);if(yj(m,r,i)){var E=m.prefix||"",b=m.namespaceURI;BS(t,E?"xmlns:"+E:"xmlns",b),i.push({prefix:E,namespace:b})}_u(m,t,r,n,i)}if(s===u&&yj(e,r,i)){var E=e.prefix||"",b=e.namespaceURI;BS(t,E?"xmlns:"+E:"xmlns",b),i.push({prefix:E,namespace:b})}if(h||r&&!/^(?:meta|link|img|br|hr|input)$/i.test(s)){if(t.push(">"),r&&/^script$/i.test(s))for(;h;)h.data?t.push(h.data):_u(h,t,r,n,i.slice()),h=h.nextSibling;else for(;h;)_u(h,t,r,n,i.slice()),h=h.nextSibling;t.push("</",u,">")}else t.push("/>");return;case bj:case ji:for(var h=e.firstChild;h;)_u(h,t,r,n,i.slice()),h=h.nextSibling;return;case bu:return BS(t,e.name,e.value);case dv:return t.push(e.data.replace(/[<&]/g,Nj).replace(/]]>/g,"]]&gt;"));case gj:return t.push("<![CDATA[",e.data,"]]>");case _j:return t.push("<!--",e.data,"-->");case Sj:var v=e.publicId,g=e.systemId;if(t.push("<!DOCTYPE ",e.name),v)t.push(" PUBLIC ",v),g&&g!="."&&t.push(" ",g),t.push(">");else if(g&&g!=".")t.push(" SYSTEM ",g,">");else{var _=e.internalSubset;_&&t.push(" [",_,"]"),t.push(">")}return;case Tj:return t.push("<?",e.target," ",e.data,"?>");case Ej:return t.push("&",e.nodeName,";");default:t.push("??",e.nodeName)}}function Dj(e,t,r){var n;switch(t.nodeType){case xn:n=t.cloneNode(!1),n.ownerDocument=e;case ji:break;case bu:r=!0;break}if(n||(n=t.cloneNode(!1)),n.ownerDocument=e,n.parentNode=null,r)for(var i=t.firstChild;i;)n.appendChild(Dj(e,i,r)),i=i.nextSibling;return n}function HS(e,t,r){var n=new t.constructor;for(var i in t){var o=t[i];typeof o!="object"&&o!=n[i]&&(n[i]=o)}switch(t.childNodes&&(n.childNodes=new Ai),n.ownerDocument=e,n.nodeType){case xn:var a=t.attributes,s=n.attributes=new hv,u=a.length;s._ownerElement=n;for(var l=0;l<u;l++)n.setAttributeNode(HS(e,a.item(l),!0));break;case bu:r=!0}if(r)for(var c=t.firstChild;c;)n.appendChild(HS(e,c,r)),c=c.nextSibling;return n}function Aj(e,t,r){e[t]=r}try{if(Object.defineProperty){let e=function(t){switch(t.nodeType){case xn:case ji:var r=[];for(t=t.firstChild;t;)t.nodeType!==7&&t.nodeType!==8&&r.push(e(t)),t=t.nextSibling;return r.join("");default:return t.nodeValue}};Zoe=e,Object.defineProperty(Su.prototype,"length",{get:function(){return zS(this),this.$$length}}),Object.defineProperty(Vt.prototype,"textContent",{get:function(){return e(this)},set:function(t){switch(this.nodeType){case xn:case ji:for(;this.firstChild;)this.removeChild(this.firstChild);(t||String(t))&&this.appendChild(this.ownerDocument.createTextNode(t));break;default:this.data=t,this.value=t,this.nodeValue=t}}}),Aj=function(t,r,n){t["$$"+r]=n}}}catch{}var Zoe;Fo.DocumentType=vv;Fo.DOMException=Ua;Fo.DOMImplementation=Oj;Fo.Element=Va;Fo.Node=Vt;Fo.NodeList=Ai;Fo.XMLSerializer=Cj});var Fj=y(yf=>{var jj=ff().freeze;yf.XML_ENTITIES=jj({amp:"&",apos:"'",gt:">",lt:"<",quot:'"'});yf.HTML_ENTITIES=jj({lt:"<",gt:">",amp:"&",quot:'"',apos:"'",Agrave:"\xC0",Aacute:"\xC1",Acirc:"\xC2",Atilde:"\xC3",Auml:"\xC4",Aring:"\xC5",AElig:"\xC6",Ccedil:"\xC7",Egrave:"\xC8",Eacute:"\xC9",Ecirc:"\xCA",Euml:"\xCB",Igrave:"\xCC",Iacute:"\xCD",Icirc:"\xCE",Iuml:"\xCF",ETH:"\xD0",Ntilde:"\xD1",Ograve:"\xD2",Oacute:"\xD3",Ocirc:"\xD4",Otilde:"\xD5",Ouml:"\xD6",Oslash:"\xD8",Ugrave:"\xD9",Uacute:"\xDA",Ucirc:"\xDB",Uuml:"\xDC",Yacute:"\xDD",THORN:"\xDE",szlig:"\xDF",agrave:"\xE0",aacute:"\xE1",acirc:"\xE2",atilde:"\xE3",auml:"\xE4",aring:"\xE5",aelig:"\xE6",ccedil:"\xE7",egrave:"\xE8",eacute:"\xE9",ecirc:"\xEA",euml:"\xEB",igrave:"\xEC",iacute:"\xED",icirc:"\xEE",iuml:"\xEF",eth:"\xF0",ntilde:"\xF1",ograve:"\xF2",oacute:"\xF3",ocirc:"\xF4",otilde:"\xF5",ouml:"\xF6",oslash:"\xF8",ugrave:"\xF9",uacute:"\xFA",ucirc:"\xFB",uuml:"\xFC",yacute:"\xFD",thorn:"\xFE",yuml:"\xFF",nbsp:"\xA0",iexcl:"\xA1",cent:"\xA2",pound:"\xA3",curren:"\xA4",yen:"\xA5",brvbar:"\xA6",sect:"\xA7",uml:"\xA8",copy:"\xA9",ordf:"\xAA",laquo:"\xAB",not:"\xAC",shy:"\xAD\xAD",reg:"\xAE",macr:"\xAF",deg:"\xB0",plusmn:"\xB1",sup2:"\xB2",sup3:"\xB3",acute:"\xB4",micro:"\xB5",para:"\xB6",middot:"\xB7",cedil:"\xB8",sup1:"\xB9",ordm:"\xBA",raquo:"\xBB",frac14:"\xBC",frac12:"\xBD",frac34:"\xBE",iquest:"\xBF",times:"\xD7",divide:"\xF7",forall:"\u2200",part:"\u2202",exist:"\u2203",empty:"\u2205",nabla:"\u2207",isin:"\u2208",notin:"\u2209",ni:"\u220B",prod:"\u220F",sum:"\u2211",minus:"\u2212",lowast:"\u2217",radic:"\u221A",prop:"\u221D",infin:"\u221E",ang:"\u2220",and:"\u2227",or:"\u2228",cap:"\u2229",cup:"\u222A",int:"\u222B",there4:"\u2234",sim:"\u223C",cong:"\u2245",asymp:"\u2248",ne:"\u2260",equiv:"\u2261",le:"\u2264",ge:"\u2265",sub:"\u2282",sup:"\u2283",nsub:"\u2284",sube:"\u2286",supe:"\u2287",oplus:"\u2295",otimes:"\u2297",perp:"\u22A5",sdot:"\u22C5",Alpha:"\u0391",Beta:"\u0392",Gamma:"\u0393",Delta:"\u0394",Epsilon:"\u0395",Zeta:"\u0396",Eta:"\u0397",Theta:"\u0398",Iota:"\u0399",Kappa:"\u039A",Lambda:"\u039B",Mu:"\u039C",Nu:"\u039D",Xi:"\u039E",Omicron:"\u039F",Pi:"\u03A0",Rho:"\u03A1",Sigma:"\u03A3",Tau:"\u03A4",Upsilon:"\u03A5",Phi:"\u03A6",Chi:"\u03A7",Psi:"\u03A8",Omega:"\u03A9",alpha:"\u03B1",beta:"\u03B2",gamma:"\u03B3",delta:"\u03B4",epsilon:"\u03B5",zeta:"\u03B6",eta:"\u03B7",theta:"\u03B8",iota:"\u03B9",kappa:"\u03BA",lambda:"\u03BB",mu:"\u03BC",nu:"\u03BD",xi:"\u03BE",omicron:"\u03BF",pi:"\u03C0",rho:"\u03C1",sigmaf:"\u03C2",sigma:"\u03C3",tau:"\u03C4",upsilon:"\u03C5",phi:"\u03C6",chi:"\u03C7",psi:"\u03C8",omega:"\u03C9",thetasym:"\u03D1",upsih:"\u03D2",piv:"\u03D6",OElig:"\u0152",oelig:"\u0153",Scaron:"\u0160",scaron:"\u0161",Yuml:"\u0178",fnof:"\u0192",circ:"\u02C6",tilde:"\u02DC",ensp:"\u2002",emsp:"\u2003",thinsp:"\u2009",zwnj:"\u200C",zwj:"\u200D",lrm:"\u200E",rlm:"\u200F",ndash:"\u2013",mdash:"\u2014",lsquo:"\u2018",rsquo:"\u2019",sbquo:"\u201A",ldquo:"\u201C",rdquo:"\u201D",bdquo:"\u201E",dagger:"\u2020",Dagger:"\u2021",bull:"\u2022",hellip:"\u2026",permil:"\u2030",prime:"\u2032",Prime:"\u2033",lsaquo:"\u2039",rsaquo:"\u203A",oline:"\u203E",euro:"\u20AC",trade:"\u2122",larr:"\u2190",uarr:"\u2191",rarr:"\u2192",darr:"\u2193",harr:"\u2194",crarr:"\u21B5",lceil:"\u2308",rceil:"\u2309",lfloor:"\u230A",rfloor:"\u230B",loz:"\u25CA",spades:"\u2660",clubs:"\u2663",hearts:"\u2665",diams:"\u2666"});yf.entityMap=yf.HTML_ENTITIES});var Kj=y(nw=>{var _f=ff().NAMESPACE,rw=/[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,Mj=new RegExp("[\\-\\.0-9"+rw.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]"),qj=new RegExp("^"+rw.source+Mj.source+"*(?::"+rw.source+Mj.source+"*)?$"),gf=0,Mo=1,wu=2,Ef=3,Ou=4,Nu=5,Tf=6,gv=7;function Iu(e,t){this.message=e,this.locator=t,Error.captureStackTrace&&Error.captureStackTrace(this,Iu)}Iu.prototype=new Error;Iu.prototype.name=Iu.name;function Gj(){}Gj.prototype={parse:function(e,t,r){var n=this.domBuilder;n.startDocument(),$j(t,t={}),GY(e,t,r,n,this.errorHandler),n.endDocument()}};function GY(e,t,r,n,i){function o(ie){if(ie>65535){ie-=65536;var Ze=55296+(ie>>10),Tr=56320+(ie&1023);return String.fromCharCode(Ze,Tr)}else return String.fromCharCode(ie)}function a(ie){var Ze=ie.slice(1,-1);return Ze in r?r[Ze]:Ze.charAt(0)==="#"?o(parseInt(Ze.substr(1).replace("x","0x"))):(i.error("entity not found:"+ie),ie)}function s(ie){if(ie>E){var Ze=e.substring(E,ie).replace(/&#?\w+;/g,a);p&&u(E),n.characters(Ze,0,ie-E),E=ie}}function u(ie,Ze){for(;ie>=c&&(Ze=f.exec(e));)l=Ze.index,c=l+Ze[0].length,p.lineNumber++;p.columnNumber=ie-l+1}for(var l=0,c=0,f=/.*(?:\r\n?|\n)|.*$/g,p=n.locator,d=[{currentNSMap:t}],m={},E=0;;){try{var b=e.indexOf("<",E);if(b<0){if(!e.substr(E).match(/^\s*$/)){var h=n.doc,v=h.createTextNode(e.substr(E));h.appendChild(v),n.currentElement=v}return}switch(b>E&&s(b),e.charAt(b+1)){case"/":var $=e.indexOf(">",b+3),g=e.substring(b+2,$).replace(/[ \t\n\r]+$/g,""),_=d.pop();$<0?(g=e.substring(b+2).replace(/[\s<].*/,""),i.error("end tag name: "+g+" is not complete:"+_.tagName),$=b+1+g.length):g.match(/\s</)&&(g=g.replace(/[\s<].*/,""),i.error("end tag name: "+g+" maybe not complete"),$=b+1+g.length);var N=_.localNSMap,R=_.tagName==g,O=R||_.tagName&&_.tagName.toLowerCase()==g.toLowerCase();if(O){if(n.endElement(_.uri,_.localName,g),N)for(var L in N)n.endPrefixMapping(L);R||i.fatalError("end tag name: "+g+" is not match the current start tagName:"+_.tagName)}else d.push(_);$++;break;case"?":p&&u(b),$=HY(e,b,n);break;case"!":p&&u(b),$=BY(e,b,n,i);break;default:p&&u(b);var S=new Qj,I=d[d.length-1].currentNSMap,$=$Y(e,b,S,I,a,i),Ie=S.length;if(!S.closed&&KY(e,$,S.tagName,m)&&(S.closed=!0,r.nbsp||i.warning("unclosed xml attribute")),p&&Ie){for(var Se=Uj(p,{}),Me=0;Me<Ie;Me++){var Tt=S[Me];u(Tt.offset),Tt.locator=Uj(p,{})}n.locator=Se,Vj(S,n,I)&&d.push(S),n.locator=p}else Vj(S,n,I)&&d.push(S);_f.isHTML(S.uri)&&!S.closed?$=QY(e,$,S.tagName,a,n):$++}}catch(ie){if(ie instanceof Iu)throw ie;i.error("element parse error: "+ie),$=-1}$>E?E=$:s(Math.max(b,E)+1)}}function Uj(e,t){return t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber,t}function $Y(e,t,r,n,i,o){function a(d,m,E){r.attributeNames.hasOwnProperty(d)&&o.fatalError("Attribute "+d+" redefined"),r.addValue(d,m,E)}for(var s,u,l=++t,c=gf;;){var f=e.charAt(l);switch(f){case"=":if(c===Mo)s=e.slice(t,l),c=Ef;else if(c===wu)c=Ef;else throw new Error("attribute equal must after attrName");break;case"'":case'"':if(c===Ef||c===Mo)if(c===Mo&&(o.warning('attribute value must after "="'),s=e.slice(t,l)),t=l+1,l=e.indexOf(f,t),l>0)u=e.slice(t,l).replace(/&#?\w+;/g,i),a(s,u,t-1),c=Nu;else throw new Error("attribute value no end '"+f+"' match");else if(c==Ou)u=e.slice(t,l).replace(/&#?\w+;/g,i),a(s,u,t),o.warning('attribute "'+s+'" missed start quot('+f+")!!"),t=l+1,c=Nu;else throw new Error('attribute value must after "="');break;case"/":switch(c){case gf:r.setTagName(e.slice(t,l));case Nu:case Tf:case gv:c=gv,r.closed=!0;case Ou:case Mo:case wu:break;default:throw new Error("attribute invalid close char('/')")}break;case"":return o.error("unexpected end of input"),c==gf&&r.setTagName(e.slice(t,l)),l;case">":switch(c){case gf:r.setTagName(e.slice(t,l));case Nu:case Tf:case gv:break;case Ou:case Mo:u=e.slice(t,l),u.slice(-1)==="/"&&(r.closed=!0,u=u.slice(0,-1));case wu:c===wu&&(u=s),c==Ou?(o.warning('attribute "'+u+'" missed quot(")!'),a(s,u.replace(/&#?\w+;/g,i),t)):((!_f.isHTML(n[""])||!u.match(/^(?:disabled|checked|selected)$/i))&&o.warning('attribute "'+u+'" missed value!! "'+u+'" instead!!'),a(u,u,t));break;case Ef:throw new Error("attribute value missed!!")}return l;case"\x80":f=" ";default:if(f<=" ")switch(c){case gf:r.setTagName(e.slice(t,l)),c=Tf;break;case Mo:s=e.slice(t,l),c=wu;break;case Ou:var u=e.slice(t,l).replace(/&#?\w+;/g,i);o.warning('attribute "'+u+'" missed quot(")!!'),a(s,u,t);case Nu:c=Tf;break}else switch(c){case wu:var p=r.tagName;(!_f.isHTML(n[""])||!s.match(/^(?:disabled|checked|selected)$/i))&&o.warning('attribute "'+s+'" missed value!! "'+s+'" instead2!!'),a(s,s,t),t=l,c=Mo;break;case Nu:o.warning('attribute space is required"'+s+'"!!');case Tf:c=Mo,t=l;break;case Ef:c=Ou,t=l;break;case gv:throw new Error("elements closed character '/' and '>' must be connected to")}}l++}}function Vj(e,t,r){for(var n=e.tagName,i=null,f=e.length;f--;){var o=e[f],a=o.qName,s=o.value,p=a.indexOf(":");if(p>0)var u=o.prefix=a.slice(0,p),l=a.slice(p+1),c=u==="xmlns"&&l;else l=a,u=null,c=a==="xmlns"&&"";o.localName=l,c!==!1&&(i==null&&(i={},$j(r,r={})),r[c]=i[c]=s,o.uri=_f.XMLNS,t.startPrefixMapping(c,s))}for(var f=e.length;f--;){o=e[f];var u=o.prefix;u&&(u==="xml"&&(o.uri=_f.XML),u!=="xmlns"&&(o.uri=r[u||""]))}var p=n.indexOf(":");p>0?(u=e.prefix=n.slice(0,p),l=e.localName=n.slice(p+1)):(u=null,l=e.localName=n);var d=e.uri=r[u||""];if(t.startElement(d,l,n,e),e.closed){if(t.endElement(d,l,n),i)for(u in i)t.endPrefixMapping(u)}else return e.currentNSMap=r,e.localNSMap=i,!0}function QY(e,t,r,n,i){if(/^(?:script|textarea)$/i.test(r)){var o=e.indexOf("</"+r+">",t),a=e.substring(t+1,o);if(/[&<]/.test(a))return/^script$/i.test(r)?(i.characters(a,0,a.length),o):(a=a.replace(/&#?\w+;/g,n),i.characters(a,0,a.length),o)}return t+1}function KY(e,t,r,n){var i=n[r];return i==null&&(i=e.lastIndexOf("</"+r+">"),i<t&&(i=e.lastIndexOf("</"+r)),n[r]=i),i<t}function $j(e,t){for(var r in e)t[r]=e[r]}function BY(e,t,r,n){var i=e.charAt(t+2);switch(i){case"-":if(e.charAt(t+3)==="-"){var o=e.indexOf("-->",t+4);return o>t?(r.comment(e,t+4,o-t-4),o+3):(n.error("Unclosed comment"),-1)}else return-1;default:if(e.substr(t+3,6)=="CDATA["){var o=e.indexOf("]]>",t+9);return r.startCDATA(),r.characters(e,t+9,o-t-9),r.endCDATA(),o+3}var a=zY(e,t),s=a.length;if(s>1&&/!doctype/i.test(a[0][0])){var u=a[1][0],l=!1,c=!1;s>3&&(/^public$/i.test(a[2][0])?(l=a[3][0],c=s>4&&a[4][0]):/^system$/i.test(a[2][0])&&(c=a[3][0]));var f=a[s-1];return r.startDTD(u,l,c),r.endDTD(),f.index+f[0].length}}return-1}function HY(e,t,r){var n=e.indexOf("?>",t);if(n){var i=e.substring(t,n).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);if(i){var o=i[0].length;return r.processingInstruction(i[1],i[2]),n+2}else return-1}return-1}function Qj(){this.attributeNames={}}Qj.prototype={setTagName:function(e){if(!qj.test(e))throw new Error("invalid tagName:"+e);this.tagName=e},addValue:function(e,t,r){if(!qj.test(e))throw new Error("invalid attribute:"+e);this.attributeNames[e]=this.length,this[this.length++]={qName:e,value:t,offset:r}},length:0,getLocalName:function(e){return this[e].localName},getLocator:function(e){return this[e].locator},getQName:function(e){return this[e].qName},getURI:function(e){return this[e].uri},getValue:function(e){return this[e].value}};function zY(e,t){var r,n=[],i=/'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;for(i.lastIndex=t,i.exec(e);r=i.exec(e);)if(n.push(r),r[1])return n}nw.XMLReader=Gj;nw.ParseError=Iu});var Xj=y(Sf=>{var WY=ff(),ow=tw(),Bj=Fj(),Wj=Kj(),YY=ow.DOMImplementation,Hj=WY.NAMESPACE,XY=Wj.ParseError,JY=Wj.XMLReader;function Yj(e){this.options=e||{locator:{}}}Yj.prototype.parseFromString=function(e,t){var r=this.options,n=new JY,i=r.domBuilder||new bf,o=r.errorHandler,a=r.locator,s=r.xmlns||{},u=/\/x?html?$/.test(t),l=u?Bj.HTML_ENTITIES:Bj.XML_ENTITIES;return a&&i.setDocumentLocator(a),n.errorHandler=ZY(o,i,a),n.domBuilder=r.domBuilder||i,u&&(s[""]=Hj.HTML),s.xml=s.xml||Hj.XML,e&&typeof e=="string"?n.parse(e,s,l):n.errorHandler.error("invalid doc source"),i.doc};function ZY(e,t,r){if(!e){if(t instanceof bf)return t;e=t}var n={},i=e instanceof Function;r=r||{};function o(a){var s=e[a];!s&&i&&(s=e.length==2?function(u){e(a,u)}:e),n[a]=s&&function(u){s("[xmldom "+a+"]	"+u+iw(r))}||function(){}}return o("warning"),o("error"),o("fatalError"),n}function bf(){this.cdata=!1}function Ru(e,t){t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber}bf.prototype={startDocument:function(){this.doc=new YY().createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(e,t,r,n){var i=this.doc,o=i.createElementNS(e,r||t),a=n.length;Ev(this,o),this.currentElement=o,this.locator&&Ru(this.locator,o);for(var s=0;s<a;s++){var e=n.getURI(s),u=n.getValue(s),r=n.getQName(s),l=i.createAttributeNS(e,r);this.locator&&Ru(n.getLocator(s),l),l.value=l.nodeValue=u,o.setAttributeNode(l)}},endElement:function(e,t,r){var n=this.currentElement,i=n.tagName;this.currentElement=n.parentNode},startPrefixMapping:function(e,t){},endPrefixMapping:function(e){},processingInstruction:function(e,t){var r=this.doc.createProcessingInstruction(e,t);this.locator&&Ru(this.locator,r),Ev(this,r)},ignorableWhitespace:function(e,t,r){},characters:function(e,t,r){if(e=zj.apply(this,arguments),e){if(this.cdata)var n=this.doc.createCDATASection(e);else var n=this.doc.createTextNode(e);this.currentElement?this.currentElement.appendChild(n):/^\s*$/.test(e)&&this.doc.appendChild(n),this.locator&&Ru(this.locator,n)}},skippedEntity:function(e){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(e){(this.locator=e)&&(e.lineNumber=0)},comment:function(e,t,r){e=zj.apply(this,arguments);var n=this.doc.createComment(e);this.locator&&Ru(this.locator,n),Ev(this,n)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(e,t,r){var n=this.doc.implementation;if(n&&n.createDocumentType){var i=n.createDocumentType(e,t,r);this.locator&&Ru(this.locator,i),Ev(this,i),this.doc.doctype=i}},warning:function(e){console.warn("[xmldom warning]	"+e,iw(this.locator))},error:function(e){console.error("[xmldom error]	"+e,iw(this.locator))},fatalError:function(e){throw new XY(e,this.locator)}};function iw(e){if(e)return`
@`+(e.systemId||"")+"#[line:"+e.lineNumber+",col:"+e.columnNumber+"]"}function zj(e,t,r){return typeof e=="string"?e.substr(t,r):e.length>=t+r||t?new java.lang.String(e,t,r)+"":e}"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,function(e){bf.prototype[e]=function(){return null}});function Ev(e,t){e.currentElement?e.currentElement.appendChild(t):e.doc.appendChild(t)}Sf.__DOMHandler=bf;Sf.DOMParser=Yj;Sf.DOMImplementation=ow.DOMImplementation;Sf.XMLSerializer=ow.XMLSerializer});var Zj=y(Tv=>{var Jj=tw();Tv.DOMImplementation=Jj.DOMImplementation;Tv.XMLSerializer=Jj.XMLSerializer;Tv.DOMParser=Xj().DOMParser});var eF=y(_v=>{"use strict";Object.defineProperty(_v,"__esModule",{value:!0});_v.parseJson=void 0;function eX(e){try{var t=JSON.parse(e);return t}catch{return null}}_v.parseJson=eX});var tF=y(bv=>{"use strict";Object.defineProperty(bv,"__esModule",{value:!0});bv.bufferFrom=void 0;function tX(e){var t=encodeURIComponent(e),r=t.replace(/%([0-9A-F]{2})/g,function(i,o){return String.fromCharCode("0x"+o)}),n=new Uint8Array(r.length);return Array.prototype.forEach.call(r,function(i,o){n[o]=i.charCodeAt(0)}),n}bv.bufferFrom=tX});var aw=y(Sv=>{"use strict";Object.defineProperty(Sv,"__esModule",{value:!0});Sv.EventPolyfill=void 0;var rX=function(){function e(t,r){this.AT_TARGET=0,this.BUBBLING_PHASE=0,this.CAPTURING_PHASE=0,this.NONE=0,this.type="",this.srcElement=null,this.currentTarget=null,this.eventPhase=0,this.isTrusted=!0,this.composed=!1,this.cancelable=!0,this.defaultPrevented=!1,this.bubbles=!0,this.lengthComputable=!0,this.loaded=0,this.total=0,this.cancelBubble=!1,this.returnValue=!0,this.type=t,this.target=r?.target||null,this.currentTarget=r?.currentTarget||null,this.timeStamp=Date.now()}return e.prototype.composedPath=function(){return[]},e.prototype.initEvent=function(t,r,n){this.type=t,this.bubbles=!!r,this.cancelable=!!n},e.prototype.preventDefault=function(){this.defaultPrevented=!0},e.prototype.stopPropagation=function(){},e.prototype.stopImmediatePropagation=function(){},e}();Sv.EventPolyfill=rX});var rF=y(Lu=>{"use strict";var nX=Lu&&Lu.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(n[o]=i[o])},e(t,r)};return function(t,r){if(typeof r!="function"&&r!==null)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(Lu,"__esModule",{value:!0});Lu.ProgressEventPolyfill=void 0;var iX=aw(),oX=function(e){nX(t,e);function t(r,n){var i=e.call(this,r)||this;return i.lengthComputable=n?.lengthComputable||!1,i.composed=n?.composed||!1,i.loaded=n?.loaded||0,i.total=n?.total||0,i}return t}(iX.EventPolyfill);Lu.ProgressEventPolyfill=oX});var nF=y(wv=>{"use strict";Object.defineProperty(wv,"__esModule",{value:!0});wv.createEvent=void 0;var aX=aw(),sX=rF(),uX=typeof ProgressEvent<"u";function lX(e,t,r){var n=["error","progress","loadstart","loadend","load","timeout","abort"],i=uX?ProgressEvent:sX.ProgressEventPolyfill,o=n.includes(t)?new i(t,{lengthComputable:!0,loaded:r?.loaded||0,total:r?.total||0}):new aX.EventPolyfill(t,{target:e,currentTarget:e});return o}wv.createEvent=lX});var lF=y(gr=>{"use strict";var Nv=gr&&gr.__assign||function(){return Nv=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++){t=arguments[r];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},Nv.apply(this,arguments)},iF=gr&&gr.__awaiter||function(e,t,r,n){function i(o){return o instanceof r?o:new r(function(a){a(o)})}return new(r||(r=Promise))(function(o,a){function s(c){try{l(n.next(c))}catch(f){a(f)}}function u(c){try{l(n.throw(c))}catch(f){a(f)}}function l(c){c.done?o(c.value):i(c.value).then(s,u)}l((n=n.apply(e,t||[])).next())})},oF=gr&&gr.__generator||function(e,t){var r={label:0,sent:function(){if(o[0]&1)throw o[1];return o[1]},trys:[],ops:[]},n,i,o,a;return a={next:s(0),throw:s(1),return:s(2)},typeof Symbol=="function"&&(a[Symbol.iterator]=function(){return this}),a;function s(l){return function(c){return u([l,c])}}function u(l){if(n)throw new TypeError("Generator is already executing.");for(;r;)try{if(n=1,i&&(o=l[0]&2?i.return:l[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,l[1])).done)return o;switch(i=0,o&&(l=[l[0]&2,o.value]),l[0]){case 0:case 1:o=l;break;case 4:return r.label++,{value:l[1],done:!1};case 5:r.label++,i=l[1],l=[0];continue;case 7:l=r.ops.pop(),r.trys.pop();continue;default:if(o=r.trys,!(o=o.length>0&&o[o.length-1])&&(l[0]===6||l[0]===2)){r=0;continue}if(l[0]===3&&(!o||l[1]>o[0]&&l[1]<o[3])){r.label=l[1];break}if(l[0]===6&&r.label<o[1]){r.label=o[1],o=l;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(l);break}o[2]&&r.ops.pop(),r.trys.pop();continue}l=t.call(e,r)}catch(c){l=[6,c],i=0}finally{n=o=0}if(l[0]&5)throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}},aF=gr&&gr.__values||function(e){var t=typeof Symbol=="function"&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&typeof e.length=="number")return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},Ov=gr&&gr.__read||function(e,t){var r=typeof Symbol=="function"&&e[Symbol.iterator];if(!r)return e;var n=r.call(e),i,o=[],a;try{for(;(t===void 0||t-- >0)&&!(i=n.next()).done;)o.push(i.value)}catch(s){a={error:s}}finally{try{i&&!i.done&&(r=n.return)&&r.call(n)}finally{if(a)throw a.error}}return o};Object.defineProperty(gr,"__esModule",{value:!0});gr.createXMLHttpRequestOverride=void 0;var cX=Bs(),qo=Tn(),fX=Zj(),pX=eF(),dX=US(),hX=VS(),sF=tF(),uF=nF(),mX=qS(),vX=function(e){var t,r=e.XMLHttpRequest,n=e.emitter,i=e.log;return t=function(){function o(){this._events=[],this.log=i,this.UNSENT=0,this.OPENED=1,this.HEADERS_RECEIVED=2,this.LOADING=3,this.DONE=4,this.onreadystatechange=null,this.onabort=null,this.onerror=null,this.onload=null,this.onloadend=null,this.onloadstart=null,this.onprogress=null,this.ontimeout=null,this.url="",this.method="GET",this.readyState=this.UNSENT,this.withCredentials=!1,this.status=200,this.statusText="OK",this.data="",this.response="",this.responseType="text",this.responseText="",this.responseXML=null,this.responseURL="",this.upload={},this.timeout=0,this._requestHeaders=new qo.Headers,this._responseHeaders=new qo.Headers}return o.prototype.setReadyState=function(a){a!==this.readyState&&(this.log("readyState change %d -> %d",this.readyState,a),this.readyState=a,a!==this.UNSENT&&(this.log("triggerring readystate change..."),this.trigger("readystatechange")))},o.prototype.trigger=function(a,s){var u,l;this.log('trigger "%s" (%d)',a,this.readyState),this.log('resolve listener for event "%s"',a);var c=this["on"+a];c?.call(this,uF.createEvent(this,a,s));try{for(var f=aF(this._events),p=f.next();!p.done;p=f.next()){var d=p.value;d.name===a&&(i('calling mock event listener "%s" (%d)',a,this.readyState),d.listener.call(this,uF.createEvent(this,a,s)))}}catch(m){u={error:m}}finally{try{p&&!p.done&&(l=f.return)&&l.call(f)}finally{if(u)throw u.error}}return this},o.prototype.reset=function(){this.log("reset"),this.setReadyState(this.UNSENT),this.status=200,this.statusText="OK",this.data="",this.response=null,this.responseText=null,this.responseXML=null,this._requestHeaders=new qo.Headers,this._responseHeaders=new qo.Headers},o.prototype.open=function(a,s,u,l,c){return u===void 0&&(u=!0),iF(this,void 0,void 0,function(){return oF(this,function(f){return this.log=this.log.extend("request "+a+" "+s),this.log("open",{method:a,url:s,async:u,user:l,password:c}),this.reset(),this.setReadyState(this.OPENED),typeof s>"u"?(this.url=a,this.method="GET"):(this.url=s,this.method=a,this.async=u,this.user=l,this.password=c),[2]})})},o.prototype.send=function(a){var s=this;this.log("send %s %s",this.method,this.url),this.data=a||"";var u;try{u=new URL(this.url)}catch{u=new URL(this.url,window.location.href)}this.log("request headers",this._requestHeaders);var l={id:hX.uuidv4(),url:u,method:this.method,headers:this._requestHeaders,credentials:this.withCredentials?"include":"omit",body:this.data},c=Nv(Nv({},l),{respondWith:mX.createLazyCallback()});this.log('emitting the "request" event for %d listener(s)...',n.listenerCount("request")),n.emit("request",c),this.log("awaiting mocked response..."),Promise.resolve(cX.until(function(){return iF(s,void 0,void 0,function(){var f,p;return oF(this,function(d){switch(d.label){case 0:return[4,n.untilIdle("request",function(m){var E=Ov(m.args,1),b=E[0];return b.id===c.id})];case 1:return d.sent(),this.log("all request listeners have been resolved!"),[4,c.respondWith.invoked()];case 2:return f=Ov.apply(void 0,[d.sent(),1]),p=f[0],this.log("event.respondWith called with:",p),[2,p]}})})})).then(function(f){var p,d=Ov(f,2),m=d[0],E=d[1];if(m){s.log("middleware function threw an exception!",m),s.trigger("error"),s.abort();return}if(E){if(s.log("received mocked response",E),s.trigger("loadstart"),s.status=E.status||200,s.statusText=E.statusText||"OK",s._responseHeaders=E.headers?qo.objectToHeaders(E.headers):new qo.Headers,s.log("set response status",s.status,s.statusText),s.log("set response headers",s._responseHeaders),s.setReadyState(s.HEADERS_RECEIVED),s.log("response type",s.responseType),s.response=s.getResponseBody(E.body),s.responseURL=s.url,s.responseText=E.body||"",s.responseXML=s.getResponseXML(),s.log("set response body",s.response),E.body&&s.response){s.setReadyState(s.LOADING);var b=sF.bufferFrom(E.body);s.trigger("progress",{loaded:b.length,total:b.length})}s.setReadyState(s.DONE),s.trigger("load"),s.trigger("loadend"),n.emit("response",l,dX.toIsoResponse(E))}else{s.log("no mocked response received!");var h=new r;s.log("opening an original request %s %s",s.method,s.url),h.open(s.method,s.url,(p=s.async)!==null&&p!==void 0?p:!0,s.user,s.password),h.addEventListener("load",function(){s.log('original "onload"'),s.status=h.status,s.statusText=h.statusText,s.responseURL=h.responseURL,s.responseType=h.responseType,s.response=h.response,s.responseText=h.responseText,s.responseXML=h.responseXML,s.log("set mock request readyState to DONE"),s.setReadyState(s.DONE),s.log("received original response",s.status,s.statusText),s.log("original response body:",s.response);var v=h.getAllResponseHeaders();s.log(`original response headers:
`,v),s._responseHeaders=qo.stringToHeaders(v),s.log("original response headers (normalized)",s._responseHeaders),s.log("original response finished"),n.emit("response",l,{status:h.status,statusText:h.statusText,headers:s._responseHeaders,body:h.response})}),s.propagateCallbacks(h),s.propagateListeners(h),s.propagateHeaders(h,s._requestHeaders),s.async&&(h.timeout=s.timeout),s.log("send",s.data),h.send(s.data)}})},o.prototype.abort=function(){this.log("abort"),this.readyState>this.UNSENT&&this.readyState<this.DONE&&(this.setReadyState(this.UNSENT),this.trigger("abort"))},o.prototype.dispatchEvent=function(){return!1},o.prototype.setRequestHeader=function(a,s){this.log('set request header "%s" to "%s"',a,s),this._requestHeaders.append(a,s)},o.prototype.getResponseHeader=function(a){if(this.log('get response header "%s"',a),this.readyState<this.HEADERS_RECEIVED)return this.log("cannot return a header: headers not received (state: %s)",this.readyState),null;var s=this._responseHeaders.get(a);return this.log('resolved response header "%s" to "%s"',a,s,this._responseHeaders),s},o.prototype.getAllResponseHeaders=function(){return this.log("get all response headers"),this.readyState<this.HEADERS_RECEIVED?(this.log("cannot return headers: headers not received (state: %s)",this.readyState),""):qo.headersToString(this._responseHeaders)},o.prototype.addEventListener=function(a,s){this.log("addEventListener",a,s),this._events.push({name:a,listener:s})},o.prototype.removeEventListener=function(a,s){this.log("removeEventListener",a,s),this._events=this._events.filter(function(u){return u.name!==a&&u.listener!==s})},o.prototype.overrideMimeType=function(){},o.prototype.getResponseBody=function(a){var s=a??"";switch(this.log("coerced response body to",s),this.responseType){case"json":return this.log("resolving response body as JSON"),pX.parseJson(s);case"blob":{var u=this.getResponseHeader("content-type")||"text/plain";return this.log("resolving response body as Blob",{type:u}),new Blob([s],{type:u})}case"arraybuffer":{this.log("resolving response body as ArrayBuffer");var l=sF.bufferFrom(s);return l}default:return s}},o.prototype.getResponseXML=function(){var a=this.getResponseHeader("Content-Type");return a==="application/xml"||a==="text/xml"?new fX.DOMParser().parseFromString(this.responseText,a):null},o.prototype.propagateCallbacks=function(a){var s,u;this.log("propagating request callbacks to the original request");var l=["abort","onerror","ontimeout","onload","onloadstart","onloadend","onprogress","onreadystatechange"];try{for(var c=aF(l),f=c.next();!f.done;f=c.next()){var p=f.value,d=this[p];d&&(a[p]=this[p],this.log('propagated the "%s" callback',p,d))}}catch(m){s={error:m}}finally{try{f&&!f.done&&(u=c.return)&&u.call(c)}finally{if(s)throw s.error}}a.onabort=this.abort,a.onerror=this.onerror,a.ontimeout=this.ontimeout,a.onload=this.onload,a.onloadstart=this.onloadstart,a.onloadend=this.onloadend,a.onprogress=this.onprogress,a.onreadystatechange=this.onreadystatechange},o.prototype.propagateListeners=function(a){this.log("propagating request listeners (%d) to the original request",this._events.length,this._events),this._events.forEach(function(s){var u=s.name,l=s.listener;a.addEventListener(u,l)})},o.prototype.propagateHeaders=function(a,s){var u=this;this.log("propagating request headers to the original request",s),Object.entries(s.raw()).forEach(function(l){var c=Ov(l,2),f=c[0],p=c[1];u.log('setting "%s" (%s) header on the original request',f,p),a.setRequestHeader(f,p)})},o}(),t.UNSENT=0,t.OPENED=1,t.HEADERS_RECEIVED=2,t.LOADING=3,t.DONE=4,t};gr.createXMLHttpRequestOverride=vX});var cF=y(Pu=>{"use strict";var yX=Pu&&Pu.__extends||function(){var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,i){n.__proto__=i}||function(n,i){for(var o in i)Object.prototype.hasOwnProperty.call(i,o)&&(n[o]=i[o])},e(t,r)};return function(t,r){if(typeof r!="function"&&r!==null)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");e(t,r);function n(){this.constructor=t}t.prototype=r===null?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(Pu,"__esModule",{value:!0});Pu.XMLHttpRequestInterceptor=void 0;var gX=Hs(),sw=ov(),EX=cf(),TX=lF(),_X=function(e){yX(t,e);function t(){return e.call(this,t.symbol)||this}return t.prototype.checkEnvironment=function(){return typeof window<"u"&&typeof window.XMLHttpRequest<"u"},t.prototype.setup=function(){var r=this.log.extend("setup");r('patching "XMLHttpRequest" module...');var n=window.XMLHttpRequest;gX.invariant(!n[sw.IS_PATCHED_MODULE],'Failed to patch the "XMLHttpRequest" module: already patched.'),window.XMLHttpRequest=TX.createXMLHttpRequestOverride({XMLHttpRequest:n,emitter:this.emitter,log:this.log}),r('native "XMLHttpRequest" module patched!',window.XMLHttpRequest.name),Object.defineProperty(window.XMLHttpRequest,sw.IS_PATCHED_MODULE,{enumerable:!0,configurable:!0,value:!0}),this.subscriptions.push(function(){Object.defineProperty(window.XMLHttpRequest,sw.IS_PATCHED_MODULE,{value:void 0}),window.XMLHttpRequest=n,r('native "XMLHttpRequest" module restored!',window.XMLHttpRequest.name)})},t.symbol=Symbol("xhr"),t}(EX.Interceptor);Pu.XMLHttpRequestInterceptor=_X});var If=y((dae,oM)=>{var bX=Object.create,wf=Object.defineProperty,SX=Object.defineProperties,wX=Object.getOwnPropertyDescriptor,OX=Object.getOwnPropertyDescriptors,NX=Object.getOwnPropertyNames,Rv=Object.getOwnPropertySymbols,IX=Object.getPrototypeOf,pw=Object.prototype.hasOwnProperty,bF=Object.prototype.propertyIsEnumerable,fF=(e,t,r)=>t in e?wf(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,Rt=(e,t)=>{for(var r in t||(t={}))pw.call(t,r)&&fF(e,r,t[r]);if(Rv)for(var r of Rv(t))bF.call(t,r)&&fF(e,r,t[r]);return e},un=(e,t)=>SX(e,OX(t)),RX=(e,t)=>{var r={};for(var n in e)pw.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(e!=null&&Rv)for(var n of Rv(e))t.indexOf(n)<0&&bF.call(e,n)&&(r[n]=e[n]);return r},SF=(e,t)=>{for(var r in t)wf(e,r,{get:t[r],enumerable:!0})},wF=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of NX(t))!pw.call(e,i)&&i!==r&&wf(e,i,{get:()=>t[i],enumerable:!(n=wX(t,i))||n.enumerable});return e},Of=(e,t,r)=>(r=e!=null?bX(IX(e)):{},wF(t||!e||!e.__esModule?wf(r,"default",{value:e,enumerable:!0}):r,e)),LX=e=>wF(wf({},"__esModule",{value:!0}),e),OF={};SF(OF,{GraphQLHandler:()=>kv,RESTMethods:()=>XF,RequestHandler:()=>mw,RestHandler:()=>Cv,cleanUrl:()=>gw,compose:()=>qF,context:()=>NF,createResponseComposition:()=>fw,defaultContext:()=>xv,defaultResponse:()=>UF,graphql:()=>hZ,graphqlContext:()=>eM,handleRequest:()=>Tw,matchRequestUrl:()=>Ew,parseIsomorphicRequest:()=>nM,response:()=>VF,rest:()=>fZ,restContext:()=>JF,setupWorker:()=>cZ});oM.exports=LX(OF);var NF={};SF(NF,{body:()=>LF,cookie:()=>dw,data:()=>PF,delay:()=>CF,errors:()=>kF,extensions:()=>xF,fetch:()=>DF,json:()=>Cu,set:()=>RF,status:()=>IF,text:()=>AF,xml:()=>jF});var PX=Of(ix()),IF=(e,t)=>r=>(r.status=e,r.statusText=t||PX.default[String(e)],r),xX=Tn();function RF(...e){return t=>{let[r,n]=e;return typeof r=="string"?t.headers.append(r,n):(0,xX.objectToHeaders)(r).forEach((o,a)=>{t.headers.append(a,o)}),t}}var CX=Of(Ch()),dw=(e,t,r)=>n=>{let i=CX.serialize(e,t,r);return n.headers.append("Set-Cookie",i),typeof document<"u"&&(document.cookie=i),n},LF=e=>t=>(t.body=e,t);function Fi(e){try{return JSON.parse(e)}catch{return}}function pF(e){return e!=null&&typeof e=="object"&&!Array.isArray(e)}function xu(e,t){return Object.entries(t).reduce((r,[n,i])=>{let o=r[n];return Array.isArray(o)&&Array.isArray(i)?(r[n]=o.concat(i),r):pF(o)&&pF(i)?(r[n]=xu(o,i),r):(r[n]=i,r)},Object.assign({},e))}var Cu=e=>t=>(t.headers.set("Content-Type","application/json"),t.body=JSON.stringify(e),t),PF=e=>t=>{let r=Fi(t.body)||{},n=xu(r,{data:e});return Cu(n)(t)},xF=e=>t=>{let r=Fi(t.body)||{},n=xu(r,{extensions:e});return Cu(n)(t)},kX=Dh(),uw=2147483647,dF=100,DX=400,AX=5,hF=()=>(0,kX.isNodeProcess)()?AX:Math.floor(Math.random()*(DX-dF)+dF),CF=e=>t=>{let r;if(typeof e=="string")switch(e){case"infinite":{r=uw;break}case"real":{r=hF();break}default:throw new Error(`Failed to delay a response: unknown delay mode "${e}". Please make sure you provide one of the supported modes ("real", "infinite") or a number to "ctx.delay".`)}else if(typeof e>"u")r=hF();else{if(e>uw)throw new Error(`Failed to delay a response: provided delay duration (${e}) exceeds the maximum allowed duration for "setTimeout" (${uw}). This will cause the response to be returned immediately. Please use a number within the allowed range to delay the response by exact duration, or consider the "infinite" delay mode to delay the response indefinitely.`);r=e}return t.delay=r,t},kF=e=>t=>{if(e==null)return t;let r=Fi(t.body)||{},n=xu(r,{errors:e});return Cu(n)(t)},jX=Dh(),FX=Tn(),mF=(0,jX.isNodeProcess)()?Ex():window.fetch,vF=e=>{let t=new FX.Headers(e.headers);return t.set("x-msw-bypass","true"),un(Rt({},e),{headers:t.all()})},MX=e=>{let{body:t,method:r}=e,n=un(Rt({},e),{body:void 0});return["GET","HEAD"].includes(r)||(typeof t=="object"||typeof t=="number"||typeof t=="boolean"?n.body=JSON.stringify(t):n.body=t),n},DF=(e,t={})=>{if(typeof e=="string")return mF(e,vF(t));let r=MX(e),n=vF(r);return mF(e.url.href,n)},AF=e=>t=>(t.headers.set("Content-Type","text/plain"),t.body=e,t),jF=e=>t=>(t.headers.set("Content-Type","text/xml"),t.body=e,t),qX=Dh(),yF=ME(),UX=Bs(),VX=Bs(),lw=(e,t,r)=>[e.active,e.installing,e.waiting].filter(Boolean).find(a=>r(a.scriptURL,t))||null;function GX(e){return new URL(e,location.origin).href}var $X=Hs(),QX="[MSW]";function hw(e,...t){let r=(0,$X.format)(e,...t);return`${QX} ${r}`}function KX(e,...t){console.warn(hw(e,...t))}function BX(e,...t){console.error(hw(e,...t))}var Ce={formatMessage:hw,warn:KX,error:BX},HX=async(e,t={},r)=>{let n=GX(e),i=await navigator.serviceWorker.getRegistrations().then(u=>u.filter(l=>lw(l,n,r)));!navigator.serviceWorker.controller&&i.length>0&&location.reload();let[o]=i;if(o)return o.update().then(()=>[lw(o,n,r),o]);let[a,s]=await(0,VX.until)(async()=>{let u=await navigator.serviceWorker.register(e,t);return[lw(u,n,r),u]});if(a){if(a.message.includes("(404)")){let l=new URL(t?.scope||"/",location.href);throw new Error(Ce.formatMessage(`Failed to register a Service Worker for scope ('${l.href}') with script ('${n}'): Service Worker script does not exist at the given path.

Did you forget to run "npx msw init <PUBLIC_DIR>"?

Learn more about creating the Service Worker script: https://mswjs.io/docs/cli/init`))}throw new Error(Ce.formatMessage(`Failed to register the Service Worker:

%s`,a.message))}return s};function FF(e={}){if(e.quiet)return;let t=e.message||"Mocking enabled.";console.groupCollapsed(`%c${Ce.formatMessage(t)}`,"color:orangered;font-weight:bold;"),console.log("%cDocumentation: %chttps://mswjs.io/docs","font-weight:bold","font-weight:normal"),console.log("Found an issue? https://github.com/mswjs/msw/issues"),e.workerUrl&&console.log("Worker script URL:",e.workerUrl),e.workerScope&&console.log("Worker scope:",e.workerScope),console.groupEnd()}async function zX(e,t){var r,n;if(e.workerChannel.send("MOCK_ACTIVATE"),await e.events.once("MOCKING_ENABLED"),e.isMockingEnabled){Ce.warn('Found a redundant "worker.start()" call. Note that starting the worker while mocking is already enabled will have no effect. Consider removing this "worker.start()" call.');return}e.isMockingEnabled=!0,FF({quiet:t.quiet,workerScope:(r=e.registration)==null?void 0:r.scope,workerUrl:(n=e.worker)==null?void 0:n.scriptURL})}function WX(e){let t=e.ports[0];return{send(r){!t||t.postMessage(r)}}}var MF=class extends Error{constructor(e){super(e),this.name="NetworkError"}},YX=Tn(),XX=Tn(),JX=Tn();function qF(...e){return(...t)=>e.reduceRight((r,n)=>r instanceof Promise?Promise.resolve(r).then(n):n(r),t[0])}var UF={status:200,statusText:"OK",body:null,delay:0,once:!1,passthrough:!1},ZX=[];function fw(e,t=ZX){return async(...r)=>{let n=Object.assign({},UF,{headers:new JX.Headers({"x-powered-by":"msw"})},e),i=[...t,...r].filter(Boolean);return i.length>0?qF(...i)(n):n}}var VF=Object.assign(fw(),{once:fw({once:!0}),networkError(e){throw new MF(e)}}),eJ=/\/msw\/src\/(.+)/,tJ=/(node_modules)?[\/\\]lib[\/\\](umd|esm|iief|cjs)[\/\\]|^[^\/\\]*$/;function rJ(e){let t=e.stack;if(!t)return;let n=t.split(`
`).slice(1).find(o=>!(eJ.test(o)||tJ.test(o)));return n?n.replace(/\s*at [^()]*\(([^)]+)\)/,"$1").replace(/^@/,""):void 0}function nJ(e){return e?typeof e[Symbol.iterator]=="function":!1}var xv={status:IF,set:RF,delay:CF,fetch:DF},mw=class{constructor(e){this.shouldSkip=!1,this.ctx=e.ctx||xv,this.resolver=e.resolver;let t=rJ(new Error);this.info=un(Rt({},e.info),{callFrame:t})}parse(e,t){return null}test(e,t){return this.predicate(e,this.parse(e,t),t)}getPublicRequest(e,t){return e}markAsSkipped(e=!0){this.shouldSkip=e}async run(e,t){if(this.shouldSkip)return null;let r=this.parse(e,t);if(!this.predicate(e,r,t))return null;let i=this.getPublicRequest(e,r),a=await this.wrapResolver(this.resolver)(i,VF,this.ctx);return this.createExecutionResult(r,i,a)}wrapResolver(e){return async(t,r,n)=>{let i=this.resolverGenerator||await e(t,r,n);if(nJ(i)){let{value:o,done:a}=i[Symbol.iterator]().next(),s=await o;return!s&&a?this.resolverGeneratorResult:(this.resolverGenerator||(this.resolverGenerator=i),this.resolverGeneratorResult=s,s)}return i}}createExecutionResult(e,t,r){return{handler:this,parsedResult:e||null,request:t,response:r||null}}};function GF(){return{status:101,statusText:"Continue",headers:new XX.Headers,body:null,passthrough:!0,once:!1}}var iJ=Of(Ch()),gF=BE(),oJ=Of(Ch());function EF(){return oJ.parse(document.cookie)}function aJ(e){if(typeof document>"u"||typeof location>"u")return{};switch(e.credentials){case"same-origin":return location.origin===e.url.origin?EF():{};case"include":return EF();default:return{}}}function $F(e){var t;let r=e.headers.get("cookie");gF.store.hydrate();let n=Array.from((t=gF.store.get(un(Rt({},e),{url:e.url.toString()})))==null?void 0:t.entries()).reduce((s,[u,{value:l}])=>Object.assign(s,{[u.trim()]:l}),{}),i=aJ(e),o=Rt(Rt({},i),n);for(let[s,u]of Object.entries(o))e.headers.append("cookie",`${s}=${u}`);let a=r?iJ.parse(r):{};e.cookies=Rt(Rt(Rt({},e.cookies),o),a)}var sJ=Tn();function uJ(e){var t,r;let n=(0,sJ.stringToHeaders)(e),i=n.get("content-type")||"text/plain",o=n.get("content-disposition");if(!o)throw new Error('"Content-Disposition" header is required.');let a=o.split(";").reduce((l,c)=>{let[f,...p]=c.trim().split("=");return l[f]=p.join("="),l},{}),s=(t=a.name)==null?void 0:t.slice(1,-1),u=(r=a.filename)==null?void 0:r.slice(1,-1);return{name:s,filename:u,contentType:i}}function lJ(e,t){let r=t?.get("content-type");if(!r)return;let[,...n]=r.split(/; */),i=n.filter(u=>u.startsWith("boundary=")).map(u=>u.replace(/^boundary=/,""))[0];if(!i)return;let o=new RegExp(`--+${i}`),a=e.split(o).filter(u=>u.startsWith(`\r
`)&&u.endsWith(`\r
`)).map(u=>u.trimStart().replace(/\r\n$/,""));if(!a.length)return;let s={};try{for(let u of a){let[l,...c]=u.split(`\r
\r
`),f=c.join(`\r
\r
`),{contentType:p,filename:d,name:m}=uJ(l),E=d===void 0?f:new File([f],d,{type:p}),b=s[m];b===void 0?s[m]=E:Array.isArray(b)?s[m]=[...b,E]:s[m]=[b,E]}return s}catch{return}}function vw(e,t){var r;if(!e)return e;let n=((r=t?.get("content-type"))==null?void 0:r.toLowerCase())||"";return n.startsWith("multipart/form-data")&&typeof e!="object"?lJ(e.toString(),t)||e:n.includes("json")&&typeof e!="object"&&Fi(e.toString())||e}function yw(e,t){return e.toLowerCase()===t.toLowerCase()}function cJ(e){if(!(e.method&&yw(e.method,"GET")&&e.body===""))return e.body}function fJ(e){let t={id:e.id,cache:e.cache,credentials:e.credentials,method:e.method,url:new URL(e.url),referrer:e.referrer,referrerPolicy:e.referrerPolicy,redirect:e.redirect,mode:e.mode,params:{},cookies:{},integrity:e.integrity,keepalive:e.keepalive,destination:e.destination,body:cJ(e),bodyUsed:e.bodyUsed,headers:new YX.Headers(e.headers),passthrough:GF};return $F(t),t.body=vw(t.body,t.headers),t}var pJ=Bs(),dJ=async(e,t,r)=>{let n=t.filter(o=>o.test(e,r));if(n.length===0)return{handler:void 0,response:void 0};let i=await n.reduce(async(o,a)=>{let s=await o;if(s?.response)return o;let u=await a.run(e,r);return u===null||u.handler.shouldSkip?null:u.response?(u.response.once&&a.markAsSkipped(!0),u):{request:u.request,handler:u.handler,response:void 0,parsedResult:u.parsedResult}},Promise.resolve(null));return i?{handler:i.handler,publicRequest:i.request,parsedRequest:i.parsedResult,response:i.response}:{handler:void 0,response:void 0}},QF=Of(Bx()),hJ=IS(),Nf=e=>e.referrer.startsWith(e.url.origin)?e.url.pathname:new URL(e.url.pathname,`${e.url.protocol}//${e.url.host}`).href;function KF(e){var t;let r=e.definitions.find(n=>n.kind==="OperationDefinition");return{operationType:r?.operation,operationName:(t=r?.name)==null?void 0:t.value}}function mJ(e){try{let t=(0,hJ.parse)(e);return KF(t)}catch(t){return t}}function vJ(e,t,r){let n={variables:e};for(let[i,o]of Object.entries(t)){if(!(i in r))throw new Error(`Given files do not have a key '${i}' .`);for(let a of o){let[s,...u]=a.split(".").reverse(),l=u.reverse(),c=n;for(let f of l){if(!(f in c))throw new Error(`Property '${l}' is not in operations.`);c=c[f]}c[s]=r[i]}}return n.variables}function yJ(e){var t,r;switch(e.method){case"GET":{let n=e.url.searchParams.get("query"),i=e.url.searchParams.get("variables")||"";return{query:n,variables:Fi(i)}}case"POST":{if((t=e.body)!=null&&t.query){let{query:n,variables:i}=e.body;return{query:n,variables:i}}if((r=e.body)!=null&&r.operations){let n=e.body,{operations:i,map:o}=n,a=RX(n,["operations","map"]),s=Fi(i)||{};if(!s.query)return null;let u=Fi(o||"")||{},l=s.variables?vJ(s.variables,u,a):{};return{query:s.query,variables:l}}}default:return null}}function BF(e){let t=yJ(e);if(!t||!t.query)return;let{query:r,variables:n}=t,i=mJ(r);if(i instanceof Error){let o=Nf(e);throw new Error(Ce.formatMessage(`Failed to intercept a GraphQL request to "%s %s": cannot parse query. See the error message from the parser below.

%s`,e.method,o,i.message))}return{operationType:i.operationType,operationName:i.operationName,variables:n}}function HF(e){return e<300?"#69AB32":e<400?"#F0BB4B":"#E95F5D"}function zF(){let e=new Date;return[e.getHours(),e.getMinutes(),e.getSeconds()].map(String).map(t=>t.slice(0,2)).map(t=>t.padStart(2,"0")).join(":")}function WF(e){return un(Rt({},e),{headers:e.headers.all()})}var gJ=Tn();function YF(e){let t=(0,gJ.objectToHeaders)(e.headers);return un(Rt({},e),{body:vw(e.body,t)})}var EJ=JA(),TJ=xS(),_J=/[\?|#].*$/g;function bJ(e){return new URL(`/${e}`,"http://localhost").searchParams}function gw(e){return e.replace(_J,"")}function SJ(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}function wJ(e,t){if(SJ(e)||e.startsWith("*"))return e;let r=t||typeof document<"u"&&document.baseURI;return r?decodeURI(new URL(encodeURI(e),r).href):e}function OJ(e,t){if(e instanceof RegExp)return e;let r=wJ(e,t);return gw(r)}function NJ(e){return e.replace(/([:a-zA-Z_-]*)(\*{1,2})+/g,(t,r,n)=>{let i="(.*)";return r?r.startsWith(":")?`${r}${n}`:`${r}${i}`:i}).replace(/([^\/])(:)(?=\d+)/,"$1\\$2").replace(/^([^\/]+)(:)(?=\/\/)/,"$1\\$2")}function Ew(e,t,r){let n=OJ(t,r),i=typeof n=="string"?NJ(n):n,o=(0,TJ.getCleanUrl)(e),a=(0,EJ.match)(i,{decode:decodeURIComponent})(o),s=a&&a.params||{};return{matches:a!==!1,params:s}}var XF=(e=>(e.HEAD="HEAD",e.GET="GET",e.POST="POST",e.PUT="PUT",e.PATCH="PATCH",e.OPTIONS="OPTIONS",e.DELETE="DELETE",e))(XF||{}),JF=un(Rt({},xv),{cookie:dw,body:LF,text:AF,json:Cu,xml:jF}),Cv=class extends mw{constructor(e,t,r){super({info:{header:`${e} ${t}`,path:t,method:e},ctx:JF,resolver:r}),this.checkRedundantQueryParameters()}checkRedundantQueryParameters(){let{method:e,path:t}=this.info;if(t instanceof RegExp||gw(t)===t)return;let n=bJ(t),i=[];n.forEach((o,a)=>{i.push(a)}),Ce.warn(`Found a redundant usage of query parameters in the request handler URL for "${e} ${t}". Please match against a path instead and access query parameters in the response resolver function using "req.url.searchParams".`)}parse(e,t){return Ew(e.url,this.info.path,t?.baseUrl)}getPublicRequest(e,t){return un(Rt({},e),{params:t.params||{}})}predicate(e,t){return(this.info.method instanceof RegExp?this.info.method.test(e.method):yw(this.info.method,e.method))&&t.matches}log(e,t){let r=Nf(e),n=WF(e),i=YF(t),o=HF(t.status);console.groupCollapsed(Ce.formatMessage("%s %s %s (%c%s%c)"),zF(),e.method,r,`color:${o}`,`${t.status} ${t.statusText}`,"color:inherit"),console.log("Request",n),console.log("Handler:",{mask:this.info.path,resolver:this.resolver}),console.log("Response",i),console.groupEnd()}},Iv=Hs(),IJ=(e,t)=>r=>{RJ(e);let n=Fi(r.body)||{},i=xu(n,{[e]:t});return Cu(i)(r)};function RJ(e){(0,Iv.invariant)(e.trim()!=="",Ce.formatMessage("Failed to set a custom field on a GraphQL response: field name cannot be empty.")),(0,Iv.invariant)(e!=="data",Ce.formatMessage('Failed to set a custom "%s" field on a mocked GraphQL response: forbidden field name. Did you mean to call "ctx.data()" instead?',e)),(0,Iv.invariant)(e!=="errors",Ce.formatMessage('Failed to set a custom "%s" field on a mocked GraphQL response: forbidden field name. Did you mean to call "ctx.errors()" instead?',e)),(0,Iv.invariant)(e!=="extensions",Ce.formatMessage('Failed to set a custom "%s" field on a mocked GraphQL response: forbidden field name. Did you mean to call "ctx.extensions()" instead?',e))}function ZF(e,t){try{return e()}catch(r){t?.(r)}}var eM=un(Rt({},xv),{data:PF,extensions:xF,errors:kF,cookie:dw,field:IJ});function LJ(e){return e==null?!1:typeof e=="object"&&"kind"in e&&"definitions"in e}var kv=class extends mw{constructor(e,t,r,n){let i=t;if(LJ(t)){let a=KF(t);if(a.operationType!==e)throw new Error(`Failed to create a GraphQL handler: provided a DocumentNode with a mismatched operation type (expected "${e}", but got "${a.operationType}").`);if(!a.operationName)throw new Error("Failed to create a GraphQL handler: provided a DocumentNode with no operation name.");i=a.operationName}let o=e==="all"?`${e} (origin: ${r.toString()})`:`${e} ${i} (origin: ${r.toString()})`;super({info:{header:o,operationType:e,operationName:i},ctx:eM,resolver:n}),this.endpoint=r}parse(e){return ZF(()=>BF(e),t=>console.error(t.message))}getPublicRequest(e,t){return un(Rt({},e),{variables:t?.variables||{}})}predicate(e,t){if(!t)return!1;if(!t.operationName&&this.info.operationType!=="all"){let o=Nf(e);return Ce.warn(`Failed to intercept a GraphQL request at "${e.method} ${o}": anonymous GraphQL operations are not supported.

Consider naming this operation or using "graphql.operation" request handler to intercept GraphQL requests regardless of their operation name/type. Read more: https://mswjs.io/docs/api/graphql/operation      `),!1}let r=Ew(e.url,this.endpoint),n=this.info.operationType==="all"||t.operationType===this.info.operationType,i=this.info.operationName instanceof RegExp?this.info.operationName.test(t.operationName||""):t.operationName===this.info.operationName;return r.matches&&n&&i}log(e,t,r,n){let i=WF(e),o=YF(t),a=HF(t.status),s=n?.operationName?`${n?.operationType} ${n?.operationName}`:`anonymous ${n?.operationType}`;console.groupCollapsed(Ce.formatMessage("%s %s (%c%s%c)"),zF(),`${s}`,`color:${a}`,`${t.status} ${t.statusText}`,"color:inherit"),console.log("Request:",i),console.log("Handler:",this),console.log("Response:",o),console.groupEnd()}},PJ=3,xJ=4,tM=.5;function CJ(e){return e.reduce((t,r)=>(r instanceof Cv&&t.rest.push(r),r instanceof kv&&t.graphql.push(r),t),{rest:[],graphql:[]})}function kJ(){return(e,t)=>{let{path:r,method:n}=t.info;if(r instanceof RegExp||n instanceof RegExp)return 1/0;let o=yw(e.method,n)?tM:0,a=Nf(e);return(0,QF.default)(a,r)-o}}function DJ(e){return(t,r)=>{if(typeof e.operationName>"u")return 1/0;let{operationType:n,operationName:i}=r.info;if(typeof i!="string")return 1/0;let a=e.operationType===n?tM:0;return(0,QF.default)(e.operationName,i)-a}}function AJ(e,t,r){return t.reduce((i,o)=>{let a=r(e,o);return i.concat([[a,o]])},[]).sort(([i],[o])=>i-o).filter(([i])=>i<=PJ).slice(0,xJ).map(([,i])=>i)}function jJ(e){return e.length>1?`Did you mean to request one of the following resources instead?

${e.map(t=>`  \u2022 ${t.info.header}`).join(`
`)}`:`Did you mean to request "${e[0].info.header}" instead?`}function FJ(e,t,r="warn"){let n=ZF(()=>BF(e));function i(){let s=CJ(t),u=n?s.graphql:s.rest,l=AJ(e,u,n?DJ(n):kJ());return l.length>0?jJ(l):""}function o(){let s=Nf(e),u=n?`${n.operationType} ${n.operationName} (${e.method} ${s})`:`${e.method} ${s}`,l=i();return["captured a request without a matching request handler:",`  \u2022 ${u}`,l,`If you still wish to intercept this unhandled request, please create a request handler for it.
Read more: https://mswjs.io/docs/getting-started/mocks`].filter(Boolean).join(`

`)}function a(s){let u=o();switch(s){case"error":throw Ce.error("Error: %s",u),new Error(Ce.formatMessage('Cannot bypass a request when using the "error" strategy for the "onUnhandledRequest" option.'));case"warn":{Ce.warn("Warning: %s",u);break}case"bypass":break;default:throw new Error(Ce.formatMessage('Failed to react to an unhandled request: unknown strategy "%s". Please provide one of the supported strategies ("bypass", "warn", "error") or a custom callback function as the value of the "onUnhandledRequest" option.',s))}}if(typeof r=="function"){r(e,{warning:a.bind(null,"warn"),error:a.bind(null,"error")});return}a(r)}var TF=BE();function MJ(e,t){TF.store.add(un(Rt({},e),{url:e.url.toString()}),t),TF.store.persist()}async function Tw(e,t,r,n,i){var o,a,s,u,l,c,f;if(n.emit("request:start",e),e.headers.get("x-msw-bypass")==="true"){n.emit("request:end",e),(o=i?.onPassthroughResponse)==null||o.call(i,e);return}let[p,d]=await(0,pJ.until)(()=>dJ(e,t,i?.resolutionContext));if(p)throw n.emit("unhandledException",p,e),p;let{handler:m,response:E}=d;if(!m){FJ(e,t,r.onUnhandledRequest),n.emit("request:unhandled",e),n.emit("request:end",e),(a=i?.onPassthroughResponse)==null||a.call(i,e);return}if(!E){Ce.warn(`Expected response resolver to return a mocked response Object, but got %s. The original response is going to be used instead.

  \u2022 %s
    %s`,E,m.info.header,m.info.callFrame),n.emit("request:end",e),(s=i?.onPassthroughResponse)==null||s.call(i,e);return}if(E.passthrough){n.emit("request:end",e),(u=i?.onPassthroughResponse)==null||u.call(i,e);return}MJ(e,E),n.emit("request:match",e);let b=d,h=((l=i?.transformResponse)==null?void 0:l.call(i,E))||E;return(c=i?.onMockedResponse)==null||c.call(i,h,b),(f=i?.onMockedResponseSent)==null||f.call(i,h,b),n.emit("request:end",e),h}var qJ=Hs();async function UJ(e,t,r){let n=new Response(r.body,r);delete r.body,t.send({type:"MOCK_RESPONSE_START",payload:r}),(0,qJ.invariant)(n.body,"Failed to stream mocked response with no body");let i=n.body.getReader();for(;;){let{done:o,value:a}=await i.read();if(!o){e.postMessage({type:"MOCK_RESPONSE_CHUNK",payload:a});continue}e.postMessage({type:"MOCK_RESPONSE_END"}),e.close(),i.releaseLock();break}}var VJ=typeof BroadcastChannel>"u"?class{constructor(){throw new Error("Cannot construct BroadcastChannel in a non-browser environment")}}:BroadcastChannel,GJ=class extends VJ{postMessage(e){return super.postMessage(e)}},$J=(e,t)=>async(r,n)=>{let i=WX(r);try{let o=fJ(n.payload),a=new GJ(`msw-response-stream-${o.id}`);await Tw(o,e.requestHandlers,t,e.emitter,{transformResponse:QJ,onPassthroughResponse(){return i.send({type:"MOCK_NOT_FOUND"})},onMockedResponse(s){if(s.body==null)return i.send({type:"MOCK_RESPONSE",payload:s});UJ(a,i,s)},onMockedResponseSent(s,{handler:u,publicRequest:l,parsedRequest:c}){t.quiet||u.log(l,s,u,c)}})}catch(o){if(o instanceof MF)return i.send({type:"NETWORK_ERROR",payload:{name:o.name,message:o.message}});o instanceof Error&&i.send({type:"INTERNAL_ERROR",payload:{status:500,body:JSON.stringify({errorType:o.constructor.name,message:o.message,location:o.stack})}})}};function QJ(e){return{status:e.status,statusText:e.statusText,headers:e.headers.all(),body:e.body,delay:e.delay}}async function KJ(e,t){e.workerChannel.send("INTEGRITY_CHECK_REQUEST");let{payload:r}=await e.events.once("INTEGRITY_CHECK_RESPONSE");if(r!=="c9450df6e4dc5e45740c3b0b640727a2")throw new Error(`Currently active Service Worker (${r}) is behind the latest published one (c9450df6e4dc5e45740c3b0b640727a2).`);return t}var _F=Bs();function BJ(e){let t=window.XMLHttpRequest.prototype.send;window.XMLHttpRequest.prototype.send=function(...n){(0,_F.until)(()=>e).then(()=>{window.XMLHttpRequest.prototype.send=t,this.send(...n)})};let r=window.fetch;window.fetch=async(...n)=>(await(0,_F.until)(()=>e),window.fetch=r,window.fetch(...n))}function HJ(e){return(t,r)=>{var n;let{payload:i}=r;if((n=i.type)!=null&&n.includes("opaque"))return;let o=new Response(i.body||null,i);o.headers.get("x-powered-by")==="msw"?e.emitter.emit("response:mocked",o,i.requestId):e.emitter.emit("response:bypass",o,i.requestId)}}function zJ(e,t){!t?.quiet&&!location.href.startsWith(e.scope)&&Ce.warn(`Cannot intercept requests on this page because it's outside of the worker's scope ("${e.scope}"). If you wish to mock API requests on this page, you must resolve this scope issue.

- (Recommended) Register the worker at the root level ("/") of your application.
- Set the "Service-Worker-Allowed" response header to allow out-of-scope workers.`)}var WJ=e=>function(r,n){let o=(async()=>{e.events.removeAllListeners(),e.workerChannel.on("REQUEST",$J(e,r)),e.workerChannel.on("RESPONSE",HJ(e));let a=await HX(r.serviceWorker.url,r.serviceWorker.options,r.findWorker),[s,u]=a;if(!s){let c=n?.findWorker?Ce.formatMessage(`Failed to locate the Service Worker registration using a custom "findWorker" predicate.

Please ensure that the custom predicate properly locates the Service Worker registration at "%s".
More details: https://mswjs.io/docs/api/setup-worker/start#findworker
`,r.serviceWorker.url):Ce.formatMessage(`Failed to locate the Service Worker registration.

This most likely means that the worker script URL "%s" cannot resolve against the actual public hostname (%s). This may happen if your application runs behind a proxy, or has a dynamic hostname.

Please consider using a custom "serviceWorker.url" option to point to the actual worker script location, or a custom "findWorker" option to resolve the Service Worker registration manually. More details: https://mswjs.io/docs/api/setup-worker/start`,r.serviceWorker.url,location.host);throw new Error(c)}e.worker=s,e.registration=u,e.events.addListener(window,"beforeunload",()=>{s.state!=="redundant"&&e.workerChannel.send("CLIENT_CLOSED"),window.clearInterval(e.keepAliveInterval)});let[l]=await(0,UX.until)(()=>KJ(e,s));return l&&Ce.error(`Detected outdated Service Worker: ${l.message}

The mocking is still enabled, but it's highly recommended that you update your Service Worker by running:

$ npx msw init <PUBLIC_DIR>

This is necessary to ensure that the Service Worker is in sync with the library to guarantee its stability.
If this message still persists after updating, please report an issue: https://github.com/open-draft/msw/issues      `),e.keepAliveInterval=window.setInterval(()=>e.workerChannel.send("KEEPALIVE_REQUEST"),5e3),zJ(u,e.startOptions),u})().then(async a=>{let s=a.installing||a.waiting;return s&&await new Promise(u=>{s.addEventListener("statechange",()=>{if(s.state==="activated")return u()})}),await zX(e,r).catch(u=>{throw new Error(`Failed to enable mocking: ${u?.message}`)}),a});return r.waitUntilReady&&BJ(o),o};function rM(e={}){e.quiet||console.log(`%c${Ce.formatMessage("Mocking disabled.")}`,"color:orangered;font-weight:bold;")}var YJ=e=>function(){var r;if(!e.isMockingEnabled){Ce.warn('Found a redundant "worker.stop()" call. Note that stopping the worker while mocking already stopped has no effect. Consider removing this "worker.stop()" call.');return}e.workerChannel.send("MOCK_DEACTIVATE"),e.isMockingEnabled=!1,window.clearInterval(e.keepAliveInterval),rM({quiet:(r=e.startOptions)==null?void 0:r.quiet})};function XJ(e,...t){e.unshift(...t)}function JJ(e){e.forEach(t=>{t.markAsSkipped(!1)})}function ZJ(e,...t){return t.length>0?[...t]:[...e]}var eZ={serviceWorker:{url:"/mockServiceWorker.js",options:null},quiet:!1,waitUntilReady:!0,onUnhandledRequest:"warn",findWorker(e,t){return e===t}};function tZ(e){return xu(eZ,e||{})}function rZ(e,t){return r=>(t.startOptions=tZ(r),e(t.startOptions,r||{}))}var nZ=uj(),iZ=cj(),oZ=cF();function nM(e){let t={id:e.id,url:e.url,method:e.method,body:vw(e.body,e.headers),credentials:e.credentials||"same-origin",headers:e.headers,cookies:{},redirect:"manual",referrer:"",keepalive:!1,cache:"default",mode:"cors",referrerPolicy:"no-referrer",integrity:"",destination:"document",bodyUsed:!1,passthrough:GF};return $F(t),t}function aZ(e,t){let r=new nZ.BatchInterceptor({name:"fallback",interceptors:[new iZ.FetchInterceptor,new oZ.XMLHttpRequestInterceptor]});return r.on("request",async n=>{let i=nM(n),o=await Tw(i,e.requestHandlers,t,e.emitter,{transformResponse(a){return{status:a.status,statusText:a.statusText,headers:a.headers.all(),body:a.body,delay:a.delay}},onMockedResponseSent(a,{handler:s,publicRequest:u,parsedRequest:l}){t.quiet||s.log(u,a,s,l)}});o&&n.respondWith(o)}),r.apply(),r}function sZ(e){return async function(r){e.fallbackInterceptor=aZ(e,r),FF({message:"Mocking enabled (fallback mode).",quiet:r.quiet})}}function uZ(e){return function(){var r,n;(r=e.fallbackInterceptor)==null||r.dispose(),rM({quiet:(n=e.startOptions)==null?void 0:n.quiet})}}function lZ(e,t){let r=e.emit;r._isPiped||(e.emit=function(n,...i){return t.emit(n,...i),r.call(this,n,...i)},e.emit._isPiped=!0)}var cw=[];function cZ(...e){if(e.forEach(a=>{if(Array.isArray(a))throw new Error(Ce.formatMessage('Failed to call "setupWorker" given an Array of request handlers (setupWorker([a, b])), expected to receive each handler individually: setupWorker(a, b).'))}),(0,qX.isNodeProcess)())throw new Error(Ce.formatMessage("Failed to execute `setupWorker` in a non-browser environment. Consider using `setupServer` for Node.js environment instead."));let t=new yF.StrictEventEmitter,r=new yF.StrictEventEmitter;lZ(t,r);let n={isMockingEnabled:!1,startOptions:void 0,worker:null,registration:null,requestHandlers:[...e],emitter:t,workerChannel:{on(a,s){n.events.addListener(navigator.serviceWorker,"message",u=>{if(u.source!==n.worker)return;let l=Fi(u.data);!l||l.type===a&&s(u,l)})},send(a){var s;(s=n.worker)==null||s.postMessage(a)}},events:{addListener(a,s,u){return a.addEventListener(s,u),cw.push({eventType:s,target:a,callback:u}),()=>{a.removeEventListener(s,u)}},removeAllListeners(){for(let{target:a,eventType:s,callback:u}of cw)a.removeEventListener(s,u);cw=[]},once(a){let s=[];return new Promise((u,l)=>{let c=f=>{try{let p=JSON.parse(f.data);p.type===a&&u(p)}catch(p){l(p)}};s.push(n.events.addListener(navigator.serviceWorker,"message",c),n.events.addListener(navigator.serviceWorker,"messageerror",l))}).finally(()=>{s.forEach(u=>u())})}},useFallbackMode:!("serviceWorker"in navigator)||location.protocol==="file:"},i=n.useFallbackMode?sZ(n):WJ(n),o=n.useFallbackMode?uZ(n):YJ(n);return{start:rZ(i,n),stop(){n.events.removeAllListeners(),n.emitter.removeAllListeners(),r.removeAllListeners(),o()},use(...a){XJ(n.requestHandlers,...a)},restoreHandlers(){JJ(n.requestHandlers)},resetHandlers(...a){n.requestHandlers=ZJ(e,...a)},printHandlers(){n.requestHandlers.forEach(a=>{let{header:s,callFrame:u}=a.info,l=a.info.hasOwnProperty("operationType")?"[graphql]":"[rest]";console.groupCollapsed(`${l} ${s}`),u&&console.log(`Declaration: ${u}`),console.log("Handler:",a),a instanceof Cv&&console.log("Match:",`https://mswjs.io/repl?path=${a.info.path}`),console.groupEnd()})},events:{on(...a){return r.on(...a)},removeListener(...a){return r.removeListener(...a)},removeAllListeners(...a){return r.removeAllListeners(...a)}}}}function Uo(e){return(t,r)=>new Cv(e,t,r)}var fZ={all:Uo(/.+/),head:Uo("HEAD"),get:Uo("GET"),post:Uo("POST"),put:Uo("PUT"),delete:Uo("DELETE"),patch:Uo("PATCH"),options:Uo("OPTIONS")},Lv=IS();function Pv(e,t){return(r,n)=>new kv(e,r,t,n)}function iM(e){return t=>new kv("all",new RegExp(".*"),e,t)}var pZ={operation:iM("*"),query:Pv(Lv.OperationTypeNode.QUERY,"*"),mutation:Pv(Lv.OperationTypeNode.MUTATION,"*")};function dZ(e){return{operation:iM(e),query:Pv(Lv.OperationTypeNode.QUERY,e),mutation:Pv(Lv.OperationTypeNode.MUTATION,e)}}var hZ=un(Rt({},pZ),{link:dZ})});var Sw=y((nse,TM)=>{"use strict";TM.exports=function(t,r){return function(){for(var i=new Array(arguments.length),o=0;o<i.length;o++)i[o]=arguments[o];return t.apply(r,i)}}});var gt=y((ise,SM)=>{"use strict";var vZ=Sw(),Ow=Object.prototype.toString,Nw=function(e){return function(t){var r=Ow.call(t);return e[r]||(e[r]=r.slice(8,-1).toLowerCase())}}(Object.create(null));function $a(e){return e=e.toLowerCase(),function(r){return Nw(r)===e}}function Iw(e){return Array.isArray(e)}function Fv(e){return typeof e>"u"}function yZ(e){return e!==null&&!Fv(e)&&e.constructor!==null&&!Fv(e.constructor)&&typeof e.constructor.isBuffer=="function"&&e.constructor.isBuffer(e)}var _M=$a("ArrayBuffer");function gZ(e){var t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&_M(e.buffer),t}function EZ(e){return typeof e=="string"}function TZ(e){return typeof e=="number"}function bM(e){return e!==null&&typeof e=="object"}function jv(e){if(Nw(e)!=="object")return!1;var t=Object.getPrototypeOf(e);return t===null||t===Object.prototype}var _Z=$a("Date"),bZ=$a("File"),SZ=$a("Blob"),wZ=$a("FileList");function Rw(e){return Ow.call(e)==="[object Function]"}function OZ(e){return bM(e)&&Rw(e.pipe)}function NZ(e){var t="[object FormData]";return e&&(typeof FormData=="function"&&e instanceof FormData||Ow.call(e)===t||Rw(e.toString)&&e.toString()===t)}var IZ=$a("URLSearchParams");function RZ(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function LZ(){return typeof navigator<"u"&&(navigator.product==="ReactNative"||navigator.product==="NativeScript"||navigator.product==="NS")?!1:typeof window<"u"&&typeof document<"u"}function Lw(e,t){if(!(e===null||typeof e>"u"))if(typeof e!="object"&&(e=[e]),Iw(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}function ww(){var e={};function t(i,o){jv(e[o])&&jv(i)?e[o]=ww(e[o],i):jv(i)?e[o]=ww({},i):Iw(i)?e[o]=i.slice():e[o]=i}for(var r=0,n=arguments.length;r<n;r++)Lw(arguments[r],t);return e}function PZ(e,t,r){return Lw(t,function(i,o){r&&typeof i=="function"?e[o]=vZ(i,r):e[o]=i}),e}function xZ(e){return e.charCodeAt(0)===65279&&(e=e.slice(1)),e}function CZ(e,t,r,n){e.prototype=Object.create(t.prototype,n),e.prototype.constructor=e,r&&Object.assign(e.prototype,r)}function kZ(e,t,r){var n,i,o,a={};t=t||{};do{for(n=Object.getOwnPropertyNames(e),i=n.length;i-- >0;)o=n[i],a[o]||(t[o]=e[o],a[o]=!0);e=Object.getPrototypeOf(e)}while(e&&(!r||r(e,t))&&e!==Object.prototype);return t}function DZ(e,t,r){e=String(e),(r===void 0||r>e.length)&&(r=e.length),r-=t.length;var n=e.indexOf(t,r);return n!==-1&&n===r}function AZ(e){if(!e)return null;var t=e.length;if(Fv(t))return null;for(var r=new Array(t);t-- >0;)r[t]=e[t];return r}var jZ=function(e){return function(t){return e&&t instanceof e}}(typeof Uint8Array<"u"&&Object.getPrototypeOf(Uint8Array));SM.exports={isArray:Iw,isArrayBuffer:_M,isBuffer:yZ,isFormData:NZ,isArrayBufferView:gZ,isString:EZ,isNumber:TZ,isObject:bM,isPlainObject:jv,isUndefined:Fv,isDate:_Z,isFile:bZ,isBlob:SZ,isFunction:Rw,isStream:OZ,isURLSearchParams:IZ,isStandardBrowserEnv:LZ,forEach:Lw,merge:ww,extend:PZ,trim:RZ,stripBOM:xZ,inherits:CZ,toFlatObject:kZ,kindOf:Nw,kindOfTest:$a,endsWith:DZ,toArray:AZ,isTypedArray:jZ,isFileList:wZ}});var Pw=y((ose,OM)=>{"use strict";var Du=gt();function wM(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}OM.exports=function(t,r,n){if(!r)return t;var i;if(n)i=n(r);else if(Du.isURLSearchParams(r))i=r.toString();else{var o=[];Du.forEach(r,function(u,l){u===null||typeof u>"u"||(Du.isArray(u)?l=l+"[]":u=[u],Du.forEach(u,function(f){Du.isDate(f)?f=f.toISOString():Du.isObject(f)&&(f=JSON.stringify(f)),o.push(wM(l)+"="+wM(f))}))}),i=o.join("&")}if(i){var a=t.indexOf("#");a!==-1&&(t=t.slice(0,a)),t+=(t.indexOf("?")===-1?"?":"&")+i}return t}});var IM=y((ase,NM)=>{"use strict";var FZ=gt();function Mv(){this.handlers=[]}Mv.prototype.use=function(t,r,n){return this.handlers.push({fulfilled:t,rejected:r,synchronous:n?n.synchronous:!1,runWhen:n?n.runWhen:null}),this.handlers.length-1};Mv.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)};Mv.prototype.forEach=function(t){FZ.forEach(this.handlers,function(n){n!==null&&t(n)})};NM.exports=Mv});var LM=y((sse,RM)=>{"use strict";var MZ=gt();RM.exports=function(t,r){MZ.forEach(t,function(i,o){o!==r&&o.toUpperCase()===r.toUpperCase()&&(t[r]=i,delete t[o])})}});var Qa=y((use,kM)=>{"use strict";var PM=gt();function Au(e,t,r,n,i){Error.call(this),this.message=e,this.name="AxiosError",t&&(this.code=t),r&&(this.config=r),n&&(this.request=n),i&&(this.response=i)}PM.inherits(Au,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var xM=Au.prototype,CM={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach(function(e){CM[e]={value:e}});Object.defineProperties(Au,CM);Object.defineProperty(xM,"isAxiosError",{value:!0});Au.from=function(e,t,r,n,i,o){var a=Object.create(xM);return PM.toFlatObject(e,a,function(u){return u!==Error.prototype}),Au.call(a,e.message,t,r,n,i),a.name=e.name,o&&Object.assign(a,o),a};kM.exports=Au});var xw=y((lse,DM)=>{"use strict";DM.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}});var Cw=y((cse,AM)=>{"use strict";var kn=gt();function qZ(e,t){t=t||new FormData;var r=[];function n(o){return o===null?"":kn.isDate(o)?o.toISOString():kn.isArrayBuffer(o)||kn.isTypedArray(o)?typeof Blob=="function"?new Blob([o]):Buffer.from(o):o}function i(o,a){if(kn.isPlainObject(o)||kn.isArray(o)){if(r.indexOf(o)!==-1)throw Error("Circular reference detected in "+a);r.push(o),kn.forEach(o,function(u,l){if(!kn.isUndefined(u)){var c=a?a+"."+l:l,f;if(u&&!a&&typeof u=="object"){if(kn.endsWith(l,"{}"))u=JSON.stringify(u);else if(kn.endsWith(l,"[]")&&(f=kn.toArray(u))){f.forEach(function(p){!kn.isUndefined(p)&&t.append(c,n(p))});return}}i(u,c)}}),r.pop()}else t.append(a,n(o))}return i(e),t}AM.exports=qZ});var FM=y((fse,jM)=>{"use strict";var kw=Qa();jM.exports=function(t,r,n){var i=n.config.validateStatus;!n.status||!i||i(n.status)?t(n):r(new kw("Request failed with status code "+n.status,[kw.ERR_BAD_REQUEST,kw.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n))}});var qM=y((pse,MM)=>{"use strict";var qv=gt();MM.exports=qv.isStandardBrowserEnv()?function(){return{write:function(r,n,i,o,a,s){var u=[];u.push(r+"="+encodeURIComponent(n)),qv.isNumber(i)&&u.push("expires="+new Date(i).toGMTString()),qv.isString(o)&&u.push("path="+o),qv.isString(a)&&u.push("domain="+a),s===!0&&u.push("secure"),document.cookie=u.join("; ")},read:function(r){var n=document.cookie.match(new RegExp("(^|;\\s*)("+r+")=([^;]*)"));return n?decodeURIComponent(n[3]):null},remove:function(r){this.write(r,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}()});var VM=y((dse,UM)=>{"use strict";UM.exports=function(t){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)}});var $M=y((hse,GM)=>{"use strict";GM.exports=function(t,r){return r?t.replace(/\/+$/,"")+"/"+r.replace(/^\/+/,""):t}});var Dw=y((mse,QM)=>{"use strict";var UZ=VM(),VZ=$M();QM.exports=function(t,r){return t&&!UZ(r)?VZ(t,r):r}});var BM=y((vse,KM)=>{"use strict";var Aw=gt(),GZ=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];KM.exports=function(t){var r={},n,i,o;return t&&Aw.forEach(t.split(`
`),function(s){if(o=s.indexOf(":"),n=Aw.trim(s.substr(0,o)).toLowerCase(),i=Aw.trim(s.substr(o+1)),n){if(r[n]&&GZ.indexOf(n)>=0)return;n==="set-cookie"?r[n]=(r[n]?r[n]:[]).concat([i]):r[n]=r[n]?r[n]+", "+i:i}}),r}});var WM=y((yse,zM)=>{"use strict";var HM=gt();zM.exports=HM.isStandardBrowserEnv()?function(){var t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a"),n;function i(o){var a=o;return t&&(r.setAttribute("href",a),a=r.href),r.setAttribute("href",a),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:r.pathname.charAt(0)==="/"?r.pathname:"/"+r.pathname}}return n=i(window.location.href),function(a){var s=HM.isString(a)?i(a):a;return s.protocol===n.protocol&&s.host===n.host}}():function(){return function(){return!0}}()});var Rf=y((gse,XM)=>{"use strict";var jw=Qa(),$Z=gt();function YM(e){jw.call(this,e??"canceled",jw.ERR_CANCELED),this.name="CanceledError"}$Z.inherits(YM,jw,{__CANCEL__:!0});XM.exports=YM});var ZM=y((Ese,JM)=>{"use strict";JM.exports=function(t){var r=/^([-+\w]{1,25})(:?\/\/|:)/.exec(t);return r&&r[1]||""}});var Fw=y((Tse,e3)=>{"use strict";var Lf=gt(),QZ=FM(),KZ=qM(),BZ=Pw(),HZ=Dw(),zZ=BM(),WZ=WM(),YZ=xw(),Mi=Qa(),XZ=Rf(),JZ=ZM();e3.exports=function(t){return new Promise(function(n,i){var o=t.data,a=t.headers,s=t.responseType,u;function l(){t.cancelToken&&t.cancelToken.unsubscribe(u),t.signal&&t.signal.removeEventListener("abort",u)}Lf.isFormData(o)&&Lf.isStandardBrowserEnv()&&delete a["Content-Type"];var c=new XMLHttpRequest;if(t.auth){var f=t.auth.username||"",p=t.auth.password?unescape(encodeURIComponent(t.auth.password)):"";a.Authorization="Basic "+btoa(f+":"+p)}var d=HZ(t.baseURL,t.url);c.open(t.method.toUpperCase(),BZ(d,t.params,t.paramsSerializer),!0),c.timeout=t.timeout;function m(){if(!!c){var h="getAllResponseHeaders"in c?zZ(c.getAllResponseHeaders()):null,v=!s||s==="text"||s==="json"?c.responseText:c.response,g={data:v,status:c.status,statusText:c.statusText,headers:h,config:t,request:c};QZ(function(N){n(N),l()},function(N){i(N),l()},g),c=null}}if("onloadend"in c?c.onloadend=m:c.onreadystatechange=function(){!c||c.readyState!==4||c.status===0&&!(c.responseURL&&c.responseURL.indexOf("file:")===0)||setTimeout(m)},c.onabort=function(){!c||(i(new Mi("Request aborted",Mi.ECONNABORTED,t,c)),c=null)},c.onerror=function(){i(new Mi("Network Error",Mi.ERR_NETWORK,t,c,c)),c=null},c.ontimeout=function(){var v=t.timeout?"timeout of "+t.timeout+"ms exceeded":"timeout exceeded",g=t.transitional||YZ;t.timeoutErrorMessage&&(v=t.timeoutErrorMessage),i(new Mi(v,g.clarifyTimeoutError?Mi.ETIMEDOUT:Mi.ECONNABORTED,t,c)),c=null},Lf.isStandardBrowserEnv()){var E=(t.withCredentials||WZ(d))&&t.xsrfCookieName?KZ.read(t.xsrfCookieName):void 0;E&&(a[t.xsrfHeaderName]=E)}"setRequestHeader"in c&&Lf.forEach(a,function(v,g){typeof o>"u"&&g.toLowerCase()==="content-type"?delete a[g]:c.setRequestHeader(g,v)}),Lf.isUndefined(t.withCredentials)||(c.withCredentials=!!t.withCredentials),s&&s!=="json"&&(c.responseType=t.responseType),typeof t.onDownloadProgress=="function"&&c.addEventListener("progress",t.onDownloadProgress),typeof t.onUploadProgress=="function"&&c.upload&&c.upload.addEventListener("progress",t.onUploadProgress),(t.cancelToken||t.signal)&&(u=function(h){!c||(i(!h||h&&h.type?new XZ:h),c.abort(),c=null)},t.cancelToken&&t.cancelToken.subscribe(u),t.signal&&(t.signal.aborted?u():t.signal.addEventListener("abort",u))),o||(o=null);var b=JZ(d);if(b&&["http","https","file"].indexOf(b)===-1){i(new Mi("Unsupported protocol "+b+":",Mi.ERR_BAD_REQUEST,t));return}c.send(o)})}});var r3=y((_se,t3)=>{t3.exports=null});var Vv=y((bse,a3)=>{"use strict";var Et=gt(),n3=LM(),i3=Qa(),ZZ=xw(),eee=Cw(),tee={"Content-Type":"application/x-www-form-urlencoded"};function o3(e,t){!Et.isUndefined(e)&&Et.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}function ree(){var e;return typeof XMLHttpRequest<"u"?e=Fw():typeof process<"u"&&Object.prototype.toString.call(process)==="[object process]"&&(e=Fw()),e}function nee(e,t,r){if(Et.isString(e))try{return(t||JSON.parse)(e),Et.trim(e)}catch(n){if(n.name!=="SyntaxError")throw n}return(r||JSON.stringify)(e)}var Uv={transitional:ZZ,adapter:ree(),transformRequest:[function(t,r){if(n3(r,"Accept"),n3(r,"Content-Type"),Et.isFormData(t)||Et.isArrayBuffer(t)||Et.isBuffer(t)||Et.isStream(t)||Et.isFile(t)||Et.isBlob(t))return t;if(Et.isArrayBufferView(t))return t.buffer;if(Et.isURLSearchParams(t))return o3(r,"application/x-www-form-urlencoded;charset=utf-8"),t.toString();var n=Et.isObject(t),i=r&&r["Content-Type"],o;if((o=Et.isFileList(t))||n&&i==="multipart/form-data"){var a=this.env&&this.env.FormData;return eee(o?{"files[]":t}:t,a&&new a)}else if(n||i==="application/json")return o3(r,"application/json"),nee(t);return t}],transformResponse:[function(t){var r=this.transitional||Uv.transitional,n=r&&r.silentJSONParsing,i=r&&r.forcedJSONParsing,o=!n&&this.responseType==="json";if(o||i&&Et.isString(t)&&t.length)try{return JSON.parse(t)}catch(a){if(o)throw a.name==="SyntaxError"?i3.from(a,i3.ERR_BAD_RESPONSE,this,null,this.response):a}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:r3()},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};Et.forEach(["delete","get","head"],function(t){Uv.headers[t]={}});Et.forEach(["post","put","patch"],function(t){Uv.headers[t]=Et.merge(tee)});a3.exports=Uv});var u3=y((Sse,s3)=>{"use strict";var iee=gt(),oee=Vv();s3.exports=function(t,r,n){var i=this||oee;return iee.forEach(n,function(a){t=a.call(i,t,r)}),t}});var Mw=y((wse,l3)=>{"use strict";l3.exports=function(t){return!!(t&&t.__CANCEL__)}});var p3=y((Ose,f3)=>{"use strict";var c3=gt(),qw=u3(),aee=Mw(),see=Vv(),uee=Rf();function Uw(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new uee}f3.exports=function(t){Uw(t),t.headers=t.headers||{},t.data=qw.call(t,t.data,t.headers,t.transformRequest),t.headers=c3.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),c3.forEach(["delete","get","head","post","put","patch","common"],function(i){delete t.headers[i]});var r=t.adapter||see.adapter;return r(t).then(function(i){return Uw(t),i.data=qw.call(t,i.data,i.headers,t.transformResponse),i},function(i){return aee(i)||(Uw(t),i&&i.response&&(i.response.data=qw.call(t,i.response.data,i.response.headers,t.transformResponse))),Promise.reject(i)})}});var Vw=y((Nse,d3)=>{"use strict";var Ur=gt();d3.exports=function(t,r){r=r||{};var n={};function i(c,f){return Ur.isPlainObject(c)&&Ur.isPlainObject(f)?Ur.merge(c,f):Ur.isPlainObject(f)?Ur.merge({},f):Ur.isArray(f)?f.slice():f}function o(c){if(Ur.isUndefined(r[c])){if(!Ur.isUndefined(t[c]))return i(void 0,t[c])}else return i(t[c],r[c])}function a(c){if(!Ur.isUndefined(r[c]))return i(void 0,r[c])}function s(c){if(Ur.isUndefined(r[c])){if(!Ur.isUndefined(t[c]))return i(void 0,t[c])}else return i(void 0,r[c])}function u(c){if(c in r)return i(t[c],r[c]);if(c in t)return i(void 0,t[c])}var l={url:a,method:a,data:a,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,beforeRedirect:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:u};return Ur.forEach(Object.keys(t).concat(Object.keys(r)),function(f){var p=l[f]||o,d=p(f);Ur.isUndefined(d)&&p!==u||(n[f]=d)}),n}});var Gw=y((Ise,h3)=>{h3.exports={version:"0.27.2"}});var y3=y((Rse,v3)=>{"use strict";var lee=Gw().version,Go=Qa(),$w={};["object","boolean","number","function","string","symbol"].forEach(function(e,t){$w[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}});var m3={};$w.transitional=function(t,r,n){function i(o,a){return"[Axios v"+lee+"] Transitional option '"+o+"'"+a+(n?". "+n:"")}return function(o,a,s){if(t===!1)throw new Go(i(a," has been removed"+(r?" in "+r:"")),Go.ERR_DEPRECATED);return r&&!m3[a]&&(m3[a]=!0,console.warn(i(a," has been deprecated since v"+r+" and will be removed in the near future"))),t?t(o,a,s):!0}};function cee(e,t,r){if(typeof e!="object")throw new Go("options must be an object",Go.ERR_BAD_OPTION_VALUE);for(var n=Object.keys(e),i=n.length;i-- >0;){var o=n[i],a=t[o];if(a){var s=e[o],u=s===void 0||a(s,o,e);if(u!==!0)throw new Go("option "+o+" must be "+u,Go.ERR_BAD_OPTION_VALUE);continue}if(r!==!0)throw new Go("Unknown option "+o,Go.ERR_BAD_OPTION)}}v3.exports={assertOptions:cee,validators:$w}});var S3=y((Lse,b3)=>{"use strict";var T3=gt(),fee=Pw(),g3=IM(),E3=p3(),Gv=Vw(),pee=Dw(),_3=y3(),ju=_3.validators;function Fu(e){this.defaults=e,this.interceptors={request:new g3,response:new g3}}Fu.prototype.request=function(t,r){typeof t=="string"?(r=r||{},r.url=t):r=t||{},r=Gv(this.defaults,r),r.method?r.method=r.method.toLowerCase():this.defaults.method?r.method=this.defaults.method.toLowerCase():r.method="get";var n=r.transitional;n!==void 0&&_3.assertOptions(n,{silentJSONParsing:ju.transitional(ju.boolean),forcedJSONParsing:ju.transitional(ju.boolean),clarifyTimeoutError:ju.transitional(ju.boolean)},!1);var i=[],o=!0;this.interceptors.request.forEach(function(d){typeof d.runWhen=="function"&&d.runWhen(r)===!1||(o=o&&d.synchronous,i.unshift(d.fulfilled,d.rejected))});var a=[];this.interceptors.response.forEach(function(d){a.push(d.fulfilled,d.rejected)});var s;if(!o){var u=[E3,void 0];for(Array.prototype.unshift.apply(u,i),u=u.concat(a),s=Promise.resolve(r);u.length;)s=s.then(u.shift(),u.shift());return s}for(var l=r;i.length;){var c=i.shift(),f=i.shift();try{l=c(l)}catch(p){f(p);break}}try{s=E3(l)}catch(p){return Promise.reject(p)}for(;a.length;)s=s.then(a.shift(),a.shift());return s};Fu.prototype.getUri=function(t){t=Gv(this.defaults,t);var r=pee(t.baseURL,t.url);return fee(r,t.params,t.paramsSerializer)};T3.forEach(["delete","get","head","options"],function(t){Fu.prototype[t]=function(r,n){return this.request(Gv(n||{},{method:t,url:r,data:(n||{}).data}))}});T3.forEach(["post","put","patch"],function(t){function r(n){return function(o,a,s){return this.request(Gv(s||{},{method:t,headers:n?{"Content-Type":"multipart/form-data"}:{},url:o,data:a}))}}Fu.prototype[t]=r(),Fu.prototype[t+"Form"]=r(!0)});b3.exports=Fu});var O3=y((Pse,w3)=>{"use strict";var dee=Rf();function Mu(e){if(typeof e!="function")throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(i){t=i});var r=this;this.promise.then(function(n){if(!!r._listeners){var i,o=r._listeners.length;for(i=0;i<o;i++)r._listeners[i](n);r._listeners=null}}),this.promise.then=function(n){var i,o=new Promise(function(a){r.subscribe(a),i=a}).then(n);return o.cancel=function(){r.unsubscribe(i)},o},e(function(i){r.reason||(r.reason=new dee(i),t(r.reason))})}Mu.prototype.throwIfRequested=function(){if(this.reason)throw this.reason};Mu.prototype.subscribe=function(t){if(this.reason){t(this.reason);return}this._listeners?this._listeners.push(t):this._listeners=[t]};Mu.prototype.unsubscribe=function(t){if(!!this._listeners){var r=this._listeners.indexOf(t);r!==-1&&this._listeners.splice(r,1)}};Mu.source=function(){var t,r=new Mu(function(i){t=i});return{token:r,cancel:t}};w3.exports=Mu});var I3=y((xse,N3)=>{"use strict";N3.exports=function(t){return function(n){return t.apply(null,n)}}});var L3=y((Cse,R3)=>{"use strict";var hee=gt();R3.exports=function(t){return hee.isObject(t)&&t.isAxiosError===!0}});var C3=y((kse,Qw)=>{"use strict";var P3=gt(),mee=Sw(),$v=S3(),vee=Vw(),yee=Vv();function x3(e){var t=new $v(e),r=mee($v.prototype.request,t);return P3.extend(r,$v.prototype,t),P3.extend(r,t),r.create=function(i){return x3(vee(e,i))},r}var Er=x3(yee);Er.Axios=$v;Er.CanceledError=Rf();Er.CancelToken=O3();Er.isCancel=Mw();Er.VERSION=Gw().version;Er.toFormData=Cw();Er.AxiosError=Qa();Er.Cancel=Er.CanceledError;Er.all=function(t){return Promise.all(t)};Er.spread=I3();Er.isAxiosError=L3();Qw.exports=Er;Qw.exports.default=Er});var Qv=y((Dse,k3)=>{k3.exports=C3()});var Zi=z(ve());var Gi,qq=function(){function e(t){this.input=t,this.index=0,this.done=!1,this.value="",this.value=this.input.charAt(0)}return e.prototype.next=function(){return++this.index>=this.input.length&&(this.done=!0),this.value=this.input.charAt(this.index)},e.prototype.croak=function(){throw Error("[".concat(this.input,']. Unexpected character "').concat(this.value,'" on position ').concat(this.index,"."))},e}();(function(e){e[e.Plural=0]="Plural",e[e.Select=1]="Select",e[e.Text=2]="Text",e[e.Variable=3]="Variable"})(Gi||(Gi={}));var Uq=["{","}",","],Vq=function(){function e(t){this.input=new qq(t)}return e.prototype.next=function(){return this.input.value==="{"?this.readVariable():this.readText()},e.prototype.skip=function(t){t!==this.input.value&&this.input.croak(),this.input.next()},e.prototype.readWhile=function(t){for(var r="";!this.input.done&&t(this.input.value);)r+=this.input.value,this.input.next();return r},e.prototype.readVariable=function(){this.skip("{");var t=this.readWhile(function(n){return!function(i){return Uq.includes(i)}(n)}).trim();if(t.length===0&&this.input.croak(),this.input.value==="}")return this.skip("}"),{type:Gi.Variable,value:t};this.skip(",");var r=this.readVariableType();return{options:this.readVariableOptions(),type:r,value:t}},e.prototype.readText=function(){return{type:Gi.Text,value:this.readWhile(function(t){return t!=="{"&&t!=="}"})}},e.prototype.readVariableType=function(){var t=this.readWhile(function(r){return r!==","}).trim();return t==="plural"?Gi.Plural:t==="select"?Gi.Select:void this.input.croak()},e.prototype.readVariableOptions=function(){this.skip(",");for(var t={};this.input.value!=="}";)t[this.readText().value.trim()]=this.readExpression();return this.skip("}"),t},e.prototype.readExpression=function(){var t=[];for(this.skip("{");this.input.value!=="}";)t.push(this.next());return this.skip("}"),t},e}();function uy(e,t,r){for(var n=new Vq(t),i=[],o=function(a){var s=a.options,u=a.type,l=a.value;u!==Gi.Variable?s?i.concat(u!==Gi.Select?s[new Intl.PluralRules(e).select(r[l])].map(o):(s[r[l]]||s.other).map(o)):i.push(l):i.push(r[l])};!n.input.done;)o(n.next());return i}var Qf=function(e,t){e===void 0&&(e="en"),t===void 0&&(t=[]);var r=this;this.memo={},this.onError=console.error,this.formatDate=function(i,o){return new Intl.DateTimeFormat(r.language,o).format(i)},this.formatNumber=function(i,o){return new Intl.NumberFormat(r.language,o).format(i)},this.translate=function(i,o){o===void 0&&(o={});var a=r.getMessageById(i,o.defaultMessage);if(typeof a=="string")try{return uy(r.language,a,o).join("")}catch(s){r.onError(s)}return a+""},this.getMessageById=function(i,o){if(!r.memo[i]){var a=i.split(".").reduce(function(s,u){return s?s[u]:void 0},r.messages);typeof a!="string"&&(r.onError(Error('[eo-locale] id missing "'.concat(i,'"'))),a=o||i),r.memo[i]=a}return r.memo[i]};var n=t.find(function(i){return i.language===e});this.language=e,this.messages=n?n.messages:{}};var Wt=z(ve(),1),l1=z(u1(),1);function Y2(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(e!=null&&typeof Object.getOwnPropertySymbols=="function"){var i=0;for(n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(e,n[i])&&(r[n[i]]=e[n[i]])}return r}var c1=function(e){var t=e.children,r=e.language,n=e.locales,i=e.onError,o=Wt.default.useState(r);Wt.default.useEffect(function(){o[1](r)},[r]);var a=new Qf(o[0],n);return i&&(a.onError=i),Wt.default.createElement(f1.Provider,{value:{language:o[0],locales:n,setLanguage:o[1],translator:a}},t)};function cn(e){var t=Wt.default.useContext(f1);return e&&e!==t.language?new Qf(e):t.translator}var de=function(e){var t=e.defaultMessage,r=e.html,n=e.id,i=e.tagName,o=i===void 0?"span":i,a=Y2(e,["children","defaultMessage","html","id","tagName"]),s=cn(),u=s.getMessageById(n,t);if(typeof u=="string")try{var l=uy(s.language,u,a).map(function(c,f){return Wt.default.isValidElement(c)?r?(0,l1.renderToStaticMarkup)(c):Wt.default.cloneElement(c,{key:f}):r?c:Wt.default.createElement(Wt.default.Fragment,{key:f},c)});return r?Wt.default.createElement(o,{dangerouslySetInnerHTML:{__html:l.join("")}}):Wt.default.createElement(Wt.default.Fragment,null,l)}catch(c){s.onError(c)}return Wt.default.createElement(Wt.default.Fragment,null,u+"")},f1=Wt.default.createContext({language:"",locales:[],setLanguage:function(){},translator:new Qf});var p1=z(Za()),d1=z(ve());var il={button:"button_kkL3IW",ghostBtn:"ghostBtn_kkL3IW",primaryBtn:"primaryBtn_kkL3IW",secondaryBtn:"secondaryBtn_kkL3IW"};var Mn=i=>{var o=i,{children:e,className:t,variant:r="primary"}=o,n=za(o,["children","className","variant"]);return d1.default.createElement("button",Vi({className:(0,p1.default)(t,il.button,{[il.primaryBtn]:r==="primary",[il.secondaryBtn]:r==="secondary",[il.ghostBtn]:r==="ghost"})},n),e)};var bp="AUTH_STORAGE_KEY";var dl=z(al()),dI=(0,dl.Record)({email:dl.String,sessionId:dl.String});var Hp=(e,t)=>{let r={email:e,sessionId:t};localStorage.setItem(bp,JSON.stringify(r)),window.dispatchEvent(new Event("storage"))},cg=()=>{let e=localStorage.getItem(bp);if(!e)return null;try{let t=JSON.parse(e);return dI.guard(t)?t.email:null}catch(t){return null}},hI=()=>{localStorage.removeItem(bp),window.dispatchEvent(new Event("storage"))},fg=()=>cg()!==null;var zp={button:"button_WYz3fa",description:"description_WYz3fa",email:"email_WYz3fa",wrapper:"wrapper_WYz3fa"};var mI=()=>Zi.default.createElement("div",{className:zp.wrapper},Zi.default.createElement("h1",null,Zi.default.createElement(de,{id:"pages.content.email"}),": ",cg()),Zi.default.createElement("p",{className:zp.description},Zi.default.createElement(de,{id:"pages.content.description"})),Zi.default.createElement(Mn,{onClick:hI,className:zp.button},Zi.default.createElement(de,{id:"pages.content.logoutText"})));var Qn=z(ve());var or=z(ve());function B(){return B=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},B.apply(this,arguments)}var Gn;(function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"})(Gn||(Gn={}));var vI=function(e){return e};var yI="beforeunload";var bG="popstate";function TI(e){e===void 0&&(e={});var t=e,r=t.window,n=r===void 0?document.defaultView:r,i=n.history;function o(){var O=n.location,L=O.pathname,S=O.search,I=O.hash,$=i.state||{};return[$.idx,vI({pathname:L,search:S,hash:I,state:$.usr||null,key:$.key||"default"})]}var a=null;function s(){if(a)d.call(a),a=null;else{var O=Gn.Pop,L=o(),S=L[0],I=L[1];if(d.length){if(S!=null){var $=c-S;$&&(a={action:O,location:I,retry:function(){N($*-1)}},N($))}}else v(O)}}n.addEventListener(bG,s);var u=Gn.Pop,l=o(),c=l[0],f=l[1],p=EI(),d=EI();c==null&&(c=0,i.replaceState(B({},i.state,{idx:c}),""));function m(O){return typeof O=="string"?O:ss(O)}function E(O,L){return L===void 0&&(L=null),vI(B({pathname:f.pathname,hash:"",search:""},typeof O=="string"?$n(O):O,{state:L,key:SG()}))}function b(O,L){return[{usr:O.state,key:O.key,idx:L},m(O)]}function h(O,L,S){return!d.length||(d.call({action:O,location:L,retry:S}),!1)}function v(O){u=O;var L=o();c=L[0],f=L[1],p.call({action:u,location:f})}function g(O,L){var S=Gn.Push,I=E(O,L);function $(){g(O,L)}if(h(S,I,$)){var Ie=b(I,c+1),Se=Ie[0],Me=Ie[1];try{i.pushState(Se,"",Me)}catch{n.location.assign(Me)}v(S)}}function _(O,L){var S=Gn.Replace,I=E(O,L);function $(){_(O,L)}if(h(S,I,$)){var Ie=b(I,c),Se=Ie[0],Me=Ie[1];i.replaceState(Se,"",Me),v(S)}}function N(O){i.go(O)}var R={get action(){return u},get location(){return f},createHref:m,push:g,replace:_,go:N,back:function(){N(-1)},forward:function(){N(1)},listen:function(L){return p.push(L)},block:function(L){var S=d.push(L);return d.length===1&&n.addEventListener(yI,gI),function(){S(),d.length||n.removeEventListener(yI,gI)}}};return R}function gI(e){e.preventDefault(),e.returnValue=""}function EI(){var e=[];return{get length(){return e.length},push:function(r){return e.push(r),function(){e=e.filter(function(n){return n!==r})}},call:function(r){e.forEach(function(n){return n&&n(r)})}}}function SG(){return Math.random().toString(36).substr(2,8)}function ss(e){var t=e.pathname,r=t===void 0?"/":t,n=e.search,i=n===void 0?"":n,o=e.hash,a=o===void 0?"":o;return i&&i!=="?"&&(r+=i.charAt(0)==="?"?i:"?"+i),a&&a!=="#"&&(r+=a.charAt(0)==="#"?a:"#"+a),r}function $n(e){var t={};if(e){var r=e.indexOf("#");r>=0&&(t.hash=e.substr(r),e=e.substr(0,r));var n=e.indexOf("?");n>=0&&(t.search=e.substr(n),e=e.substr(0,n)),e&&(t.pathname=e)}return t}var oe=z(ve());var Yp=(0,oe.createContext)(null),Xp=(0,oe.createContext)(null),hl=(0,oe.createContext)({outlet:null,matches:[]});function fn(e,t){if(!e)throw new Error(t)}function bI(e,t,r){r===void 0&&(r="/");let n=typeof t=="string"?$n(t):t,i=II(n.pathname||"/",r);if(i==null)return null;let o=SI(e);wG(o);let a=null;for(let s=0;a==null&&s<o.length;++s)a=kG(o[s],i);return a}function SI(e,t,r,n){return t===void 0&&(t=[]),r===void 0&&(r=[]),n===void 0&&(n=""),e.forEach((i,o)=>{let a={relativePath:i.path||"",caseSensitive:i.caseSensitive===!0,childrenIndex:o,route:i};a.relativePath.startsWith("/")&&(a.relativePath.startsWith(n)||fn(!1),a.relativePath=a.relativePath.slice(n.length));let s=eo([n,a.relativePath]),u=r.concat(a);i.children&&i.children.length>0&&(i.index===!0&&fn(!1),SI(i.children,t,u,s)),!(i.path==null&&!i.index)&&t.push({path:s,score:xG(s,i.index),routesMeta:u})}),t}function wG(e){e.sort((t,r)=>t.score!==r.score?r.score-t.score:CG(t.routesMeta.map(n=>n.childrenIndex),r.routesMeta.map(n=>n.childrenIndex)))}var OG=/^:\w+$/,NG=3,IG=2,RG=1,LG=10,PG=-2,_I=e=>e==="*";function xG(e,t){let r=e.split("/"),n=r.length;return r.some(_I)&&(n+=PG),t&&(n+=IG),r.filter(i=>!_I(i)).reduce((i,o)=>i+(OG.test(o)?NG:o===""?RG:LG),n)}function CG(e,t){return e.length===t.length&&e.slice(0,-1).every((n,i)=>n===t[i])?e[e.length-1]-t[t.length-1]:0}function kG(e,t){let{routesMeta:r}=e,n={},i="/",o=[];for(let a=0;a<r.length;++a){let s=r[a],u=a===r.length-1,l=i==="/"?t:t.slice(i.length)||"/",c=wI({path:s.relativePath,caseSensitive:s.caseSensitive,end:u},l);if(!c)return null;Object.assign(n,c.params);let f=s.route;o.push({params:n,pathname:eo([i,c.pathname]),pathnameBase:RI(eo([i,c.pathnameBase])),route:f}),c.pathnameBase!=="/"&&(i=eo([i,c.pathnameBase]))}return o}function wI(e,t){typeof e=="string"&&(e={path:e,caseSensitive:!1,end:!0});let[r,n]=DG(e.path,e.caseSensitive,e.end),i=t.match(r);if(!i)return null;let o=i[0],a=o.replace(/(.)\/+$/,"$1"),s=i.slice(1);return{params:n.reduce((l,c,f)=>{if(c==="*"){let p=s[f]||"";a=o.slice(0,o.length-p.length).replace(/(.)\/+$/,"$1")}return l[c]=AG(s[f]||"",c),l},{}),pathname:o,pathnameBase:a,pattern:e}}function DG(e,t,r){t===void 0&&(t=!1),r===void 0&&(r=!0);let n=[],i="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,(a,s)=>(n.push(s),"([^\\/]+)"));return e.endsWith("*")?(n.push("*"),i+=e==="*"||e==="/*"?"(.*)$":"(?:\\/(.+)|\\/*)$"):i+=r?"\\/*$":"(?:(?=[.~-]|%[0-9A-F]{2})|\\b|\\/|$)",[new RegExp(i,t?void 0:"i"),n]}function AG(e,t){try{return decodeURIComponent(e)}catch{return e}}function OI(e,t){t===void 0&&(t="/");let{pathname:r,search:n="",hash:i=""}=typeof e=="string"?$n(e):e;return{pathname:r?r.startsWith("/")?r:jG(r,t):t,search:MG(n),hash:qG(i)}}function jG(e,t){let r=t.replace(/\/+$/,"").split("/");return e.split("/").forEach(i=>{i===".."?r.length>1&&r.pop():i!=="."&&r.push(i)}),r.length>1?r.join("/"):"/"}function NI(e,t,r){let n=typeof e=="string"?$n(e):e,i=e===""||n.pathname===""?"/":n.pathname,o;if(i==null)o=r;else{let s=t.length-1;if(i.startsWith("..")){let u=i.split("/");for(;u[0]==="..";)u.shift(),s-=1;n.pathname=u.join("/")}o=s>=0?t[s]:"/"}let a=OI(n,o);return i&&i!=="/"&&i.endsWith("/")&&!a.pathname.endsWith("/")&&(a.pathname+="/"),a}function FG(e){return e===""||e.pathname===""?"/":typeof e=="string"?$n(e).pathname:e.pathname}function II(e,t){if(t==="/")return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let r=e.charAt(t.length);return r&&r!=="/"?null:e.slice(t.length)||"/"}var eo=e=>e.join("/").replace(/\/\/+/g,"/"),RI=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),MG=e=>!e||e==="?"?"":e.startsWith("?")?e:"?"+e,qG=e=>!e||e==="#"?"":e.startsWith("#")?e:"#"+e;function pg(e){ta()||fn(!1);let{basename:t,navigator:r}=(0,oe.useContext)(Yp),{hash:n,pathname:i,search:o}=Zp(e),a=i;if(t!=="/"){let s=FG(e),u=s!=null&&s.endsWith("/");a=i==="/"?t+(u?"/":""):eo([t,i])}return r.createHref({pathname:a,search:o,hash:n})}function ta(){return(0,oe.useContext)(Xp)!=null}function us(){return ta()||fn(!1),(0,oe.useContext)(Xp).location}function Jp(){ta()||fn(!1);let{basename:e,navigator:t}=(0,oe.useContext)(Yp),{matches:r}=(0,oe.useContext)(hl),{pathname:n}=us(),i=JSON.stringify(r.map(s=>s.pathnameBase)),o=(0,oe.useRef)(!1);return(0,oe.useEffect)(()=>{o.current=!0}),(0,oe.useCallback)(function(s,u){if(u===void 0&&(u={}),!o.current)return;if(typeof s=="number"){t.go(s);return}let l=NI(s,JSON.parse(i),n);e!=="/"&&(l.pathname=eo([e,l.pathname])),(u.replace?t.replace:t.push)(l,u.state)},[e,t,i,n])}function Zp(e){let{matches:t}=(0,oe.useContext)(hl),{pathname:r}=us(),n=JSON.stringify(t.map(i=>i.pathnameBase));return(0,oe.useMemo)(()=>NI(e,JSON.parse(n),r),[e,n,r])}function LI(e,t){ta()||fn(!1);let{matches:r}=(0,oe.useContext)(hl),n=r[r.length-1],i=n?n.params:{},o=n?n.pathname:"/",a=n?n.pathnameBase:"/",s=n&&n.route,u=us(),l;if(t){var c;let m=typeof t=="string"?$n(t):t;a==="/"||((c=m.pathname)==null?void 0:c.startsWith(a))||fn(!1),l=m}else l=u;let f=l.pathname||"/",p=a==="/"?f:f.slice(a.length)||"/",d=bI(e,{pathname:p});return UG(d&&d.map(m=>Object.assign({},m,{params:Object.assign({},i,m.params),pathname:eo([a,m.pathname]),pathnameBase:m.pathnameBase==="/"?a:eo([a,m.pathnameBase])})),r)}function UG(e,t){return t===void 0&&(t=[]),e==null?null:e.reduceRight((r,n,i)=>(0,oe.createElement)(hl.Provider,{children:n.route.element!==void 0?n.route.element:r,value:{outlet:r,matches:t.concat(e.slice(0,i+1))}}),null)}function dg(e){let{to:t,replace:r,state:n}=e;ta()||fn(!1);let i=Jp();return(0,oe.useEffect)(()=>{i(t,{replace:r,state:n})}),null}function ls(e){fn(!1)}function hg(e){let{basename:t="/",children:r=null,location:n,navigationType:i=Gn.Pop,navigator:o,static:a=!1}=e;ta()&&fn(!1);let s=RI(t),u=(0,oe.useMemo)(()=>({basename:s,navigator:o,static:a}),[s,o,a]);typeof n=="string"&&(n=$n(n));let{pathname:l="/",search:c="",hash:f="",state:p=null,key:d="default"}=n,m=(0,oe.useMemo)(()=>{let E=II(l,s);return E==null?null:{pathname:E,search:c,hash:f,state:p,key:d}},[s,l,c,f,p,d]);return m==null?null:(0,oe.createElement)(Yp.Provider,{value:u},(0,oe.createElement)(Xp.Provider,{children:r,value:{location:m,navigationType:i}}))}function mg(e){let{children:t,location:r}=e;return LI(Wp(t),r)}function Wp(e){let t=[];return oe.Children.forEach(e,r=>{if(!(0,oe.isValidElement)(r))return;if(r.type===oe.Fragment){t.push.apply(t,Wp(r.props.children));return}r.type!==ls&&fn(!1);let n={caseSensitive:r.props.caseSensitive,element:r.props.element,index:r.props.index,path:r.props.path};r.props.children&&(n.children=Wp(r.props.children)),t.push(n)}),t}function vg(){return vg=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},vg.apply(this,arguments)}function VG(e,t){if(e==null)return{};var r={},n=Object.keys(e),i,o;for(o=0;o<n.length;o++)i=n[o],!(t.indexOf(i)>=0)&&(r[i]=e[i]);return r}var GG=["onClick","reloadDocument","replace","state","target","to"];function PI(e){let{basename:t,children:r,window:n}=e,i=(0,or.useRef)();i.current==null&&(i.current=TI({window:n}));let o=i.current,[a,s]=(0,or.useState)({action:o.action,location:o.location});return(0,or.useLayoutEffect)(()=>o.listen(s),[o]),(0,or.createElement)(hg,{basename:t,children:r,location:a.location,navigationType:a.action,navigator:o})}function $G(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}var cs=(0,or.forwardRef)(function(t,r){let{onClick:n,reloadDocument:i,replace:o=!1,state:a,target:s,to:u}=t,l=VG(t,GG),c=pg(u),f=QG(u,{replace:o,state:a,target:s});function p(d){n&&n(d),!d.defaultPrevented&&!i&&f(d)}return(0,or.createElement)("a",vg({},l,{href:c,onClick:p,ref:r,target:s}))});function QG(e,t){let{target:r,replace:n,state:i}=t===void 0?{}:t,o=Jp(),a=us(),s=Zp(e);return(0,or.useCallback)(u=>{if(u.button===0&&(!r||r==="_self")&&!$G(u)){u.preventDefault();let l=!!n||ss(a)===ss(s);o(e,{replace:l,state:i})}},[a,o,s,n,i,r,e])}var ml={description:"description_drRb9a",link:"link_drRb9a",wrapper:"wrapper_drRb9a"};var xI=()=>Qn.default.createElement("div",{className:ml.wrapper},Qn.default.createElement("h1",null,Qn.default.createElement(de,{id:"pages.notFound.title"})),Qn.default.createElement("p",{className:ml.description},Qn.default.createElement(de,{id:"pages.notFound.description1"})),Qn.default.createElement("p",{className:ml.description},Qn.default.createElement(de,{id:"pages.notFound.description2"})),Qn.default.createElement(cs,{className:ml.link,to:"/"},"\u2190 ",Qn.default.createElement(de,{id:"forms.recoverPassword.returnToMainPage"})));var Qt=z(ve()),vq=z(PE());var Us=z(ve());var JP="en",xE="LANGUAGE_STORAGE_KEY";var sc=z(al()),Eh=(0,sc.Union)((0,sc.Literal)("en"),(0,sc.Literal)("ru"));var ZP=e=>{localStorage.setItem(xE,e)},ex=()=>{let e=localStorage.getItem(xE);return Eh.guard(e)?e:JP};var tx={language:{legendText:"Language",ru:"Russian",en:"English"},pages:{auth:{title:"Hello, we've been waiting for you!"},content:{description:"This page can only be seen by authenticated users. But there isn't much here. Except for this logout button.",logoutText:"Log out",email:"Your email"},recoverPassword:{title:"Forgot password? No problem!"},notFound:{title:"How did you get here?",description1:"You totally should not be here. Did you do something wrong? Or is it our fault? Can't tell right away...",description2:"Okay, let's focus on what we can do right now. See that link down below? Come on, give it a nice solid click. It will take you straight back to the main page.",returnToMainPage:"Return to main page"}},forms:{signin:{tabHeader:"Sign in",emailLabel:"Email",emailHint:"Enter email in standard format",passwordLabel:"Password",passwordHint:"From 3 to 20 symbols. Allowed symbols: lowercase and uppercase letters, numbers",submitText:"Sign in",forgotPasswordText:"Help! I forgot my password"},signup:{tabHeader:"Sign up",emailLabel:"Email",emailHint:"Enter email in standard format",passwordLabel:"Password",passwordHint:"From 3 to 20 symbols. Allowed symbols: lowercase and uppercase letters, numbers",repeatPasswordLabel:"Repeat password",repeatPasswordHint:"Passwords should be equal",submitText:"Sign up"},recoverPassword:{returnToMainPage:"Return to main page",header:"We'll send recovery link to your email",emailLabel:"Email",emailHint:"Enter email in standard format",submitText:"Get link",successMessage:"Great success! Check your latest inbox email and click on received link"}},errors:{unknownError:"Unknown error",unexpectedError:"Unexpected server error",invalidCredentials:"Invalid credentials",userAlreadyExists:"User with this email already exists"},password:{eyeIconLabel:"Switch password visibility"}};var rx={language:{legendText:"\u042F\u0437\u044B\u043A",ru:"\u0420\u0443\u0441\u0441\u043A\u0438\u0439",en:"\u0410\u043D\u0433\u043B\u0438\u0439\u0441\u043A\u0438\u0439"},pages:{auth:{title:"\u041F\u0440\u0438\u0432\u0435\u0442, \u043C\u044B \u0442\u0435\u0431\u044F \u0436\u0434\u0430\u043B\u0438!"},content:{description:"\u042D\u0442\u0430 \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0430 \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u0430 \u0442\u043E\u043B\u044C\u043A\u043E \u0432\u043E\u0448\u0435\u0434\u0448\u0438\u043C \u0432 \u0441\u0438\u0441\u0442\u0435\u043C\u0443 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F\u043C. \u0412\u043F\u0440\u043E\u0447\u0435\u043C, \u0442\u0443\u0442 \u043E\u0441\u043E\u0431\u043E \u043D\u0438\u0447\u0435\u0433\u043E \u0438 \u043D\u0435\u0442. \u041F\u043E\u043C\u0438\u043C\u043E \u044D\u0442\u043E\u0439 \u043A\u043D\u043E\u043F\u043A\u0438 \u0432\u044B\u0445\u043E\u0434\u0430.",logoutText:"\u0412\u044B\u0439\u0442\u0438",email:"\u0412\u0430\u0448\u0430 \u043F\u043E\u0447\u0442\u0430"},recoverPassword:{title:"\u0417\u0430\u0431\u044B\u043B\u0438 \u043F\u0430\u0440\u043E\u043B\u044C? \u041D\u0438\u0447\u0435\u0433\u043E \u0441\u0442\u0440\u0430\u0448\u043D\u043E\u0433\u043E!"},notFound:{title:"\u041A\u0430\u043A \u0442\u044B \u0441\u044E\u0434\u0430 \u043F\u043E\u043F\u0430\u043B?",description1:"\u0422\u044B \u043D\u0435 \u0434\u043E\u043B\u0436\u0435\u043D \u0431\u044B\u043B \u0442\u0443\u0442 \u043E\u043A\u0430\u0437\u0430\u0442\u044C\u0441\u044F. \u0422\u044B \u0447\u0442\u043E-\u0442\u043E \u0441\u0434\u0435\u043B\u0430\u043B \u043D\u0435 \u0442\u0430\u043A? \u0418\u043B\u0438 \u044D\u0442\u043E \u043D\u0430\u0448\u0430 \u0432\u0438\u043D\u0430? \u041D\u0435 \u043C\u043E\u0433\u0443 \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0438\u0442\u044C...",description2:"\u0425\u043E\u0440\u043E\u0448\u043E, \u0434\u0430\u0432\u0430\u0439 \u0441\u043A\u043E\u043D\u0446\u0435\u043D\u0442\u0440\u0438\u0440\u0443\u0435\u043C\u0441\u044F \u043D\u0430 \u0442\u043E\u043C, \u0447\u0442\u043E \u043C\u044B \u043C\u043E\u0436\u0435\u043C \u0441\u0434\u0435\u043B\u0430\u0442\u044C. \u0412\u0438\u0434\u0438\u0448\u044C \u0441\u0441\u044B\u043B\u043A\u0443 \u0432\u043D\u0438\u0437\u0443? \u041E\u043D\u0430 \u0432\u0435\u0440\u043D\u0451\u0442 \u0442\u0435\u0431\u044F \u043D\u0430 \u0433\u043B\u0430\u0432\u043D\u0443\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443. \u0414\u0430\u0432\u0430\u0439, \u0445\u043E\u0440\u043E\u0448\u0435\u043D\u044C\u043A\u043E \u0435\u0451 \u043D\u0430\u0436\u043C\u0438",returnToMainPage:"Return to main page"}},forms:{signin:{tabHeader:"\u0412\u043E\u0439\u0442\u0438",emailLabel:"\u041F\u043E\u0447\u0442\u0430",emailHint:"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u043C\u0435\u0439\u043B \u0432 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u043C \u0444\u043E\u0440\u043C\u0430\u0442\u0435",passwordLabel:"\u041F\u0430\u0440\u043E\u043B\u044C",passwordHint:"\u041E\u0442 3 \u0434\u043E 20 \u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432. \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043D\u044B \u043B\u0430\u0442\u0438\u043D\u0441\u043A\u0438\u0435 \u0431\u0443\u043A\u0432\u044B \u0432 \u0432\u0435\u0440\u0445\u043D\u0435\u043C \u0438 \u043D\u0438\u0436\u043D\u0435\u043C \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435, \u0446\u0438\u0444\u0440\u044B",submitText:"\u0412\u043E\u0439\u0442\u0438",forgotPasswordText:"\u041F\u043E\u043C\u043E\u0433\u0438\u0442\u0435! \u042F \u0437\u0430\u0431\u044B\u043B \u0441\u0432\u043E\u0439 \u043F\u0430\u0440\u043E\u043B\u044C"},signup:{tabHeader:"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044F",emailLabel:"\u041F\u043E\u0447\u0442\u0430",emailHint:"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u043C\u0435\u0439\u043B \u0432 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u043C \u0444\u043E\u0440\u043C\u0430\u0442\u0435",passwordLabel:"\u041F\u0430\u0440\u043E\u043B\u044C",passwordHint:"\u041E\u0442 3 \u0434\u043E 20 \u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432. \u0420\u0430\u0437\u0440\u0435\u0448\u0435\u043D\u044B \u043B\u0430\u0442\u0438\u043D\u0441\u043A\u0438\u0435 \u0431\u0443\u043A\u0432\u044B \u0432 \u0432\u0435\u0440\u0445\u043D\u0435\u043C \u0438 \u043D\u0438\u0436\u043D\u0435\u043C \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0435, \u0446\u0438\u0444\u0440\u044B",repeatPasswordLabel:"\u041F\u043E\u0432\u0442\u043E\u0440\u0438\u0442\u0435 \u043F\u0430\u0440\u043E\u043B\u044C",repeatPasswordHint:"\u041F\u0430\u0440\u043E\u043B\u0438 \u0434\u043E\u043B\u0436\u043D\u044B \u0441\u043E\u0432\u043F\u0430\u0434\u0430\u0442\u044C",submitText:"\u0417\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0441\u044F"},recoverPassword:{returnToMainPage:"\u0412\u0435\u0440\u043D\u0443\u0442\u044C\u0441\u044F \u043D\u0430 \u0433\u043B\u0430\u0432\u043D\u0443\u044E \u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0443",header:"\u041C\u044B \u043E\u0442\u043F\u0440\u0430\u0432\u0438\u043C \u0432\u0430\u043C \u043D\u0430 \u043F\u043E\u0447\u0442\u0443 \u0441\u0441\u044B\u043B\u043A\u0443 \u0434\u043B\u044F \u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F \u043F\u0430\u0440\u043E\u043B\u044F",emailLabel:"\u041F\u043E\u0447\u0442\u0430",emailHint:"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0435\u043C\u0435\u0439\u043B \u0432 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u043C \u0444\u043E\u0440\u043C\u0430\u0442\u0435",submitText:"\u041F\u043E\u043B\u0443\u0447\u0438\u0442\u044C \u0441\u0441\u044B\u043B\u043A\u0443",successMessage:"\u0412\u0441\u0451 \u0441\u0443\u043F\u0435\u0440! \u041E\u0442\u043A\u0440\u043E\u0439 \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u0435\u0435 \u0432\u0445\u043E\u0434\u044F\u0449\u0435\u0435 \u043F\u0438\u0441\u044C\u043C\u043E \u0438 \u043D\u0430\u0436\u043C\u0438 \u043D\u0430 \u043F\u043E\u043B\u0443\u0447\u0435\u043D\u043D\u0443\u044E \u0441\u0441\u044B\u043B\u043A\u0443"}},errors:{unknownError:"\u041D\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u0430\u043D\u044F \u043E\u0448\u0438\u0431\u043A\u0430",unexpectedError:"\u041D\u0435\u043E\u0436\u0438\u0434\u0430\u043D\u043D\u0430\u044F \u043E\u0448\u0438\u0431\u043A\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430",invalidCredentials:"\u041D\u0435\u0432\u0435\u0440\u043D\u0430\u044F \u043F\u043E\u0447\u0442\u0430 \u0438\u043B\u0438 \u043F\u0430\u0440\u043E\u043B\u044C",userAlreadyExists:"\u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C \u0441 \u0442\u0430\u043A\u043E\u0439 \u043F\u043E\u0447\u0442\u043E\u0439 \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043E\u0432\u0430\u043D"},password:{eyeIconLabel:"\u041F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u0432\u0438\u0434\u0438\u043C\u043E\u0441\u0442\u044C \u043F\u0430\u0440\u043E\u043B\u044F"}};var B$="en",H$=[{language:"en",messages:tx},{language:"ru",messages:rx}],CE={language:B$},z$=(e,t)=>{switch(t.type){case"SET_LANGUAGE":return Uf(Vi({},e),{language:t.payload});default:return CE}},kE=Us.default.createContext({language:CE.language,setLanguage:e=>{}}),nx=({children:e})=>{let[t,r]=Us.default.useReducer(z$,CE),n=Us.default.useMemo(()=>({language:t.language,setLanguage:i=>{r({type:"SET_LANGUAGE",payload:i}),ZP(i)}}),[t]);return Us.default.createElement(kE.Provider,{value:n},Us.default.createElement(c1,{language:t.language,locales:H$},e))};var pM=z(If());var aM=z(If()),sM=aM.rest.post("/signin",(e,t,r)=>{let n=Math.random();return n<.25?t(r.status(500,"Unexpected error"),r.json({errorCode:"E005"})):n<.5?t(r.status(400,"Error: invalid credentials"),r.json({errorCode:"E078"})):t(r.status(200))});var uM=z(If()),lM=uM.rest.put("/password/recover",(e,t,r)=>Math.random()<.5?t(r.status(500,"Unexpected error"),r.json({errorCode:"E005"})):t(r.status(200)));var cM=z(If()),fM=cM.rest.post("/signup",(e,t,r)=>{let n=Math.random();return n<.25?t(r.status(500,"Unexpected error"),r.json({errorCode:"E005"})):n<.5?t(r.status(400,"Error: user with this email already exists"),r.json({errorCode:"E234"})):t(r.status(200))});var mZ=(0,pM.setupWorker)(fM,sM,lM);mZ.start();var Dv=z(ve());var _w=z(Za()),Lt=z(ve());var Vo=z(ve()),dM=({width:e=40,height:t=30})=>Vo.default.createElement("svg",{width:e,height:t,viewBox:"0 0 640 480",fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},Vo.default.createElement("g",{fillRule:"evenodd"},Vo.default.createElement("g",{strokeWidth:"1pt"},Vo.default.createElement("path",{fill:"#bd3d44",d:"M0 0h912v37H0zm0 73.9h912v37H0zm0 73.8h912v37H0zm0 73.8h912v37H0zm0 74h912v36.8H0zm0 73.7h912v37H0zM0 443h912V480H0z"}),Vo.default.createElement("path",{fill:"#fff",d:"M0 37h912v36.9H0zm0 73.8h912v36.9H0zm0 73.8h912v37H0zm0 73.9h912v37H0zm0 73.8h912v37H0zm0 73.8h912v37H0z"})),Vo.default.createElement("path",{fill:"#192f5d",d:"M0 0h364.8v258.5H0z"}),Vo.default.createElement("path",{fill:"#fff",d:"m30.4 11 3.4 10.3h10.6l-8.6 6.3 3.3 10.3-8.7-6.4-8.6 6.3L25 27.6l-8.7-6.3h10.9zm60.8 0 3.3 10.3h10.8l-8.7 6.3 3.2 10.3-8.6-6.4-8.7 6.3 3.3-10.2-8.6-6.3h10.6zm60.8 0 3.3 10.3H166l-8.6 6.3 3.3 10.3-8.7-6.4-8.7 6.3 3.3-10.2-8.7-6.3h10.8zm60.8 0 3.3 10.3h10.8l-8.7 6.3 3.3 10.3-8.7-6.4-8.7 6.3 3.4-10.2-8.8-6.3h10.7zm60.8 0 3.3 10.3h10.7l-8.6 6.3 3.3 10.3-8.7-6.4-8.7 6.3 3.3-10.2-8.6-6.3h10.7zm60.8 0 3.3 10.3h10.8l-8.8 6.3 3.4 10.3-8.7-6.4-8.7 6.3 3.4-10.2-8.8-6.3h10.8zM60.8 37l3.3 10.2H75l-8.7 6.2 3.2 10.3-8.5-6.3-8.7 6.3 3.1-10.3-8.4-6.2h10.7zm60.8 0 3.4 10.2h10.7l-8.8 6.2 3.4 10.3-8.7-6.3-8.7 6.3 3.3-10.3-8.7-6.2h10.8zm60.8 0 3.3 10.2h10.8l-8.7 6.2 3.3 10.3-8.7-6.3-8.7 6.3 3.3-10.3-8.6-6.2H179zm60.8 0 3.4 10.2h10.7l-8.8 6.2 3.4 10.3-8.7-6.3-8.6 6.3 3.2-10.3-8.7-6.2H240zm60.8 0 3.3 10.2h10.8l-8.7 6.2 3.3 10.3-8.7-6.3-8.7 6.3 3.3-10.3-8.6-6.2h10.7zM30.4 62.6l3.4 10.4h10.6l-8.6 6.3 3.3 10.2-8.7-6.3-8.6 6.3L25 79.3 16.3 73h10.9zm60.8 0L94.5 73h10.8l-8.7 6.3 3.2 10.2-8.6-6.3-8.7 6.3 3.3-10.3-8.6-6.3h10.6zm60.8 0 3.3 10.3H166l-8.6 6.3 3.3 10.2-8.7-6.3-8.7 6.3 3.3-10.3-8.7-6.3h10.8zm60.8 0 3.3 10.3h10.8l-8.7 6.3 3.3 10.2-8.7-6.3-8.7 6.3 3.4-10.3-8.8-6.3h10.7zm60.8 0 3.3 10.3h10.7l-8.6 6.3 3.3 10.2-8.7-6.3-8.7 6.3 3.3-10.3-8.6-6.3h10.7zm60.8 0 3.3 10.3h10.8l-8.8 6.3 3.4 10.2-8.7-6.3-8.7 6.3 3.4-10.3-8.8-6.3h10.8zM60.8 88.6l3.3 10.2H75l-8.7 6.3 3.3 10.3-8.7-6.4-8.7 6.3 3.3-10.2-8.6-6.3h10.7zm60.8 0 3.4 10.2h10.7l-8.8 6.3 3.4 10.3-8.7-6.4-8.7 6.3 3.3-10.2-8.7-6.3h10.8zm60.8 0 3.3 10.2h10.8l-8.7 6.3 3.3 10.3-8.7-6.4-8.7 6.3 3.3-10.2-8.6-6.3H179zm60.8 0 3.4 10.2h10.7l-8.7 6.3 3.3 10.3-8.7-6.4-8.6 6.3 3.2-10.2-8.7-6.3H240zm60.8 0 3.3 10.2h10.8l-8.7 6.3 3.3 10.3-8.7-6.4-8.7 6.3 3.3-10.2-8.6-6.3h10.7zM30.4 114.5l3.4 10.2h10.6l-8.6 6.3 3.3 10.3-8.7-6.4-8.6 6.3L25 131l-8.7-6.3h10.9zm60.8 0 3.3 10.2h10.8l-8.7 6.3 3.2 10.2-8.6-6.3-8.7 6.3 3.3-10.2-8.6-6.3h10.6zm60.8 0 3.3 10.2H166l-8.6 6.3 3.3 10.3-8.7-6.4-8.7 6.3 3.3-10.2-8.7-6.3h10.8zm60.8 0 3.3 10.2h10.8l-8.7 6.3 3.3 10.3-8.7-6.4-8.7 6.3 3.4-10.2-8.8-6.3h10.7zm60.8 0 3.3 10.2h10.7L279 131l3.3 10.3-8.7-6.4-8.7 6.3 3.3-10.2-8.6-6.3h10.7zm60.8 0 3.3 10.2h10.8l-8.8 6.3 3.4 10.3-8.7-6.4-8.7 6.3L329 131l-8.8-6.3h10.8zM60.8 140.3l3.3 10.3H75l-8.7 6.2 3.3 10.3-8.7-6.4-8.7 6.4 3.3-10.3-8.6-6.3h10.7zm60.8 0 3.4 10.3h10.7l-8.8 6.2 3.4 10.3-8.7-6.4-8.7 6.4 3.3-10.3-8.7-6.3h10.8zm60.8 0 3.3 10.3h10.8l-8.7 6.2 3.3 10.3-8.7-6.4-8.7 6.4 3.3-10.3-8.6-6.3H179zm60.8 0 3.4 10.3h10.7l-8.7 6.2 3.3 10.3-8.7-6.4-8.6 6.4 3.2-10.3-8.7-6.3H240zm60.8 0 3.3 10.3h10.8l-8.7 6.2 3.3 10.3-8.7-6.4-8.7 6.4 3.3-10.3-8.6-6.3h10.7zM30.4 166.1l3.4 10.3h10.6l-8.6 6.3 3.3 10.1-8.7-6.2-8.6 6.2 3.2-10.2-8.7-6.3h10.9zm60.8 0 3.3 10.3h10.8l-8.7 6.3 3.3 10.1-8.7-6.2-8.7 6.2 3.4-10.2-8.7-6.3h10.6zm60.8 0 3.3 10.3H166l-8.6 6.3 3.3 10.1-8.7-6.2-8.7 6.2 3.3-10.2-8.7-6.3h10.8zm60.8 0 3.3 10.3h10.8l-8.7 6.3 3.3 10.1-8.7-6.2-8.7 6.2 3.4-10.2-8.8-6.3h10.7zm60.8 0 3.3 10.3h10.7l-8.6 6.3 3.3 10.1-8.7-6.2-8.7 6.2 3.3-10.2-8.6-6.3h10.7zm60.8 0 3.3 10.3h10.8l-8.8 6.3 3.4 10.1-8.7-6.2-8.7 6.2 3.4-10.2-8.8-6.3h10.8zM60.8 192l3.3 10.2H75l-8.7 6.3 3.3 10.3-8.7-6.4-8.7 6.3 3.3-10.2-8.6-6.3h10.7zm60.8 0 3.4 10.2h10.7l-8.8 6.3 3.4 10.3-8.7-6.4-8.7 6.3 3.3-10.2-8.7-6.3h10.8zm60.8 0 3.3 10.2h10.8l-8.7 6.3 3.3 10.3-8.7-6.4-8.7 6.3 3.3-10.2-8.6-6.3H179zm60.8 0 3.4 10.2h10.7l-8.7 6.3 3.3 10.3-8.7-6.4-8.6 6.3 3.2-10.2-8.7-6.3H240zm60.8 0 3.3 10.2h10.8l-8.7 6.3 3.3 10.3-8.7-6.4-8.7 6.3 3.3-10.2-8.6-6.3h10.7zM30.4 217.9l3.4 10.2h10.6l-8.6 6.3 3.3 10.2-8.7-6.3-8.6 6.3 3.2-10.3-8.7-6.3h10.9zm60.8 0 3.3 10.2h10.8l-8.7 6.3 3.3 10.2-8.7-6.3-8.7 6.3 3.4-10.3-8.7-6.3h10.6zm60.8 0 3.3 10.2H166l-8.4 6.3 3.3 10.2-8.7-6.3-8.7 6.3 3.3-10.3-8.7-6.3h10.8zm60.8 0 3.3 10.2h10.8l-8.7 6.3 3.3 10.2-8.7-6.3-8.7 6.3 3.4-10.3-8.8-6.3h10.7zm60.8 0 3.3 10.2h10.7l-8.6 6.3 3.3 10.2-8.7-6.3-8.7 6.3 3.3-10.3-8.6-6.3h10.7zm60.8 0 3.3 10.2h10.8l-8.8 6.3 3.4 10.2-8.7-6.3-8.7 6.3 3.4-10.3-8.8-6.3h10.8z"})));var ku=z(ve()),hM=({width:e=40,height:t=30})=>ku.default.createElement("svg",{width:e,height:t,viewBox:"0 0 640 480",fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},ku.default.createElement("g",{fillRule:"evenodd",strokeWidth:"1pt"},ku.default.createElement("path",{fill:"#fff",d:"M0 0h640v480H0z"}),ku.default.createElement("path",{fill:"#0039a6",d:"M0 160h640v320H0z"}),ku.default.createElement("path",{fill:"#d52b1e",d:"M0 320h640v160H0z"})));var Cn={activeLabel:"activeLabel_EtlUYG",label:"label_EtlUYG",languageName:"languageName_EtlUYG",legend:"legend_EtlUYG",radio:"radio_EtlUYG",wrapper:"wrapper_EtlUYG"};var mM=()=>{let{language:e,setLanguage:t}=Lt.default.useContext(kE);Lt.default.useEffect(()=>{let n=ex();n!==e&&t(n)},[]);let r=Lt.default.useCallback(n=>{let i=n.target.value;Eh.guard(i)&&t(i)},[]);return Lt.default.createElement("fieldset",{className:Cn.wrapper},Lt.default.createElement("legend",{className:Cn.legend},Lt.default.createElement(de,{id:"language.legendText"})),Lt.default.createElement("label",{htmlFor:"ru",className:(0,_w.default)(Cn.label,e==="ru"&&Cn.activeLabel)},Lt.default.createElement("span",{className:Cn.languageName},Lt.default.createElement(de,{id:"language.ru"})),Lt.default.createElement(hM,null),Lt.default.createElement("input",{className:Cn.radio,type:"radio",name:"language",id:"ru",value:"ru",onChange:r})),Lt.default.createElement("label",{htmlFor:"en",className:(0,_w.default)(Cn.label,e==="en"&&Cn.activeLabel)},Lt.default.createElement("span",{className:Cn.languageName},Lt.default.createElement(de,{id:"language.en"})),Lt.default.createElement(dM,null),Lt.default.createElement("input",{className:Cn.radio,type:"radio",name:"language",id:"en",value:"en",onChange:r})))};var bw={switcherWrapper:"switcherWrapper_rJXW0G",wrapper:"wrapper_rJXW0G"};var vM=({children:e})=>Dv.default.createElement("div",{className:bw.wrapper},Dv.default.createElement("div",{className:bw.switcherWrapper},Dv.default.createElement(mM,null)),e);var Ui=z(ve());var yM=z(Za()),Ga=z(ve());var Av={activeTab:"activeTab_T2_VOG",tab:"tab_T2_VOG",tabsWrapper:"tabsWrapper_T2_VOG"};var gM=({activeTab:e,onChangeTab:t,tabs:r})=>Ga.default.createElement(Ga.default.Fragment,null,Ga.default.createElement("div",{className:Av.tabsWrapper},r.map(n=>Ga.default.createElement(Mn,{key:n.value,className:(0,yM.default)(Av.tab,e===n.value&&Av.activeTab),variant:"ghost",onClick:()=>t(n.value)},n.label))),r.map(n=>n.value===e?n.content:Ga.default.createElement(Ga.default.Fragment,null)));var EM={formWrapper:"formWrapper_Z2Mk_G"};var sq=z(Qv()),Gt=z(ve());function Pf(e,t){return Pf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(n,i){return n.__proto__=i,n},Pf(e,t)}function Dn(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,Pf(e,t)}var li=function(){function e(){this.listeners=[]}var t=e.prototype;return t.subscribe=function(n){var i=this,o=n||function(){};return this.listeners.push(o),this.onSubscribe(),function(){i.listeners=i.listeners.filter(function(a){return a!==o}),i.onUnsubscribe()}},t.hasListeners=function(){return this.listeners.length>0},t.onSubscribe=function(){},t.onUnsubscribe=function(){},e}();var Kv=typeof window>"u";function rt(){}function A3(e,t){return typeof e=="function"?e(t):e}function j3(e){return typeof e=="number"&&e>=0&&e!==1/0}function xf(e){return Array.isArray(e)?e:[e]}function F3(e,t){return Math.max(e+(t||0)-Date.now(),0)}function Bv(e,t,r){return Df(e)?typeof t=="function"?B({},r,{queryKey:e,queryFn:t}):B({},t,{queryKey:e}):e}function M3(e,t,r){return Df(e)?typeof t=="function"?B({},r,{mutationKey:e,mutationFn:t}):B({},t,{mutationKey:e}):typeof e=="function"?B({},t,{mutationFn:e}):B({},e)}function ci(e,t,r){return Df(e)?[B({},t,{queryKey:e}),r]:[e||{},t]}function gee(e,t){if(e===!0&&t===!0||e==null&&t==null)return"all";if(e===!1&&t===!1)return"none";var r=e??!t;return r?"active":"inactive"}function Bw(e,t){var r=e.active,n=e.exact,i=e.fetching,o=e.inactive,a=e.predicate,s=e.queryKey,u=e.stale;if(Df(s)){if(n){if(t.queryHash!==Cf(s,t.options))return!1}else if(!kf(t.queryKey,s))return!1}var l=gee(r,o);if(l==="none")return!1;if(l!=="all"){var c=t.isActive();if(l==="active"&&!c||l==="inactive"&&c)return!1}return!(typeof u=="boolean"&&t.isStale()!==u||typeof i=="boolean"&&t.isFetching()!==i||a&&!a(t))}function Hw(e,t){var r=e.exact,n=e.fetching,i=e.predicate,o=e.mutationKey;if(Df(o)){if(!t.options.mutationKey)return!1;if(r){if($o(t.options.mutationKey)!==$o(o))return!1}else if(!kf(t.options.mutationKey,o))return!1}return!(typeof n=="boolean"&&t.state.status==="loading"!==n||i&&!i(t))}function Cf(e,t){var r=t?.queryKeyHashFn||$o;return r(e)}function $o(e){var t=xf(e);return Eee(t)}function Eee(e){return JSON.stringify(e,function(t,r){return Kw(r)?Object.keys(r).sort().reduce(function(n,i){return n[i]=r[i],n},{}):r})}function kf(e,t){return q3(xf(e),xf(t))}function q3(e,t){return e===t?!0:typeof e!=typeof t?!1:e&&t&&typeof e=="object"&&typeof t=="object"?!Object.keys(t).some(function(r){return!q3(e[r],t[r])}):!1}function zw(e,t){if(e===t)return e;var r=Array.isArray(e)&&Array.isArray(t);if(r||Kw(e)&&Kw(t)){for(var n=r?e.length:Object.keys(e).length,i=r?t:Object.keys(t),o=i.length,a=r?[]:{},s=0,u=0;u<o;u++){var l=r?u:i[u];a[l]=zw(e[l],t[l]),a[l]===e[l]&&s++}return n===o&&s===n?e:a}return t}function Kw(e){if(!D3(e))return!1;var t=e.constructor;if(typeof t>"u")return!0;var r=t.prototype;return!(!D3(r)||!r.hasOwnProperty("isPrototypeOf"))}function D3(e){return Object.prototype.toString.call(e)==="[object Object]"}function Df(e){return typeof e=="string"||Array.isArray(e)}function U3(e){return new Promise(function(t){setTimeout(t,e)})}function Ww(e){Promise.resolve().then(e).catch(function(t){return setTimeout(function(){throw t})})}function Hv(){if(typeof AbortController=="function")return new AbortController}var Tee=function(e){Dn(t,e);function t(){var n;return n=e.call(this)||this,n.setup=function(i){var o;if(!Kv&&((o=window)==null?void 0:o.addEventListener)){var a=function(){return i()};return window.addEventListener("visibilitychange",a,!1),window.addEventListener("focus",a,!1),function(){window.removeEventListener("visibilitychange",a),window.removeEventListener("focus",a)}}},n}var r=t.prototype;return r.onSubscribe=function(){this.cleanup||this.setEventListener(this.setup)},r.onUnsubscribe=function(){if(!this.hasListeners()){var i;(i=this.cleanup)==null||i.call(this),this.cleanup=void 0}},r.setEventListener=function(i){var o,a=this;this.setup=i,(o=this.cleanup)==null||o.call(this),this.cleanup=i(function(s){typeof s=="boolean"?a.setFocused(s):a.onFocus()})},r.setFocused=function(i){this.focused=i,i&&this.onFocus()},r.onFocus=function(){this.listeners.forEach(function(i){i()})},r.isFocused=function(){return typeof this.focused=="boolean"?this.focused:typeof document>"u"?!0:[void 0,"visible","prerender"].includes(document.visibilityState)},t}(li),qu=new Tee;var _ee=function(e){Dn(t,e);function t(){var n;return n=e.call(this)||this,n.setup=function(i){var o;if(!Kv&&((o=window)==null?void 0:o.addEventListener)){var a=function(){return i()};return window.addEventListener("online",a,!1),window.addEventListener("offline",a,!1),function(){window.removeEventListener("online",a),window.removeEventListener("offline",a)}}},n}var r=t.prototype;return r.onSubscribe=function(){this.cleanup||this.setEventListener(this.setup)},r.onUnsubscribe=function(){if(!this.hasListeners()){var i;(i=this.cleanup)==null||i.call(this),this.cleanup=void 0}},r.setEventListener=function(i){var o,a=this;this.setup=i,(o=this.cleanup)==null||o.call(this),this.cleanup=i(function(s){typeof s=="boolean"?a.setOnline(s):a.onOnline()})},r.setOnline=function(i){this.online=i,i&&this.onOnline()},r.onOnline=function(){this.listeners.forEach(function(i){i()})},r.isOnline=function(){return typeof this.online=="boolean"?this.online:typeof navigator>"u"||typeof navigator.onLine>"u"?!0:navigator.onLine},t}(li),Uu=new _ee;function bee(e){return Math.min(1e3*Math.pow(2,e),3e4)}function Af(e){return typeof e?.cancel=="function"}var V3=function(t){this.revert=t?.revert,this.silent=t?.silent};function zv(e){return e instanceof V3}var Wv=function(t){var r=this,n=!1,i,o,a,s;this.abort=t.abort,this.cancel=function(p){return i?.(p)},this.cancelRetry=function(){n=!0},this.continueRetry=function(){n=!1},this.continue=function(){return o?.()},this.failureCount=0,this.isPaused=!1,this.isResolved=!1,this.isTransportCancelable=!1,this.promise=new Promise(function(p,d){a=p,s=d});var u=function(d){r.isResolved||(r.isResolved=!0,t.onSuccess==null||t.onSuccess(d),o?.(),a(d))},l=function(d){r.isResolved||(r.isResolved=!0,t.onError==null||t.onError(d),o?.(),s(d))},c=function(){return new Promise(function(d){o=d,r.isPaused=!0,t.onPause==null||t.onPause()}).then(function(){o=void 0,r.isPaused=!1,t.onContinue==null||t.onContinue()})},f=function p(){if(!r.isResolved){var d;try{d=t.fn()}catch(m){d=Promise.reject(m)}i=function(E){if(!r.isResolved&&(l(new V3(E)),r.abort==null||r.abort(),Af(d)))try{d.cancel()}catch{}},r.isTransportCancelable=Af(d),Promise.resolve(d).then(u).catch(function(m){var E,b;if(!r.isResolved){var h=(E=t.retry)!=null?E:3,v=(b=t.retryDelay)!=null?b:bee,g=typeof v=="function"?v(r.failureCount,m):v,_=h===!0||typeof h=="number"&&r.failureCount<h||typeof h=="function"&&h(r.failureCount,m);if(n||!_){l(m);return}r.failureCount++,t.onFail==null||t.onFail(r.failureCount,m),U3(g).then(function(){if(!qu.isFocused()||!Uu.isOnline())return c()}).then(function(){n?l(m):p()})}})}};f()};var See=function(){function e(){this.queue=[],this.transactions=0,this.notifyFn=function(r){r()},this.batchNotifyFn=function(r){r()}}var t=e.prototype;return t.batch=function(n){var i;this.transactions++;try{i=n()}finally{this.transactions--,this.transactions||this.flush()}return i},t.schedule=function(n){var i=this;this.transactions?this.queue.push(n):Ww(function(){i.notifyFn(n)})},t.batchCalls=function(n){var i=this;return function(){for(var o=arguments.length,a=new Array(o),s=0;s<o;s++)a[s]=arguments[s];i.schedule(function(){n.apply(void 0,a)})}},t.flush=function(){var n=this,i=this.queue;this.queue=[],i.length&&Ww(function(){n.batchNotifyFn(function(){i.forEach(function(o){n.notifyFn(o)})})})},t.setNotifyFunction=function(n){this.notifyFn=n},t.setBatchNotifyFunction=function(n){this.batchNotifyFn=n},e}(),be=new See;var G3=console;function Yv(){return G3}function Yw(e){G3=e}var $3=function(){function e(r){this.abortSignalConsumed=!1,this.hadObservers=!1,this.defaultOptions=r.defaultOptions,this.setOptions(r.options),this.observers=[],this.cache=r.cache,this.queryKey=r.queryKey,this.queryHash=r.queryHash,this.initialState=r.state||this.getDefaultState(this.options),this.state=this.initialState,this.meta=r.meta,this.scheduleGc()}var t=e.prototype;return t.setOptions=function(n){var i;this.options=B({},this.defaultOptions,n),this.meta=n?.meta,this.cacheTime=Math.max(this.cacheTime||0,(i=this.options.cacheTime)!=null?i:5*60*1e3)},t.setDefaultOptions=function(n){this.defaultOptions=n},t.scheduleGc=function(){var n=this;this.clearGcTimeout(),j3(this.cacheTime)&&(this.gcTimeout=setTimeout(function(){n.optionalRemove()},this.cacheTime))},t.clearGcTimeout=function(){clearTimeout(this.gcTimeout),this.gcTimeout=void 0},t.optionalRemove=function(){this.observers.length||(this.state.isFetching?this.hadObservers&&this.scheduleGc():this.cache.remove(this))},t.setData=function(n,i){var o,a,s=this.state.data,u=A3(n,s);return(o=(a=this.options).isDataEqual)!=null&&o.call(a,s,u)?u=s:this.options.structuralSharing!==!1&&(u=zw(s,u)),this.dispatch({data:u,type:"success",dataUpdatedAt:i?.updatedAt}),u},t.setState=function(n,i){this.dispatch({type:"setState",state:n,setStateOptions:i})},t.cancel=function(n){var i,o=this.promise;return(i=this.retryer)==null||i.cancel(n),o?o.then(rt).catch(rt):Promise.resolve()},t.destroy=function(){this.clearGcTimeout(),this.cancel({silent:!0})},t.reset=function(){this.destroy(),this.setState(this.initialState)},t.isActive=function(){return this.observers.some(function(n){return n.options.enabled!==!1})},t.isFetching=function(){return this.state.isFetching},t.isStale=function(){return this.state.isInvalidated||!this.state.dataUpdatedAt||this.observers.some(function(n){return n.getCurrentResult().isStale})},t.isStaleByTime=function(n){return n===void 0&&(n=0),this.state.isInvalidated||!this.state.dataUpdatedAt||!F3(this.state.dataUpdatedAt,n)},t.onFocus=function(){var n,i=this.observers.find(function(o){return o.shouldFetchOnWindowFocus()});i&&i.refetch(),(n=this.retryer)==null||n.continue()},t.onOnline=function(){var n,i=this.observers.find(function(o){return o.shouldFetchOnReconnect()});i&&i.refetch(),(n=this.retryer)==null||n.continue()},t.addObserver=function(n){this.observers.indexOf(n)===-1&&(this.observers.push(n),this.hadObservers=!0,this.clearGcTimeout(),this.cache.notify({type:"observerAdded",query:this,observer:n}))},t.removeObserver=function(n){this.observers.indexOf(n)!==-1&&(this.observers=this.observers.filter(function(i){return i!==n}),this.observers.length||(this.retryer&&(this.retryer.isTransportCancelable||this.abortSignalConsumed?this.retryer.cancel({revert:!0}):this.retryer.cancelRetry()),this.cacheTime?this.scheduleGc():this.cache.remove(this)),this.cache.notify({type:"observerRemoved",query:this,observer:n}))},t.getObserversCount=function(){return this.observers.length},t.invalidate=function(){this.state.isInvalidated||this.dispatch({type:"invalidate"})},t.fetch=function(n,i){var o=this,a,s,u;if(this.state.isFetching){if(this.state.dataUpdatedAt&&i?.cancelRefetch)this.cancel({silent:!0});else if(this.promise){var l;return(l=this.retryer)==null||l.continueRetry(),this.promise}}if(n&&this.setOptions(n),!this.options.queryFn){var c=this.observers.find(function(v){return v.options.queryFn});c&&this.setOptions(c.options)}var f=xf(this.queryKey),p=Hv(),d={queryKey:f,pageParam:void 0,meta:this.meta};Object.defineProperty(d,"signal",{enumerable:!0,get:function(){if(p)return o.abortSignalConsumed=!0,p.signal}});var m=function(){return o.options.queryFn?(o.abortSignalConsumed=!1,o.options.queryFn(d)):Promise.reject("Missing queryFn")},E={fetchOptions:i,options:this.options,queryKey:f,state:this.state,fetchFn:m,meta:this.meta};if((a=this.options.behavior)!=null&&a.onFetch){var b;(b=this.options.behavior)==null||b.onFetch(E)}if(this.revertState=this.state,!this.state.isFetching||this.state.fetchMeta!==((s=E.fetchOptions)==null?void 0:s.meta)){var h;this.dispatch({type:"fetch",meta:(h=E.fetchOptions)==null?void 0:h.meta})}return this.retryer=new Wv({fn:E.fetchFn,abort:p==null||(u=p.abort)==null?void 0:u.bind(p),onSuccess:function(g){o.setData(g),o.cache.config.onSuccess==null||o.cache.config.onSuccess(g,o),o.cacheTime===0&&o.optionalRemove()},onError:function(g){zv(g)&&g.silent||o.dispatch({type:"error",error:g}),zv(g)||(o.cache.config.onError==null||o.cache.config.onError(g,o),Yv().error(g)),o.cacheTime===0&&o.optionalRemove()},onFail:function(){o.dispatch({type:"failed"})},onPause:function(){o.dispatch({type:"pause"})},onContinue:function(){o.dispatch({type:"continue"})},retry:E.options.retry,retryDelay:E.options.retryDelay}),this.promise=this.retryer.promise,this.promise},t.dispatch=function(n){var i=this;this.state=this.reducer(this.state,n),be.batch(function(){i.observers.forEach(function(o){o.onQueryUpdate(n)}),i.cache.notify({query:i,type:"queryUpdated",action:n})})},t.getDefaultState=function(n){var i=typeof n.initialData=="function"?n.initialData():n.initialData,o=typeof n.initialData<"u",a=o?typeof n.initialDataUpdatedAt=="function"?n.initialDataUpdatedAt():n.initialDataUpdatedAt:0,s=typeof i<"u";return{data:i,dataUpdateCount:0,dataUpdatedAt:s?a??Date.now():0,error:null,errorUpdateCount:0,errorUpdatedAt:0,fetchFailureCount:0,fetchMeta:null,isFetching:!1,isInvalidated:!1,isPaused:!1,status:s?"success":"idle"}},t.reducer=function(n,i){var o,a;switch(i.type){case"failed":return B({},n,{fetchFailureCount:n.fetchFailureCount+1});case"pause":return B({},n,{isPaused:!0});case"continue":return B({},n,{isPaused:!1});case"fetch":return B({},n,{fetchFailureCount:0,fetchMeta:(o=i.meta)!=null?o:null,isFetching:!0,isPaused:!1},!n.dataUpdatedAt&&{error:null,status:"loading"});case"success":return B({},n,{data:i.data,dataUpdateCount:n.dataUpdateCount+1,dataUpdatedAt:(a=i.dataUpdatedAt)!=null?a:Date.now(),error:null,fetchFailureCount:0,isFetching:!1,isInvalidated:!1,isPaused:!1,status:"success"});case"error":var s=i.error;return zv(s)&&s.revert&&this.revertState?B({},this.revertState):B({},n,{error:s,errorUpdateCount:n.errorUpdateCount+1,errorUpdatedAt:Date.now(),fetchFailureCount:n.fetchFailureCount+1,isFetching:!1,isPaused:!1,status:"error"});case"invalidate":return B({},n,{isInvalidated:!0});case"setState":return B({},n,i.state);default:return n}},e}();var Q3=function(e){Dn(t,e);function t(n){var i;return i=e.call(this)||this,i.config=n||{},i.queries=[],i.queriesMap={},i}var r=t.prototype;return r.build=function(i,o,a){var s,u=o.queryKey,l=(s=o.queryHash)!=null?s:Cf(u,o),c=this.get(l);return c||(c=new $3({cache:this,queryKey:u,queryHash:l,options:i.defaultQueryOptions(o),state:a,defaultOptions:i.getQueryDefaults(u),meta:o.meta}),this.add(c)),c},r.add=function(i){this.queriesMap[i.queryHash]||(this.queriesMap[i.queryHash]=i,this.queries.push(i),this.notify({type:"queryAdded",query:i}))},r.remove=function(i){var o=this.queriesMap[i.queryHash];o&&(i.destroy(),this.queries=this.queries.filter(function(a){return a!==i}),o===i&&delete this.queriesMap[i.queryHash],this.notify({type:"queryRemoved",query:i}))},r.clear=function(){var i=this;be.batch(function(){i.queries.forEach(function(o){i.remove(o)})})},r.get=function(i){return this.queriesMap[i]},r.getAll=function(){return this.queries},r.find=function(i,o){var a=ci(i,o),s=a[0];return typeof s.exact>"u"&&(s.exact=!0),this.queries.find(function(u){return Bw(s,u)})},r.findAll=function(i,o){var a=ci(i,o),s=a[0];return Object.keys(s).length>0?this.queries.filter(function(u){return Bw(s,u)}):this.queries},r.notify=function(i){var o=this;be.batch(function(){o.listeners.forEach(function(a){a(i)})})},r.onFocus=function(){var i=this;be.batch(function(){i.queries.forEach(function(o){o.onFocus()})})},r.onOnline=function(){var i=this;be.batch(function(){i.queries.forEach(function(o){o.onOnline()})})},t}(li);var K3=function(){function e(r){this.options=B({},r.defaultOptions,r.options),this.mutationId=r.mutationId,this.mutationCache=r.mutationCache,this.observers=[],this.state=r.state||Xw(),this.meta=r.meta}var t=e.prototype;return t.setState=function(n){this.dispatch({type:"setState",state:n})},t.addObserver=function(n){this.observers.indexOf(n)===-1&&this.observers.push(n)},t.removeObserver=function(n){this.observers=this.observers.filter(function(i){return i!==n})},t.cancel=function(){return this.retryer?(this.retryer.cancel(),this.retryer.promise.then(rt).catch(rt)):Promise.resolve()},t.continue=function(){return this.retryer?(this.retryer.continue(),this.retryer.promise):this.execute()},t.execute=function(){var n=this,i,o=this.state.status==="loading",a=Promise.resolve();return o||(this.dispatch({type:"loading",variables:this.options.variables}),a=a.then(function(){n.mutationCache.config.onMutate==null||n.mutationCache.config.onMutate(n.state.variables,n)}).then(function(){return n.options.onMutate==null?void 0:n.options.onMutate(n.state.variables)}).then(function(s){s!==n.state.context&&n.dispatch({type:"loading",context:s,variables:n.state.variables})})),a.then(function(){return n.executeMutation()}).then(function(s){i=s,n.mutationCache.config.onSuccess==null||n.mutationCache.config.onSuccess(i,n.state.variables,n.state.context,n)}).then(function(){return n.options.onSuccess==null?void 0:n.options.onSuccess(i,n.state.variables,n.state.context)}).then(function(){return n.options.onSettled==null?void 0:n.options.onSettled(i,null,n.state.variables,n.state.context)}).then(function(){return n.dispatch({type:"success",data:i}),i}).catch(function(s){return n.mutationCache.config.onError==null||n.mutationCache.config.onError(s,n.state.variables,n.state.context,n),Yv().error(s),Promise.resolve().then(function(){return n.options.onError==null?void 0:n.options.onError(s,n.state.variables,n.state.context)}).then(function(){return n.options.onSettled==null?void 0:n.options.onSettled(void 0,s,n.state.variables,n.state.context)}).then(function(){throw n.dispatch({type:"error",error:s}),s})})},t.executeMutation=function(){var n=this,i;return this.retryer=new Wv({fn:function(){return n.options.mutationFn?n.options.mutationFn(n.state.variables):Promise.reject("No mutationFn found")},onFail:function(){n.dispatch({type:"failed"})},onPause:function(){n.dispatch({type:"pause"})},onContinue:function(){n.dispatch({type:"continue"})},retry:(i=this.options.retry)!=null?i:0,retryDelay:this.options.retryDelay}),this.retryer.promise},t.dispatch=function(n){var i=this;this.state=wee(this.state,n),be.batch(function(){i.observers.forEach(function(o){o.onMutationUpdate(n)}),i.mutationCache.notify(i)})},e}();function Xw(){return{context:void 0,data:void 0,error:null,failureCount:0,isPaused:!1,status:"idle",variables:void 0}}function wee(e,t){switch(t.type){case"failed":return B({},e,{failureCount:e.failureCount+1});case"pause":return B({},e,{isPaused:!0});case"continue":return B({},e,{isPaused:!1});case"loading":return B({},e,{context:t.context,data:void 0,error:null,isPaused:!1,status:"loading",variables:t.variables});case"success":return B({},e,{data:t.data,error:null,status:"success",isPaused:!1});case"error":return B({},e,{data:void 0,error:t.error,failureCount:e.failureCount+1,isPaused:!1,status:"error"});case"setState":return B({},e,t.state);default:return e}}var B3=function(e){Dn(t,e);function t(n){var i;return i=e.call(this)||this,i.config=n||{},i.mutations=[],i.mutationId=0,i}var r=t.prototype;return r.build=function(i,o,a){var s=new K3({mutationCache:this,mutationId:++this.mutationId,options:i.defaultMutationOptions(o),state:a,defaultOptions:o.mutationKey?i.getMutationDefaults(o.mutationKey):void 0,meta:o.meta});return this.add(s),s},r.add=function(i){this.mutations.push(i),this.notify(i)},r.remove=function(i){this.mutations=this.mutations.filter(function(o){return o!==i}),i.cancel(),this.notify(i)},r.clear=function(){var i=this;be.batch(function(){i.mutations.forEach(function(o){i.remove(o)})})},r.getAll=function(){return this.mutations},r.find=function(i){return typeof i.exact>"u"&&(i.exact=!0),this.mutations.find(function(o){return Hw(i,o)})},r.findAll=function(i){return this.mutations.filter(function(o){return Hw(i,o)})},r.notify=function(i){var o=this;be.batch(function(){o.listeners.forEach(function(a){a(i)})})},r.onFocus=function(){this.resumePausedMutations()},r.onOnline=function(){this.resumePausedMutations()},r.resumePausedMutations=function(){var i=this.mutations.filter(function(o){return o.state.isPaused});return be.batch(function(){return i.reduce(function(o,a){return o.then(function(){return a.continue().catch(rt)})},Promise.resolve())})},t}(li);function z3(){return{onFetch:function(t){t.fetchFn=function(){var r,n,i,o,a,s,u=(r=t.fetchOptions)==null||(n=r.meta)==null?void 0:n.refetchPage,l=(i=t.fetchOptions)==null||(o=i.meta)==null?void 0:o.fetchMore,c=l?.pageParam,f=l?.direction==="forward",p=l?.direction==="backward",d=((a=t.state.data)==null?void 0:a.pages)||[],m=((s=t.state.data)==null?void 0:s.pageParams)||[],E=Hv(),b=E?.signal,h=m,v=!1,g=t.options.queryFn||function(){return Promise.reject("Missing queryFn")},_=function(Me,Tt,ie,Ze){return h=Ze?[Tt].concat(h):[].concat(h,[Tt]),Ze?[ie].concat(Me):[].concat(Me,[ie])},N=function(Me,Tt,ie,Ze){if(v)return Promise.reject("Cancelled");if(typeof ie>"u"&&!Tt&&Me.length)return Promise.resolve(Me);var Tr={queryKey:t.queryKey,signal:b,pageParam:ie,meta:t.meta},Vr=g(Tr),Bo=Promise.resolve(Vr).then(function(w){return _(Me,ie,w,Ze)});if(Af(Vr)){var Bu=Bo;Bu.cancel=Vr.cancel}return Bo},R;if(!d.length)R=N([]);else if(f){var O=typeof c<"u",L=O?c:H3(t.options,d);R=N(d,O,L)}else if(p){var S=typeof c<"u",I=S?c:Oee(t.options,d);R=N(d,S,I,!0)}else(function(){h=[];var Se=typeof t.options.getNextPageParam>"u",Me=u&&d[0]?u(d[0],0,d):!0;R=Me?N([],Se,m[0]):Promise.resolve(_([],m[0],d[0]));for(var Tt=function(Tr){R=R.then(function(Vr){var Bo=u&&d[Tr]?u(d[Tr],Tr,d):!0;if(Bo){var Bu=Se?m[Tr]:H3(t.options,Vr);return N(Vr,Se,Bu)}return Promise.resolve(_(Vr,m[Tr],d[Tr]))})},ie=1;ie<d.length;ie++)Tt(ie)})();var $=R.then(function(Se){return{pages:Se,pageParams:h}}),Ie=$;return Ie.cancel=function(){v=!0,E?.abort(),Af(R)&&R.cancel()},$}}}}function H3(e,t){return e.getNextPageParam==null?void 0:e.getNextPageParam(t[t.length-1],t)}function Oee(e,t){return e.getPreviousPageParam==null?void 0:e.getPreviousPageParam(t[0],t)}var Jw=function(){function e(r){r===void 0&&(r={}),this.queryCache=r.queryCache||new Q3,this.mutationCache=r.mutationCache||new B3,this.defaultOptions=r.defaultOptions||{},this.queryDefaults=[],this.mutationDefaults=[]}var t=e.prototype;return t.mount=function(){var n=this;this.unsubscribeFocus=qu.subscribe(function(){qu.isFocused()&&Uu.isOnline()&&(n.mutationCache.onFocus(),n.queryCache.onFocus())}),this.unsubscribeOnline=Uu.subscribe(function(){qu.isFocused()&&Uu.isOnline()&&(n.mutationCache.onOnline(),n.queryCache.onOnline())})},t.unmount=function(){var n,i;(n=this.unsubscribeFocus)==null||n.call(this),(i=this.unsubscribeOnline)==null||i.call(this)},t.isFetching=function(n,i){var o=ci(n,i),a=o[0];return a.fetching=!0,this.queryCache.findAll(a).length},t.isMutating=function(n){return this.mutationCache.findAll(B({},n,{fetching:!0})).length},t.getQueryData=function(n,i){var o;return(o=this.queryCache.find(n,i))==null?void 0:o.state.data},t.getQueriesData=function(n){return this.getQueryCache().findAll(n).map(function(i){var o=i.queryKey,a=i.state,s=a.data;return[o,s]})},t.setQueryData=function(n,i,o){var a=Bv(n),s=this.defaultQueryOptions(a);return this.queryCache.build(this,s).setData(i,o)},t.setQueriesData=function(n,i,o){var a=this;return be.batch(function(){return a.getQueryCache().findAll(n).map(function(s){var u=s.queryKey;return[u,a.setQueryData(u,i,o)]})})},t.getQueryState=function(n,i){var o;return(o=this.queryCache.find(n,i))==null?void 0:o.state},t.removeQueries=function(n,i){var o=ci(n,i),a=o[0],s=this.queryCache;be.batch(function(){s.findAll(a).forEach(function(u){s.remove(u)})})},t.resetQueries=function(n,i,o){var a=this,s=ci(n,i,o),u=s[0],l=s[1],c=this.queryCache,f=B({},u,{active:!0});return be.batch(function(){return c.findAll(u).forEach(function(p){p.reset()}),a.refetchQueries(f,l)})},t.cancelQueries=function(n,i,o){var a=this,s=ci(n,i,o),u=s[0],l=s[1],c=l===void 0?{}:l;typeof c.revert>"u"&&(c.revert=!0);var f=be.batch(function(){return a.queryCache.findAll(u).map(function(p){return p.cancel(c)})});return Promise.all(f).then(rt).catch(rt)},t.invalidateQueries=function(n,i,o){var a,s,u,l=this,c=ci(n,i,o),f=c[0],p=c[1],d=B({},f,{active:(a=(s=f.refetchActive)!=null?s:f.active)!=null?a:!0,inactive:(u=f.refetchInactive)!=null?u:!1});return be.batch(function(){return l.queryCache.findAll(f).forEach(function(m){m.invalidate()}),l.refetchQueries(d,p)})},t.refetchQueries=function(n,i,o){var a=this,s=ci(n,i,o),u=s[0],l=s[1],c=be.batch(function(){return a.queryCache.findAll(u).map(function(p){return p.fetch(void 0,B({},l,{meta:{refetchPage:u?.refetchPage}}))})}),f=Promise.all(c).then(rt);return l?.throwOnError||(f=f.catch(rt)),f},t.fetchQuery=function(n,i,o){var a=Bv(n,i,o),s=this.defaultQueryOptions(a);typeof s.retry>"u"&&(s.retry=!1);var u=this.queryCache.build(this,s);return u.isStaleByTime(s.staleTime)?u.fetch(s):Promise.resolve(u.state.data)},t.prefetchQuery=function(n,i,o){return this.fetchQuery(n,i,o).then(rt).catch(rt)},t.fetchInfiniteQuery=function(n,i,o){var a=Bv(n,i,o);return a.behavior=z3(),this.fetchQuery(a)},t.prefetchInfiniteQuery=function(n,i,o){return this.fetchInfiniteQuery(n,i,o).then(rt).catch(rt)},t.cancelMutations=function(){var n=this,i=be.batch(function(){return n.mutationCache.getAll().map(function(o){return o.cancel()})});return Promise.all(i).then(rt).catch(rt)},t.resumePausedMutations=function(){return this.getMutationCache().resumePausedMutations()},t.executeMutation=function(n){return this.mutationCache.build(this,n).execute()},t.getQueryCache=function(){return this.queryCache},t.getMutationCache=function(){return this.mutationCache},t.getDefaultOptions=function(){return this.defaultOptions},t.setDefaultOptions=function(n){this.defaultOptions=n},t.setQueryDefaults=function(n,i){var o=this.queryDefaults.find(function(a){return $o(n)===$o(a.queryKey)});o?o.defaultOptions=i:this.queryDefaults.push({queryKey:n,defaultOptions:i})},t.getQueryDefaults=function(n){var i;return n?(i=this.queryDefaults.find(function(o){return kf(n,o.queryKey)}))==null?void 0:i.defaultOptions:void 0},t.setMutationDefaults=function(n,i){var o=this.mutationDefaults.find(function(a){return $o(n)===$o(a.mutationKey)});o?o.defaultOptions=i:this.mutationDefaults.push({mutationKey:n,defaultOptions:i})},t.getMutationDefaults=function(n){var i;return n?(i=this.mutationDefaults.find(function(o){return kf(n,o.mutationKey)}))==null?void 0:i.defaultOptions:void 0},t.defaultQueryOptions=function(n){if(n?._defaulted)return n;var i=B({},this.defaultOptions.queries,this.getQueryDefaults(n?.queryKey),n,{_defaulted:!0});return!i.queryHash&&i.queryKey&&(i.queryHash=Cf(i.queryKey,i)),i},t.defaultQueryObserverOptions=function(n){return this.defaultQueryOptions(n)},t.defaultMutationOptions=function(n){return n?._defaulted?n:B({},this.defaultOptions.mutations,this.getMutationDefaults(n?.mutationKey),n,{_defaulted:!0})},t.clear=function(){this.queryCache.clear(),this.mutationCache.clear()},e}();var W3=function(e){Dn(t,e);function t(n,i){var o;return o=e.call(this)||this,o.client=n,o.setOptions(i),o.bindMethods(),o.updateResult(),o}var r=t.prototype;return r.bindMethods=function(){this.mutate=this.mutate.bind(this),this.reset=this.reset.bind(this)},r.setOptions=function(i){this.options=this.client.defaultMutationOptions(i)},r.onUnsubscribe=function(){if(!this.listeners.length){var i;(i=this.currentMutation)==null||i.removeObserver(this)}},r.onMutationUpdate=function(i){this.updateResult();var o={listeners:!0};i.type==="success"?o.onSuccess=!0:i.type==="error"&&(o.onError=!0),this.notify(o)},r.getCurrentResult=function(){return this.currentResult},r.reset=function(){this.currentMutation=void 0,this.updateResult(),this.notify({listeners:!0})},r.mutate=function(i,o){return this.mutateOptions=o,this.currentMutation&&this.currentMutation.removeObserver(this),this.currentMutation=this.client.getMutationCache().build(this.client,B({},this.options,{variables:typeof i<"u"?i:this.options.variables})),this.currentMutation.addObserver(this),this.currentMutation.execute()},r.updateResult=function(){var i=this.currentMutation?this.currentMutation.state:Xw(),o=B({},i,{isLoading:i.status==="loading",isSuccess:i.status==="success",isError:i.status==="error",isIdle:i.status==="idle",mutate:this.mutate,reset:this.reset});this.currentResult=o},r.notify=function(i){var o=this;be.batch(function(){o.mutateOptions&&(i.onSuccess?(o.mutateOptions.onSuccess==null||o.mutateOptions.onSuccess(o.currentResult.data,o.currentResult.variables,o.currentResult.context),o.mutateOptions.onSettled==null||o.mutateOptions.onSettled(o.currentResult.data,null,o.currentResult.variables,o.currentResult.context)):i.onError&&(o.mutateOptions.onError==null||o.mutateOptions.onError(o.currentResult.error,o.currentResult.variables,o.currentResult.context),o.mutateOptions.onSettled==null||o.mutateOptions.onSettled(void 0,o.currentResult.error,o.currentResult.variables,o.currentResult.context))),i.listeners&&o.listeners.forEach(function(a){a(o.currentResult)})})},t}(li);var Y3=z(PE()),X3=Y3.default.unstable_batchedUpdates;be.setBatchNotifyFunction(X3);var J3=console;Yw(J3);var Qo=z(ve()),Z3=Qo.default.createContext(void 0),eq=Qo.default.createContext(!1);function tq(e){return e&&typeof window<"u"?(window.ReactQueryClientContext||(window.ReactQueryClientContext=Z3),window.ReactQueryClientContext):Z3}var Zw=function(){var t=Qo.default.useContext(tq(Qo.default.useContext(eq)));if(!t)throw new Error("No QueryClient set, use QueryClientProvider to set one");return t},eO=function(t){var r=t.client,n=t.contextSharing,i=n===void 0?!1:n,o=t.children;Qo.default.useEffect(function(){return r.mount(),function(){r.unmount()}},[r]);var a=tq(i);return Qo.default.createElement(eq.Provider,{value:i},Qo.default.createElement(a.Provider,{value:r},o))};var Vu=z(ve());function rq(e,t,r){return typeof t=="function"?t.apply(void 0,r):typeof t=="boolean"?t:!!e}function Ka(e,t,r){var n=Vu.default.useRef(!1),i=Vu.default.useState(0),o=i[1],a=M3(e,t,r),s=Zw(),u=Vu.default.useRef();u.current?u.current.setOptions(a):u.current=new W3(s,a);var l=u.current.getCurrentResult();Vu.default.useEffect(function(){n.current=!0;var f=u.current.subscribe(be.batchCalls(function(){n.current&&o(function(p){return p+1})}));return function(){n.current=!1,f()}},[]);var c=Vu.default.useCallback(function(f,p){u.current.mutate(f,p).catch(rt)},[]);if(l.error&&rq(void 0,u.current.options.useErrorBoundary,[l.error]))throw l.error;return B({},l,{mutate:c,mutateAsync:l.mutate})}var jf=z(ve()),Gu=z(al());var Nee=(0,Gu.Record)({response:(0,Gu.Record)({data:(0,Gu.Record)({errorCode:Gu.String})})}),$u=e=>{switch(Nee.guard(e)?e.response.data.errorCode:""){case"E005":return jf.default.createElement(de,{id:"errors.unexpectedError"});case"E078":return jf.default.createElement(de,{id:"errors.invalidCredentials"});case"E234":return jf.default.createElement(de,{id:"errors.userAlreadyExists"});default:return jf.default.createElement(de,{id:"errors.unknownError"})}};var tO=z(Za()),qi=z(ve());var fi={errorHint:"errorHint_c4jl-q",hint:"hint_c4jl-q",input:"input_c4jl-q",inputWithRightIcon:"inputWithRightIcon_c4jl-q",inputWrapper:"inputWrapper_c4jl-q",label:"label_c4jl-q",labelWrapper:"labelWrapper_c4jl-q",rightIconWrapper:"rightIconWrapper_c4jl-q",wrapper:"wrapper_c4jl-q"};var Ko=qi.default.forwardRef((l,u)=>{var c=l,{name:e,onChange:t,label:r,hint:n,isErrorHint:i=!1,rightIcon:o,className:a}=c,s=za(c,["name","onChange","label","hint","isErrorHint","rightIcon","className"]);return qi.default.createElement("div",{className:fi.wrapper},qi.default.createElement("div",{className:fi.labelWrapper},qi.default.createElement("label",{className:fi.label,htmlFor:e},r)),qi.default.createElement("div",{className:fi.inputWrapper},qi.default.createElement("input",Vi({className:(0,tO.default)(a,fi.input,o&&fi.inputWithRightIcon),onChange:f=>t(f.target.value),name:e,id:e,"aria-describedby":`hint-${e}`,ref:u},s)),qi.default.createElement("div",{className:fi.rightIconWrapper},o)),qi.default.createElement("p",{className:(0,tO.default)(fi.hint,i&&fi.errorHint),id:`hint-${e}`},n))});var pi=z(ve());var Qu=z(ve()),nq=({width:e=40,height:t=40})=>Qu.default.createElement("svg",{width:e,height:t,viewBox:"0 0 512 512",fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},Qu.default.createElement("g",null,Qu.default.createElement("g",null,Qu.default.createElement("path",{d:"m251.6,185.7c-36.9,0-67,31.5-67,70.3 0,38.7 30,70.3 67,70.3 36.9,0 67-31.5 67-70.3 0-38.7-30.1-70.3-67-70.3z"}),Qu.default.createElement("path",{d:"m251.6,367.1c-59.4,0-107.8-49.8-107.8-111.1 0-61.3 48.4-111.1 107.8-111.1s107.8,49.8 107.8,111.1c0,61.3-48.4,111.1-107.8,111.1zm246.3-121.9c-63.8-102.4-149.8-158.8-241.9-158.8-92.1,0-178.1,56.4-241.9,158.8-4.1,6.6-4.1,15 0,21.6 63.8,102.4 149.8,158.8 241.9,158.8 92.1,0 178-56.4 241.9-158.8 4.1-6.6 4.1-15 0-21.6z"}))));var rO=z(ve()),iq=({width:e=40,height:t=40})=>rO.default.createElement("svg",{width:e,height:t,viewBox:"0 0 16 16",fill:"currentColor",xmlns:"http://www.w3.org/2000/svg"},rO.default.createElement("path",{fillRule:"evenodd",d:"M14.7071,1.29289075 C15.0976,1.68342075 15.0976,2.31658075 14.7071,2.70711075 L2.70711,14.7071007 C2.31658,15.0976008 1.68342,15.0976008 1.29289,14.7071007 C0.902369,14.3166007 0.902369,13.6834007 1.29289,13.2929007 L2.64723,11.9386007 C0.734146,10.2024007 5.68434189e-14,8 5.68434189e-14,8 L0.0083320632,7.97591831 C0.153635117,7.56378601 2.22222222,2 8,2 C9.45831,2 10.6803,2.35444075 11.6948,2.89103075 L13.2929,1.29289075 C13.6834,0.90236975 14.3166,0.90236975 14.7071,1.29289075 Z M14.6852,5.56108075 C15.6175,6.85245075 16,8.00000075 16,8.00000075 C16,8.00000075 14,14.0000008 8,14.0000008 C7.43058,14.0000008 6.89718,13.9460007 6.39811,13.8481007 L8.25087,11.9954008 C10.3493,11.9174008 11.758,10.8662007 12.7136,9.71963075 C13.2163,9.11637075 13.574,8.50495075 13.8049,8.04307075 L13.8263,8.00000075 L13.8049,7.95693075 C13.6663,7.67977075 13.4821,7.34875075 13.2483,6.99797075 L14.6852,5.56108075 Z M8,4.00000075 C5.76219,4.00000075 4.27954,5.08865075 3.28644,6.28037075 C2.78373,6.88363075 2.42604,7.49505075 2.1951,7.95693075 L2.17372,8.00000075 L2.1951,8.04307075 C2.42604,8.50495075 2.78373,9.11637075 3.28644,9.71963075 C3.51765,9.99708075 3.77539,10.2689008 4.06301,10.5228007 L5.29237,9.29342075 C5.10495,8.90178075 5,8.46315075 5,8.00000075 C5,6.34315075 6.34315,5.00000075 8,5.00000075 C8.46315,5.00000075 8.90178,5.10495075 9.29342,5.29237075 L10.1882,4.39756075 C9.55332,4.14919075 8.8284,4.00000075 8,4.00000075 Z"}));var nO={iconBtn:"iconBtn_-4Lbua",wrapper:"wrapper_-4Lbua"};var Ff=t=>{var e=za(t,[]);let r=cn(),n=pi.default.useRef(null),[i,o]=pi.default.useState(!1),a=()=>{if(n.current){let u=n.current.value;n.current.setSelectionRange(u.length,u.length),n.current.value="",n.current.value=u}},s=pi.default.useCallback(()=>{var u;o(l=>!l),(u=n.current)==null||u.focus()},[]);return pi.default.useEffect(()=>{a()},[i]),pi.default.createElement("div",{className:nO.wrapper},pi.default.createElement(Ko,Uf(Vi({type:i?"text":"password",ref:n},e),{rightIcon:pi.default.createElement("button",{type:"button",className:nO.iconBtn,onClick:s,"aria-label":r.translate("password.eyeIconLabel")},i?pi.default.createElement(nq,null):pi.default.createElement(iq,null))})))};var oq=z(Za()),aq=z(ve());var Xv={errorMessage:"errorMessage_vv_U9G",message:"message_vv_U9G",successMessage:"successMessage_vv_U9G"};var Ba=({type:e,message:t,className:r})=>aq.default.createElement("div",{className:(0,oq.default)(r,Xv.message,e==="success"?Xv.successMessage:Xv.errorMessage)},t);var Jv={buttons:"buttons_by5cJG",errorMessage:"errorMessage_by5cJG",link:"link_by5cJG"};var uq=({className:e})=>{let t=cn(),[r,n]=Gt.default.useState(""),[i,o]=Gt.default.useState(""),a=Ka(u=>sq.default.post("/signin",u)),s=Gt.default.useCallback(u=>{u.preventDefault(),a.mutate({email:r,password:i})},[r,i]);return Gt.default.useEffect(()=>{a.isSuccess&&Hp(r,"SOME_SESSION_ID")},[a.isSuccess]),a.isSuccess?Gt.default.createElement(dg,{to:"/"}):Gt.default.createElement("div",{className:e},a.isError&&Gt.default.createElement(Ba,{className:Jv.errorMessage,type:"error",message:$u(a.error)}),Gt.default.createElement("form",{action:"",onSubmit:s},Gt.default.createElement(Ko,{type:"email",name:"email",value:r,onChange:u=>n(u),label:t.translate("forms.signin.emailLabel"),placeholder:"example@mail.com",hint:t.translate("forms.signin.emailHint"),required:!0}),Gt.default.createElement(Ff,{name:"password",value:i,onChange:u=>o(u),label:t.translate("forms.signin.passwordLabel"),hint:t.translate("forms.signin.passwordHint"),minLength:3,maxLength:20,pattern:"[a-zA-Z0-9]{3,20}",required:!0}),Gt.default.createElement("div",{className:Jv.buttons},Gt.default.createElement(Mn,{type:"submit"},Gt.default.createElement(de,{id:"forms.signin.submitText"})),Gt.default.createElement(cs,{className:Jv.link,to:"/recover-password"},Gt.default.createElement(de,{id:"forms.signin.forgotPasswordText"})))))};var cq=z(Qv()),Pt=z(ve());var lq={errorMessage:"errorMessage_daoKcG"};var fq=({className:e})=>{let t=cn(),[r,n]=Pt.default.useState(""),[i,o]=Pt.default.useState(""),[a,s]=Pt.default.useState(""),[u,l]=Pt.default.useState(!1),[c,f]=Pt.default.useState(!0),p=Ka(m=>cq.default.post("/signup",m));Pt.default.useEffect(()=>{f(i===a)},[i,a]);let d=Pt.default.useCallback(m=>{m.preventDefault(),i!==a?l(!0):(l(!1),p.mutate({email:r,password:i}))},[r,i,a]);return Pt.default.useEffect(()=>{p.isSuccess&&Hp(r,"SOME_RANDOM_SESSION")},[p.isSuccess]),Pt.default.createElement("div",{className:e},(u||p.isError)&&Pt.default.createElement(Ba,{className:lq.errorMessage,type:"error",message:u?t.translate("forms.signup.repeatPasswordHint"):$u(p.error)}),Pt.default.createElement("form",{action:"",onSubmit:d},Pt.default.createElement(Ko,{type:"email",name:"email",value:r,onChange:m=>n(m),label:t.translate("forms.signup.emailLabel"),placeholder:"example@mail.com",hint:t.translate("forms.signup.emailHint"),required:!0}),Pt.default.createElement(Ff,{name:"password",value:i,onChange:m=>o(m),label:t.translate("forms.signup.passwordLabel"),hint:t.translate("forms.signup.passwordHint"),minLength:3,maxLength:20,pattern:"[a-zA-Z0-9]{3,20}",required:!0}),Pt.default.createElement(Ff,{name:"password-repeat",value:a,onChange:m=>s(m),label:t.translate("forms.signup.repeatPasswordLabel"),minLength:3,maxLength:20,pattern:"[a-zA-Z0-9]{3,20}",hint:c?void 0:t.translate("forms.signup.repeatPasswordHint"),isErrorHint:!c,required:!0}),Pt.default.createElement(Mn,{type:"submit"},Pt.default.createElement(de,{id:"forms.signup.submitText"}))))};var pq=()=>{let e=cn(),[t,r]=Ui.default.useState("signin");return Ui.default.createElement("div",null,Ui.default.createElement("h1",null,Ui.default.createElement(de,{id:"pages.auth.title"}),Ui.default.createElement("div",{className:EM.formWrapper},Ui.default.createElement(gM,{activeTab:t,onChangeTab:n=>r(n),tabs:[{value:"signin",label:e.translate("forms.signin.tabHeader"),content:Ui.default.createElement(uq,null)},{value:"signup",label:e.translate("forms.signup.tabHeader"),content:Ui.default.createElement(fq,null)}]}))))};var Ku=z(ve());var $t=z(ve());var dq=z(Qv());var Mf={errorMessage:"errorMessage_iMgoFa",header:"header_iMgoFa",link:"link_iMgoFa",wrapper:"wrapper_iMgoFa"};var hq=()=>{let e=cn(),[t,r]=$t.default.useState(""),n=Ka(o=>dq.default.put("/password/recover",o)),i=$t.default.useCallback(o=>{o.preventDefault(),n.mutate({email:t})},[t]);return $t.default.createElement("div",{className:Mf.wrapper},$t.default.createElement(cs,{className:Mf.link,to:"/"},"\u2190 ",$t.default.createElement(de,{id:"forms.recoverPassword.returnToMainPage"})),n.isSuccess?$t.default.createElement(Ba,{type:"success",message:e.translate("forms.recoverPassword.successMessage")}):$t.default.createElement($t.default.Fragment,null,$t.default.createElement("h2",{className:Mf.header},$t.default.createElement(de,{id:"forms.recoverPassword.header"})),n.isError&&$t.default.createElement(Ba,{className:Mf.errorMessage,type:"error",message:$u(n.error)}),$t.default.createElement("form",{action:"",onSubmit:i},$t.default.createElement(Ko,{type:"email",name:"email",value:t,onChange:o=>r(o),label:e.translate("forms.recoverPassword.emailLabel"),placeholder:"example@mail.com",hint:e.translate("forms.recoverPassword.emailHint"),required:!0}),$t.default.createElement(Mn,{type:"submit"},$t.default.createElement(de,{id:"forms.recoverPassword.submitText"})))))};var mq=()=>Ku.default.createElement(Ku.default.Fragment,null,Ku.default.createElement("h1",null,Ku.default.createElement(de,{id:"pages.recoverPassword.title"})),Ku.default.createElement(hq,null));var Iee=new Jw,Ree=()=>{let[e,t]=Qt.default.useState(fg());return Qt.default.useEffect(()=>{let r=()=>{t(fg())};return window.addEventListener("storage",r),()=>{window.removeEventListener("storage",r)}},[]),Qt.default.createElement(eO,{client:Iee},Qt.default.createElement(nx,null,Qt.default.createElement(PI,null,Qt.default.createElement(vM,null,Qt.default.createElement(mg,null,Qt.default.createElement(ls,{path:"/",element:e?Qt.default.createElement(mI,null):Qt.default.createElement(pq,null)}),Qt.default.createElement(ls,{path:"/recover-password",element:Qt.default.createElement(mq,null)}),Qt.default.createElement(ls,{path:"*",element:Qt.default.createElement(xI,null)}))))))};(0,vq.render)(Qt.default.createElement(Ree),document.getElementById("root"));
/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
/**
 * @license React
 * react-dom-server-legacy.browser.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-dom-server.browser.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * React Router DOM v6.3.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
/**
 * React Router v6.3.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
//# sourceMappingURL=data:application/json;base64,
